#!/bin/sh
   VERSION=( "2.0.0rc2_051005" )
  CATEGORY="office"
 ATTRIBUTE="x11 new solo"
    SOURCE="contrib/rc/2.0.0rc2/OOo_${VERSION}_src.tar.gz"
       URL="ftp://openoffice.cict.fr/openoffice"
  HOMEPAGE="http://www.openoffice.org/"
       REQ=("jpeg expat freetype libwpd libxml Python db sane-backends x11 curl boost mozilla nasm unzip zip tcsh Archive-Zip XML-Parser")
  ESTIMATE=""
      DESC="OpenOffice.org is an office suite"
	 FEATURE="$FEATURE discard"

check_space()  {
 KILOBYTES=$(
 df    -Pkm  $SOURCE_DIR  |
 tr    -s ' '             |
 tail  -n 1               |
 cut   -d ' '  -f4
 )
 if    ((  KILOBYTES < 4400  ));  then
  echo  "Insufficient disk space available for compiling OOo2.0 : 4.4G is at least required"
  false
 fi
}


patch() {
  case ${VERSION} in
    2.0.0rc2_051005)
    set -x
      sed -i "s:unzip::g" makefile.mk &&
      #sed -i "s:unzip::g" config_office/makefile.mk &&
      sed -i 's#MYZIPTARGET:b)#MYZIPTARGET:b).zip#' ./odk/pack/copying/makefile.mk &&
      sed -i 's#PKGCONFIG_MODULES=gconf-2.0 gobject-2.0#PKGCONFIG_MODULES=gconf-2.0 gobject-2.0 ORBit-2.0 glib-2.0#' shell/source/backends/gconfbe/makefile.mk &&
      sed -i 's#PKGCONFIG_MODULES=gnome-vfs-2.0#PKGCONFIG_MODULES=gnome-vfs-2.0 glib-2.0#' ucb/source/ucp/gvfs/makefile.mk &&
      sed -i 's#PKGCONFIG_MODULES=gtk+-2.0 gthread-2.0#PKGCONFIG_MODULES=gtk+-2.0 gthread-2.0 gdk-2.0 glib-2.0 gobject-2.0 pango gdk-pixbuf-2.0#' vcl/util/makefile.mk && 
      sed -i 's#PKGCONFIG_MODULES=gtk+-2.0#PKGCONFIG_MODULES=gtk+-2.0 gobject-2.0 glib-2.0 pango gdk-pixbuf-2.0#' fpicker/source/unx/gnome/makefile.mk &&

      export CFLAGS="$CFLAGS\
                    $(pkg-config --cflags  mozilla-plugin)\
                    -Werror-implicit-function-declaration\
                    $( pkg-config --cflags glib-2.0)\
                    $( pkg-config --cflags ORBit-2.0)" &&
      export CXXFLAGS="$CXXFLAGS\
                      $( pkg-config --cflags glib-2.0)\
                      $( pkg-config --cflags ORBit-2.0)" &&
      export LDFLAGS="$LDFLAGS\
                      $(pkg-config --libs  mozilla-plugin)\
                      $(pkg-config --libs gconf-2.0)\
                      $( pkg-config --libs glib-2.0)\
                      $( pkg-config --libs ORBit-2.0)"  &&
      chmod +x solenv/bin/gccinstlib.pl &&
      sed -i 's:pthread_kill_other_threads_np();::' ./sal/osl/unx/process.c 
      set +x
      ;;
  esac

}




build() {
  OPTS=" $OPTS\
  --prefix=/opt/OOo2.0\
  --without-java\
  --with-package-format=portable\
  --with-systeb\
  --with-system-jpeg\
  --with-system-expat\
  --with-system-freetype\
  --with-system-libwpd\
  --with-system-libxml\
  --with-system-python\
  --with-system-db\
  --with-system-sane-header\
  --with-system-xrender-headers\
  --with-system-curl\
  --with-system-boost\
  --with-system-nasm\
  --with-system-sndfile\
  --disable-neon\
  --with-system-mozilla\
  --with-zip-home=/usr/bin/"
  date                                                &&
  check_space                                         &&
  # OOo use dmake for building, sources are provided and since dmake
  # isn't compatible with make and will likely be used only by 
  # OOo do a fake install of the tool
  cd dmake/                                           &&
  (unset CFLAGS; ./configure --prefix=$PWD/../solenv) &&
  make                                                &&
  make install                                        &&
  cd ..                                               &&
  export PATH="$PATH:$PWD/solenv/bin"                 &&

  # now configure 
  cd config_office/                                   &&
  ./configure ${OPTS}                                 &&
  cd ..                                               &&
  #patch AFTER the configure because some files are created
  patch                                               &&

  # setup the env
  source  LinuxIntelEnv.Set.sh                        &&
  #./bootstrap &&
  # build
  dmake                                               &&

  # begin "fake" install ie undo what OOo have done (creating archives)
  echo "/usr/src/sorcery/unpack_openofficeorg" | ./instsetoo_native/*/OpenOffice/install/*_download/OOo_*_install*.sh                  &&
  cd /usr/src/sorcery/unpack_openofficeorg/*          &&
  for install in openoffice.org*.tar.gz; do 
    tar -xzf ${install} 
  done                                                &&
  # end of fake install, do the real stuff
  
  prepare_install                                     &&
  cd /                                                &&
  for file in /usr/src/sorcery/unpack_openofficeorg/*/*.sw; do
    tar -xf $file
  done                                                &&
  rm -rf /usr/src/sorcery/unpack_openofficeorg        &&
	date
}
