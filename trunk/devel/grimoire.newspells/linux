#!/bin/sh

   VERSION=( "2.6.11.10" "2.6.11.9" "2.6.11.8" "2.6.11.7" "2.6.11.6" "2.6.11.5" "2.6.11.4" "2.6.11.3" "2.6.11.2" "2.6.11" "2.6.10" "2.6.8.1" "2.6.9" "2.6.8.1" )
      SAFE=( "2.6.11.10" "2.6.11.9" "2.6.11.8" "2.6.11.7" "2.6.11.6" )
  CATEGORY="kernel"
 ATTRIBUTE="core solo"
    SOURCE="pub/linux/kernel/v${VERSION:0:3}/linux-$VERSION.tar.bz2"
       URL="$KERNEL_URL"
  HOMEPAGE="http://www.kernel.org"
       REQ=( "" "module-init-tools:::for tools for modular kernel" )
   PROTECT="/lib/modules"
  EPROVIDE="linux-kernel linux,v2.6"
  ESTIMATE="2291"
      DESC="linux provides 2.6.x stable kernels.
linux is a clone of the Unix kernel,
written from scratch by Linus Torvalds
with assistance from a loosely-knit
team of hackers across the Net.
It aims towards POSIX and Single
UNIX Specification compliance.
It has all the features you would
expect in a modern fully-fledged
Unix kernel, including true multitasking,
virtual memory, shared libraries,
demand loading, shared copy-on-write
executables, proper memory management,
and TCP/IP networking."




############################ Helper functions #######################

install_headers()  {

  install_header_dir()  {
    if    [   -h   $DESTDIR/usr/include/$1  ]
    then  rm  -f   $DESTDIR/usr/include/$1
    elif  [   -d   $DESTDIR/usr/include/$1  ]
    then  rm  -rf  $DESTDIR/usr/include/$1
    fi

    mkdir  -p   $DESTDIR/usr/include/$1
    cp     -R        include/$1/*   \
                $DESTDIR/usr/include/$1
  }

  install_header_dir  asm
  install_header_dir  asm-generic
  install_header_dir  linux
  true

}



backup_modules()  {

  if    [  -d  /lib/modules/$VERSION      ];  then
    rm   -rf   /lib/modules/$VERSION.old
    mv         /lib/modules/$VERSION      \
               /lib/modules/$VERSION.old
  fi

}


store_config()  {  cp  .config  $CONFIG_LOGS/$BSPELL/linux-config;  }


install_kernel()  {

  SM="System.map"
  BV="${VERSION}"
  BZ=$(  find  .  -name  bzImage  )

  rm     -rf                  /boot/$BV
  mkdir  -p                   /boot/$BV
  cp          $BZ             /boot/$BV/linux
  cp              System.map  /boot/$BV
  rm     -f                   /boot/System.map
  ln     -s   $BV/System.map  /boot/System.map

}


run_make_menuconfig()  {

  wiz_kill

  CONFIG_KERNEL="true"
  while  $CONFIG_KERNEL; do
    make  menuconfig
    if    query  "Repeat menuconfig?" n
    then  CONFIG_KERNEL=true
    else  CONFIG_KERNEL=false
    fi
  done
}



restore_linux_configs()  {

  CURRENT="$CONFIG_LOGS/$BSPELL/linux-config"
      OLD="$CONFIG_LOGS/$BSPELL/linux-config.old"
    LINUX="/usr/src/linux-$VERSION/.config"


  if    [  -f   $CURRENT  ];  then  cp  $CURRENT  $LINUX
  elif  [  -f   $OLD      ];  then  cp  $OLD      $LINUX;  run_make_menuconfig
  else  run_make_menuconfig
  fi

}



remove_extraversion()  {

  sed  -i  "s:EXTRAVERSION = .*:EXTRAVERSION =:"  Makefile

}


make_modules()  {
  if    grep  -q  "CONFIG_MODULES=y"  .config
  then  make   modules  &&  backup_modules
  fi
}


make_modules_install() {
  if    grep  -q  "CONFIG_MODULES=y"  .config
  then  make   modules_install
  fi
}


compile_and_install()  {
  yes  ""  |  make  oldconfig
  store_config            &&
  make   bzImage          &&
  make_modules            &&
  prepare_install         &&
  make_modules_install    &&
  install_kernel          &&
  install_headers
}

lilo_image_entry()  {

cat  <<  EOF

image			=	/boot/$VERSION/linux
	label		=	$VERSION
	read-only
	restricted

EOF

}


update_lilo()  {


 if    !  [  -f  /etc/lilo.conf  ]
 then  return
 fi

 if    !  grep  -q  -w  "$VERSION"  /etc/lilo.conf
 then

  IFS_OLD=$IFS
  export  IFS="$ENTER_IFS"

  rm     -rf  /etc/lilo.conf.old
  touch       /etc/lilo.conf.old
  chmod  600  /etc/lilo.conf.old

  rm     -rf  /etc/lilo.conf.new
  touch       /etc/lilo.conf.new
  chmod  600  /etc/lilo.conf.new

  cp  /etc/lilo.conf  /etc/lilo.conf.old

  (( IMAGE_COUNT=0  ))

  for  LINE  in  `cat /etc/lilo.conf`;  do

   if   echo  "$LINE"  |  grep  -q -w "image\|other";  then
    if    (( IMAGE_COUNT  == 0  ))
    then  lilo_image_entry  >>  /etc/lilo.conf.new
    fi
    ((  IMAGE_COUNT++  ))
   fi

   if    ((  IMAGE_COUNT == 14  ))
   then  break
   fi

   echo  "$LINE"  >>  /etc/lilo.conf.new

  done

  if    ((  IMAGE_COUNT ==  0  ))
  then  lilo_image_entry  >>  /etc/lilo.conf.new
  fi

  cp  /etc/lilo.conf.new  /etc/lilo.conf
  rm  /etc/lilo.conf.new

  export  IFS=$IFS_OLD

 fi

 /sbin/lilo

}


update_yaboot()  {

 if    !  [  -f  /etc/yaboot.conf  ]
 then  return
 fi

 if    !  grep  -q  -w "$VERSION"  /etc/yaboot.conf
 then

  IFS_OLD=$IFS
  export  IFS="$ENTER_IFS"

  rm     -rf  /etc/yaboot.conf.old
  touch       /etc/yaboot.conf.old
  chmod  600  /etc/yaboot.conf.old

  rm     -rf  /etc/yaboot.conf.new
  touch       /etc/yaboot.conf.new
  chmod  600  /etc/yaboot.conf.new

  cp  /etc/yaboot.conf  /etc/lilo.conf.old

  (( IMAGE_COUNT=0  ))

  for  LINE  in  `cat /etc/yaboot.conf`;  do

   if   echo  "$LINE"  |  grep  -q -w  "image\|other";  then

    if    (( IMAGE_COUNT  == 0  ))
    then  lilo_image_entry  >>  /etc/yaboot.conf.new
    fi
    ((  IMAGE_COUNT++  ))
   fi

   if    ((  IMAGE_COUNT == 14  ))
   then  break
   fi

   echo  "$LINE"  >>  /etc/yaboot.conf.new

  done

  if    ((  IMAGE_COUNT ==  0  ))
  then  lilo_image_entry  >>  /etc/yaboot.conf.new
  fi

  cp  /etc/yaboot.conf.new  /etc/yaboot.conf

  export  IFS=$IFS_OLD

 fi

 /usr/sbin/ybin

}


###################### SPELL API ####################################3

pre_build() {
 default_pre_build
 mkdir  -p  $DESTDIR/usr/src
 cd         $DESTDIR/usr/src
 rm     -rf            linux-$VERSION
 unpack     $SOURCE
 rm     -f                             linux
 chown  -R  root:root  linux-$VERSION
 ln     -s             linux-$VERSION  linux
 cd                    linux-$VERSION
}

if [ -n "$HEADERS_STEP" ]; then

	headers_build() {
		if [ -n "$DEST_ARCH" ]; then
			local ARCHITECHTURE="ARCH=$DEST_ARCH"
		fi
		cd $DESTDIR/usr/src/linux-$VERSION                   &&
		make $ARCHITECHTURE defconfig                &&
		make $ARCHITECHTURE include/asm              &&
		make $ARCHITECHTURE include/linux/version.h  &&
		prepare_install                              &&
		install_headers
	}

	build () {
		headers_build
	}

else	

	build() {

		cd  /usr/src/linux-$VERSION
		restore_linux_configs  &&
		activate_voyeur        &&
		compile_and_install    &> $C_FIFO
	}

	post_install() {
		default_post_install

		case  $BUILD  in
			powerpc-linux-gnu)  update_yaboot  ;;
			*)  update_lilo    ;;
		esac


		RECAST=$(  show_installed  linux-26-module  )
		if    [  -n  "$RECAST"  ]
		then  unlock_cast;  cast  -c  $RECAST
		fi

		backup_lib

		if    [  -x  /usr/bin/mail   ]
		then  MAILER=/usr/bin/mail
		elif  [  -x  /usr/bin/mailx  ]
		then  MAILER=/usr/bin/mailx
		fi

		if    [  -n  "$MAILER"    ]  &&
			[  -n  "$SORCERER"  ]
		then
			(
			echo  "New linux kernel installed."
			echo  "Remember to reboot the box, please."
			)  |  $MAILER  -s  "Reboot reminder from sorcery."  $SORCERER
		fi

	}
	
fi
