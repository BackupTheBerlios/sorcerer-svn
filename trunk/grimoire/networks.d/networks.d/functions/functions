# Functions for use from network configuration templates.
# For use with the distribution Sorcerer only!
# Copyright Kyle Sallee 2008.
# All rights reserved.

[[ -n $MODULE ]] && modprobe $MODULE

carrier(){
 local  REPLY
 [[ -f  /sys/class/net/$IF/carrier ]] &&
 read < /sys/class/net/$IF/carrier    &&
 (( REPLY == 1 ))
}

wait_carrier(){
 declare -i TIMEOUT
 
 if   [[ -n $2 ]]
 then (( TIMEOUT = SECONDS + $1 ))
 else (( TIMEOUT = SECONDS + 10 ))
 fi
 while (( TIMEOUT > SECONDS )) && ! carrier; do sleep 0.1; done
 carrier
}

test_dns(){
 if ! which nmap 2>/dev/null; then return 2; fi
 local NS=$( sed -n 's/nameserver//p' /etc/resolv.conf | head -n 1 )
 if [[ -z $NS ]]; then return 1; fi
 nmap -n -p 53 $NS | grep -q 'open.*domain'
}

from_root(){ [[ -d /opt ]] && touch /etc/resolv.conf 2>/dev/null; }

start_dhcp(){
   if ! from_root; then return 1; fi
   if which dhclient 2>/dev/null; then dhclient "$@" $IF
 elif which dhcpcd   2>/dev/null; then dhcpcd   "$@" $IF
 else return 1
   fi

 wait_carrier
}

start_ppp(){
   if ! from_root; then return 1; fi
   if which pppoe-start 2>/dev/null; then pppoe-start "$@"
 elif which wvdial      2>/dev/null; then wvdial      "$@" &
 elif which dial2net    2>/dev/null; then dial2net -a "$@" &
 else return 1
   fi
}

v6(){ [[ $1 =~ : ]]; }

start_static(){
 local AD CMD GW I

 ip link set $IF down

 for I in ${!IPA[@]}; do
  AD=${IPA[$I]}
  CMD=ip
  if v6 "$AD"; then CMD+=' -6'; fi

  if [ ${!IPA[@]} -gt 0 ]; then
     CMD+=" addr replace $AD dev $IF label $IF:$I"
  else
     CMD+=" addr replace $AD dev $IF"
  fi
    
  [[ -n $BROADCAST ]] && CMD+=" broadcast $BROADCAST"
  $CMD
 done

 ip link set $IF up

 for GW in ${GATEWAY[@]}; do
  if   v6 "$GW"
  then ip -6 route replace to default via $GATEWAY
  else ip    route replace to default via $GATEWAY
  fi
 done
}

start_wlan(){
 local IWI="iwconfig $IF"
 if [[ -n $MODE  ]]; then $IWI mode    "$MODE"; fi
 if [[ -n $KEY   ]]; then $IWI key     "$KEY";   else $IWI key   off; fi
 if [[ -n $ESSID ]]; then $IWI essid   "$ESSID"; else $IWI essid any; fi
 if [[ -n $AP    ]]; then $IWI ap      "$AP";    else $IWI ap    off; fi
 if [[ -n $RETRY ]]; then $IWI retry   "$RETRY"; fi
# done elsewhere
#if [[ -n $IPA   ]]; then start_static "$IF";    else start_dhcp $IF; fi
}


start_wpa(){
 # Make sure wpa_cli is not running
 local  PIDF=/var/run/wpa_cli.$IF
 [[ -f $PIDF ]] && kill $(< $PIDF )

 # Run wpa control interface in daemon mode executing the
 # action file (-a <file>) that will perform actions on
 # "CONNECT" and "DISCONNECT" events. See "man wpa_cli"
 # The script should, for example call dhcpcd on 'CONNECT'
 if   [ -n "$WPA_ACTION" ]
 then /sbin/wpa_cli -a $WPA_ACTION -i $IF -B -P "$PIDF"
 else /sbin/wpa_cli -i $IF -B -P "$PIDF"
 fi
}

stop_if(){
 ip link set   $IF down
 ip addr flush $IF
}

  stop_wlan(){ stop_if; }
stop_static(){ stop_if; }
   stop_wpa(){ stop_if; /sbin/wpa_cli -i $IF terminate 2>/dev/null; }
start_dynamic(){ start_dhcp; }
stop_dynamic(){ stop_dhcp; }


stop_dhcp(){
 killpid(){ if [[ -f $1 ]]; then kill -p $(< $1 ) -s 15; rm -f $1; fi; }

 killpid /var/run/dhclient.pid
 killpid /var/run/dhcpcd-$IF.pid
}


stop_ppp(){
 if which pppoe-stop; then /usr/sbin/pppoe-stop; fi
 if which wvdial    ; then pkill -15 "^wvdial$"; fi 2>/dev/null
 if which dial2net  ; then dial2net -d; fi
}


start_smart(){
 if [[ -n $IF       ]] &&
    [[ -n $MAC      ]]; then ip link set $IF address $MAC; fi

 if [[ -z $IF       ]]; then start_ppp; return; fi
 if [[ -n $MODE     ]]; then start_wlan; fi
 if [[ -n $WPA_CONF ]]; then start_wpa; fi
 if [[ -n $IPA      ]]; then start_static
                        else start_dynamic; fi
}

stop_smart(){
 if [[ -z $IF       ]]; then stop_ppp; return; fi
 if [[ -n $WPA_CONF ]]; then stop_wpa; return; fi
 if [[ -n $IPA      ]]; then stop_static
                        else stop_dynamic; fi
}

start(){ start_smart; }
 stop(){  stop_smart; }
