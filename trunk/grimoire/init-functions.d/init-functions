# LSB-compliant init.d scripts for use with the distribution sorcerer only!
# Copyright Kyle Sallee 2005.  All rights reserved.

DEFAULT="\e[0m"
   BOLD="\e[1m"
  BLACK="\e[30m"
    RED="\e[31m"
  GREEN="\e[32m"
 YELLOW="\e[33m"
   BLUE="\e[34m"
 VIOLET="\e[35m"
   CYAN="\e[36m"
  WHITE="\e[37m"

log_start()  {
  local  COL
  echo  -n  -e  "${GREEN} * ${DEFAULT}"
  echo  -n  -e  "$1"
  COL=${#1}
  while  ((  COL  <  60  ))
  do     echo  -n  " ";   ((  COL++  ))
  done
}

log_finish()  {  echo  -e  "${BLUE}[$1 ${BLUE}]${DEFAULT}";  }

log_success_msg()  {
  log_start  "$1"
  log_finish "${GREEN} success"
}

log_failure_msg()  {
  log_start  "$1"
  log_finish "${RED} failed"
}

log_warning_msg()  {
  log_start  "$1"
  log_finish "${YELLOW} warning"
}

locked()  {
  local  LEN  STATUS  LINE  LPID

  [  -n  "$2"  ]  &&  LEN=${#2}      &&
  [  -n  "$1"  ]  &&  [  -f   $1  ]  &&
  read  LPID  <  $1                  &&
  STATUS="/proc/$LPID/status"        &&
  [  -f          $STATUS  ]          &&
  read  LINE  <  $STATUS             &&
  [  "${LINE:6:$LEN}"  ==  "$2"   ]
}

pidofproc()  {
  local  BASE  PIDF  PIDS

  while
    case  $1  in
      -p)  PIDF="$2";  shift  2  ;;
       *)  false                 ;;
    esac
  do  :
  done

  BASE=${1##*/}

  if      [ -z "$PIDF"  ];  then
    if    [ -f /var/run/$BASE.pid  ]
    then  PIDF=/var/run/$BASE.pid
    elif  [ -f /var/run/$BASE      ]
    then  PIDF=/var/run/$BASE
    else  PIDS=$( /bin/pidof -o %PPID $BASE )
    fi
  fi

  if    [  -n       "$PIDF"  ];  then
    if    locked    "$PIDF"  "$BASE"
    then  echo  "$(< $PIDF )"
    else  false
    fi
  elif  [  -n  "$PID"  ]
  then  echo   "$PID"
  else  false
  fi
}

killproc()  {
  local  PIDF  PID  BASE  PIDS  SIGL

  while
    case  $1  in
      -p)  PIDF="$2";  shift  2  ;;
      -s)  SIGL="$2";  shift  2  ;;
       *)  false                 ;;
    esac
  do  :
  done

  BASE=${1##*/}

  if    [  -n  "$PIDF"  ]
  then  PIDS="$( pidofproc -p $PIDF "$@" )"
  else  PIDS="$( pidofproc          "$@" )"
  fi

  if      [  -n      "$PIDS"  ];  then
    if    [  -n      "$SIGL"  ]
    then  kill  -s   "$SIGL"  "$PIDS"
    else  kill  -s   15       "$PIDS";  sleep 3
          kill  -s   9        "$PIDS"
    fi
    if    [   -n  "$PIDF"  ]  &&
          [   -f  "$PIDF"  ]
    then  rm  -f  "$PIDF"
    fi
  else
    false
  fi
}

start_daemon()  {
  local  FORC  NICE  PIDF  BASE  PIDS  BACK

  while
    case  $1  in
      -f)  FORC="on";  shift  1  ;;
      -n)  NICE="$2";  shift  2  ;;
      -p)  PIDF="$2";  shift  2  ;;
      -b)  BACK="on";  shift  1  ;;
       *)  false                 ;;
    esac
  do  :
  done

  BASE=${1##*/}

  if    [  -n  "$PIDF"  ]
  then  PIDS="$( pidofproc -p $PIDF "$@" )"
  else  PIDS="$( pidofproc          "$@" )"
  fi

  if    [ -z  "$PIDS" ]  ||
        [ -n  "$FORC" ]
  then
    if      [     -z  "$PIDF"   ]  ||
            [     -z  "$BACK"   ];  then
      if    [     -n  "$NICE"   ]
      then  nice  -n  "$NICE"  "$@"
      else                     "$@"
      fi
    else (
      if    [     -n  "$NICE"   ]
      then  nice  -n  "$NICE"  "$@" &
      else                     "$@" &
      fi
      sleep 0.1;  echo  $!  >  $PIDF
      ) &
    fi
  else
    false
  fi
}
