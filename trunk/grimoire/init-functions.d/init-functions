# Functions for LSB-compliant init-scripts
# Compatible with /bin/dash and /bin/bash
# For use with the distribution Sorcerer only!
# Copyright Kyle Sallee 2005 through 2013.
# All rights reserved.

CL="[K"
NORM="[0m"
BOLD="[1m"
RED="[31m"
GREEN="[32m"
BLUE="[34m"
WHITE="[37m"
BEAM="$WHITE$BOLD"

log_line(){ echo -en "\r$CL$BLUE[$1$BLUE]$BEAM $SELFFILE$NORM $2" 1>&2;}
log_success_msg(){ log_line "${GREEN}pass" "$1";}
log_failure_msg(){ log_line "${RED}fail" "$1\n";}
log_warning_msg(){ log_line "${WHITE}info" "$1";}

locked(){
 local S P REPLY

 [ "$2" ] && L=${#2} &&
 [ "$1" ] && [ -f "$1" ] &&
 read P < $1 &&
 S=/proc/$P/status &&
 [ -f  "$S" ] &&
 read REPLY < $S &&
 [ ${REPLY##*	} = "$2" ]
}

session(){
 read REPLY < $1 &&
 ps --no-heading -o comm -s $REPLY | grep -qx "$2" 
}

pids_from_cgroup(){
 cgroup_pids norm/sys/$NAME ||
 cgroup_pids idle/sys/$NAME ||
 cgroup_pids real/sys/$NAME ||
 cgroup_pids fast/sys/$NAME ||
 cgroup_pids slow/sys/$NAME
}

cgroup_rmdir(){
 if [ -z "$CGROUP_RETAIN" ]; then
  cgroup_oust norm/sys/$NAME ||
  cgroup_oust idle/sys/$NAME ||
  cgroup_oust real/sys/$NAME ||
  cgroup_oust fast/sys/$NAME ||
  cgroup_oust slow/sys/$NAME
 fi
}

pidofproc(){

 local PIDS

 while
  case $1 in
   -p) PIDF=$2 ;;
    *) break ;;
  esac
 do shift 2
 done

 BASE=${1##*/}

 if    [ -z "$PIDF" ]; then
  if   pids_from_cgroup;            then echo "$REPLY"; return
  elif [ -f "/var/run/$BASE.pid" ]; then PIDF=/var/run/$BASE.pid
  elif [ -f "/var/run/$BASE"     ]; then PIDF=/var/run/$BASE
  fi
 fi

 if    [ -s    "$PIDF" ]; then
  if   locked  "$PIDF" "$BASE" ||
       session "$PIDF" "$BASE"
  then read REPLY < $PIDF; echo $REPLY
  else false
  fi
 elif [ -n "$PIDS" ]
 then echo "$PIDS"
 else return 1
 fi
}

killproc(){
 local PIDF PID BASE PIDS SIGL

 while
  case $1 in
   -p) PIDF=$2 ;;
   -s) SIGL=$2 ;;
    *) break ;;
  esac
 do shift 2
 done

 BASE=${1##*/}; [ "$2" ] &&
 SIGL=$2
 PIDS="$( pidofproc -p "$PIDF" "$1" )"

 if    [     "$PIDS" ]; then
  if   [     "$SIGL" ]
  then kill "-$SIGL" $PIDS
  else kill -15      $PIDS; sleep 3
       kill -9       $PIDS
  fi 2>/dev/null
  if   [  -f "$PIDF" ]
  then rm -f "$PIDF"
  fi
  cgroup_rmdir &&
  return 0
 else return 1
 fi
}

start_daemon(){
 run(){
  case $CGRP in
   none) : ;;
     ?*) cgroup_join $CGRP/sys/$NAME $AFFINE ;;
      *) cgroup_join  norm/sys/$NAME $AFFINE ;;
  esac

  # timeout is safe to use for starting daemons and servers
  # because daemons and servers return after starting
  # while keeping separate processes running in background.

  local TKILL
  local TOUT=${TOUT:-3600}	# maximum timeout 1 hour
  (( TKILL = TOUT + 15 ))

  if   [ "$BACK" ]
  then $TDOM /lib/lsb/pidf "$PIDF" "$@" &
  else $TDOM /bin/timeout -k $TKILL --foreground $TOUT "$@"
  fi
 }

 local BASE LOGF PIDF

 while
  case $1 in
   -p) PIDF=$2; shift ;;
   -l) LOGF=$2; shift ;;
   -b) BACK=1 ;;
   -f) FORC=1 ;;
    *) break ;;
  esac
 do shift
 done

 BASE=${1##*/}

 if [ "$BACK" ]; then
  LOGF="${LOGF:-/var/log/$BASE}"
  PIDF="${PIDF:-/var/run/$BASE.pid}"
 fi

 if   pidofproc -p "$PIDF" "$1" 1>/dev/null
 then [ "$FORC" ] || return 1
 fi

 if [ "$LOGF" ]; then run "$@" 1>> "$LOGF" 2>&1; else run "$@";  fi
}

# Functions below are not specified in the LSB
# $SERV must be set
# $LOCK $NAME $PIDF are optional.
# $OPTS is optional except when mounting

stats(){
 PIDS="$( pidofproc -p "$PIDF" "$SERV" )"
 if   [    "$PIDS" ]; then log_warning_msg "runs"; return 0
 elif [ -f "$PIDF" ]; then log_warning_msg "died and $PIDF exists"; return 1
 elif [    "$LOCK" ] &&
      [ -f "$LOCK" ]; then log_warning_msg "died and $LOCK exists"; return 2
                      else log_warning_msg "is not running"; return 3
 fi
}

statm(){
 if   mnt
 then log_warning_msg "mounted"; return 0
 else log_warning_msg "is not mounted"; return 3
 fi
}

statk(){
 if   lsmod | LC_ALL=C grep -qws "${NAME//-/.}"
 then log_warning_msg "module loaded"; return 0
 else log_warning_msg "module is not loaded"; return 3
 fi
}

status(){
 if   [ "$NAME" ] && [ -z "${NAME%%/*}" ]
 then statm
 elif [ "$SERV" ]
 then stats
 else statk
 fi
}

stops(){
 if   log_warning_msg "stop"; killproc -p "$PIDF" -s 15 "$SERV" || ! status &>/dev/null
 then log_success_msg "stop"
 else log_failure_msg "stop"; status
 fi
}

stopm(){
 if   log_warning_msg "unmount"; umount $NAME
 then log_success_msg "unmount"
 else log_failure_msg "unmount"; status
 fi
}
  
stopk(){
 if   log_warning_msg "module unload"; /sbin/modprobe -r $NAME
 then log_success_msg "module unload"
 else log_failure_msg "module unload"
 fi
}

stop(){
 if   [ "$NAME" ] && [ -z "${NAME%%/*}" ]
 then stopm
 elif [ "$SERV" ]
 then stops
 else stopk
 fi
}

mnt(){ [ -d "$NAME" ] && [ "$( /bin/stat -c "%m" "$NAME" 2>/dev/null )" == "${NAME%/}" ]; }

conf(){ [ "$CONF" ] && ! [ -e "$CONF" ]; }
miss(){ ! [ -f "$SERV" ]; }

starts(){
 if   conf
 then log_warning_msg "missing $CONF"; return 6
 elif miss
 then log_warning_msg "missing $SERV"; return 5
 elif log_warning_msg "start"; start_daemon -l "$LOGF" -p "$PIDF" "$SERV" $OPTS
 then log_success_msg "start"
 else log_failure_msg "start"; status
 fi
}

startm(){
 run(){
  if    ! [ -d "$NAME" ]; then /bin/mkdir -p "$NAME"; fi &&
  /bin/mount $OPTS  "$NAME"
 }

 if mnt; then return; fi
 if   conf
 then log_warning_msg "$CONF does not exist"
 elif log_warning_msg "mount"; run
 then log_success_msg "mount"
 else log_failure_msg "mount"
 fi
}

startk(){
 if [ "${NAME:0:2}" == '-r' ]; then
  NAME="${NAME:2:256}"
  if   log_warning_msg "module unload"; /sbin/modprobe -r $NAME 
  then log_success_msg "module unload"
  else log_failure_msg "module unload"
  fi
 else
  if   conf
  then log_warning_msg "$CONF does not exist"
  elif log_warning_msg "module load"; /sbin/modprobe $NAME $OPTS
  then log_success_msg "module load"
  else log_failure_msg "module loaded"
  fi
 fi
}

start(){
 if   [ "$NAME" ] && [ -z "${NAME%%/*}" ]
 then startm
 elif [ "$SERV" ]
 then starts
 else startk
 fi
}

    restart(){ stop && sleep 1; start; }
try_restart(){ [ "$SERV" ] && status 2>/dev/null && restart; return 0; }

help(){
 local keep="start stop restart try-restart reload force-reload status control"
 if [ -n "$only" ]; then keep="$only"; fi
 if [ -n "$deny" ]; then
  for omit in $deny; do
   keep="${keep// $omit / }"
   keep="${keep#$omit }"
   keep="${keep% $omit}"
  done
 fi
 echo "Usage: $SELF {${keep// /|}}" 1>&2
}

      reload(){ try_restart; }
force_reload(){ restart; }

parse(){
 numlock_on(){  setleds +num &>/dev/null; return 0; }
 numlock_off(){ setleds -num &>/dev/null; return 0; }

 permit(){
  if                              [ -n "${deny[$1]}" ]; then help; return 3; fi
  if [ -n "${only[control]}" ] && [ -z "${only[$1]}" ]; then help; return 3; fi
 }

 event_start(){
  [ -d $LOGD/ran/ ] || mkdir -pm 700 $LOGD/{failed,passed,ran}/
  echo $$ > $LOGD/ran/"${NAME//\//_}"
 }

 event_end(){
  E=$?

  rmf(){ if [ -f "$1" ]; then rm -f "$1"; fi; }

  if   [ $E == 0 ]
  then echo "$1" > $LOGD/passed/"${NAME//\//_}"; rmf $LOGD/failed/"${NAME//\//_}"
  else echo "$1" > $LOGD/failed/"${NAME//\//_}"; rmf $LOGD/failed/"${NAME//\//_}"
  fi
  # numlock_off

  exit $E
 }

 local p=$1 f=${1//-/_}
 shift 1
 if [ -z "$p" ]; then help; exit 127; fi

 # numlock_on
 event_start
 permit "$p" &&
 "$f" "$@"
 event_end "$p"
}

control(){
 control_menu(){
  case $mode in
   510) status="runs automatically and restarts automatically on updates" ;;
   500) status="runs automatically" ;;
     *) status="does not run automatically" ;;
  esac

  dialog \
   --title "$SELF"       \
   --timeout 60          \
   --stdout              \
   --cancel-label "Done" \
   --menu "$status." 0 0 0 \
   "Automatic"	"execution toggle?" \
   "Restart"	"on updates toggle?"
 }

 while
  mode=$( find "$SELF" -type f -printf "%m\n" )
  chattr -i "$SELF"
  case $( control_menu ) in
   Automatic) if   [ "${mode:0:1}" == 5 ]
              then chmod u-x "$SELF"
              else chmod u+x "$SELF"
              fi ;;
   Restart)   if   [ "${mode:1:1}" == 1 ]
              then chmod g-x "$SELF"
              else chmod g+x "$SELF"
              fi ;;
   *) /lib/lsb/install_initd; exit 0 ;;
  esac
  chattr +i "$SELF"
 do :;
 done
}

declare -A only
declare -A deny

only()    { while [ -n "$1" ]; do only[$1]=1; shift; done; only[control]=1; }
deny()    { while [ -n "$1" ]; do deny[$1]=1; shift; done; }
affine()  { AFFINE=${1:-0}; }
affinity(){ AFFINE=${1:-0}; }
pid_file(){ PIDF=$1; }
server()  { SERV=$1; }
config()  { CONF=$1; }
name()    { NAME=$1; }
log_file(){ LOGF=$1; }
options() { OPTS="$@"; }
fast()    { FAST=1; } # not work as expected since adjusting how prc runs.
fast()    { :; }
cgroup()  { CGRP=$1; }
timeout() { TOUT=$1; }
domain()  { if [ -f /domain/$1 ]; then TDOM=/domain/$1; fi; }

on_exit(){
 local         E=$?
 if ! [ 0 == "$E" ]
 then return  $E
 fi
 if [ -n "$FAST" ]
 then parse ${ARGS[*]} &
 else parse ${ARGS[*]}
 fi
}

rootfs(){ [ 1 == "$( /bin/stat -c %D / )" ]; }
rootfs(){ [ 0 == "$( /bin/stat -f -c %i / )" ]; }


SELFFILE=${0##*/}
SELFFILE=${SELFFILE#[SK][0-9][0-9]}

if   [ -z "$NAME" ]
then NAME="$SELFFILE"
fi

if   [ -f /etc/init.d/conf.d/$NAME ]
then .    /etc/init.d/conf.d/$NAME
fi

cgroup_find(){ false; }
cgroup_join(){ false; }
cgroup_pids(){ false; }
cgroup_oust(){ false; }
cgroup_kill(){ false; }

SELF="$0"
ARGS=( "$@" )
LOGD=/var/log/init

if   [ -f /lib/cgroup/functions ]
then .    /lib/cgroup/functions ]
fi

trap on_exit EXIT
