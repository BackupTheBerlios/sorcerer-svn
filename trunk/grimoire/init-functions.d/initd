#!/bin/bash
# LSB-compliant install_initd and remove_initd script
# for use with the distribution sorcerer only!
# Copyright Kyle Sallee 2005.  All rights reserved.

INIT_DIR=/etc/rc.d
INIT_NEW=/etc/rc.d.new
INIT_OLD=/etc/rc.d.old


multi()  {
  local  FUNC="$1"
  shift  1
  while  [  -n  "$1"  ]
  do     $FUNC  "$1";  shift  1
  done
}


match()  {
  local  HEAD  SERV  TAIL
  cut  --output-delimiter ' '  -d :  -f1,3  |
  while read  FROM  TAIL;  do
    for  SERV  in  $TAIL
    do   if  [  "$SERV"  ==  "$1"  ];  then  echo  "${FROM##*/}";  fi
    done
  done
}


get_provides()  {
  grep  -ir "#.*Provides:.* $1"  /etc/init.d  |
  match  "$1"
}


req_this()  {
  grep  -ir "#.*Required-Stop:.* $1\|#.*Should-Stop:.* $1"  /etc/init.d  |
  match  "$1"
}


default()    {  sed  -n  "s/.*#.*$2 *//Ip"  /etc/init.d/$1;  }

def_start()  {  default  "$1"  "Default-Start:";  }
def_stop()   {  default  "$1"  "Default-Stop:";   }
req_start()  {  default  "$1"  "Should-Start:";
                default  "$1"  "Required-Start:"; }
provides()   {  default  "$1"  "Provides:";       }


expand()  {
  local          HEAD  TAIL  SERV
  cut    -d ':'  --output-delimiter=' ' -f1,3  |
  sed       "s:.*[/]::"                        |
  if    [  -z  "$1"  ];  then
    while  read  HEAD  TAIL;  do
      for  SERV  in   $TAIL
      do  echo  "$HEAD $SERV"
      done
    done
  else
    while  read  HEAD  TAIL;  do
      for  SERV  in  $TAIL
      do  echo  "$SERV $HEAD"
      done
    done
  fi
}


executable()  {
  while  read;  do
    if    [  -x  /etc/init.d/"$REPLY"  ]
    then  echo               "$REPLY"
    fi
  done
}

get_rank()  {
  if    [  "$1" == "halt"    ]  ||
        [  "$1" == "reboot"  ]
  then  echo  9;  return
  else  RANK=0
  fi
  for  CHK  in  $2;  do
    for  SYML in $3?$CHK; do
      if    [  -h  "$SYML"  ]
      then     NRANK="${SYML##*/}"
               NRANK="${NRANK:1:1}"
            (( NRANK++ ))
        if  (( NRANK > RANK ));  then  RANK=$NRANK;  fi
      fi
    done
  done
  echo  "$RANK"
}

levels()  {
    for LEVEL in  $1;  do
      RANK="$( get_rank  "$2" "$3"  \
                              "$INIT_NEW/rc$LEVEL.d/$4"  )"
      ln  -s  /etc/init.d/$2   $INIT_NEW/rc$LEVEL.d/$4${RANK}$2
    done
}


make_slinks() {
  ( grep  -ir "#.*Provides:"                          /etc/init.d  |  expand
    grep  -ir "#.*Required-Start:\|#.*Should-Start:"  /etc/init.d  |  expand r
  )  |
  tsort       |
  executable  |
  while  read  SCRIPT;  do
    REQ_START="$( req_start $SCRIPT )"
    REQ_START+=" $( multi get_provides  $REQ_START )"
    DEF_START="$( def_start $SCRIPT )"
    levels  "$DEF_START"  "$SCRIPT"  "$REQ_START"  "S"
  done
}


make_klinks() {
  ( grep  -ir "#.*Provides:"                        /etc/init.d  |  expand r
    grep  -ir "#.*Required-Stop:\|#.*Should-Stop:"  /etc/init.d  |  expand
  )  |
  tsort       |
  executable  |
  while  read  SCRIPT;  do
    REQ_THIS="$( multi req_this $SCRIPT $( provides $SCRIPT ) )"
    DEF_STOP="$( def_stop  $SCRIPT )"
    levels  "$DEF_STOP"  "$SCRIPT"  "$REQ_THIS"  "K"
  done
}


make_links() {
  echo  "Creating symbolic links to startup and shutdown scripts."  1>&2
  [   -h      $INIT_DIR ]  &&
  rm  -f      $INIT_DIR
  while  [  -n  "$( find $INIT_NEW -type d -mmin -1 2>/dev/null )" ]
  do     sleep 5
  done
  mkdir  -p              $INIT_DIR
  rm     -rf             $INIT_NEW
  mkdir  -p              $INIT_NEW/rc{S,0,1,2,3,4,5,6,7,8,9}.d
  ln     -s  ../init.d   $INIT_NEW/init.d
  make_slinks
  make_klinks
  rm     -rf                $INIT_OLD
  mv             $INIT_DIR  $INIT_OLD
  mv  $INIT_NEW  $INIT_DIR
}

remove_initd()  {
  echo        "$@ will not be started during boot"  1>&2
  chmod  a-x  "$@"
}

install_initd() {
  echo         "$@ will be started during boot"  1>&2
  chmod  ug+x  "$@"
}

if      [  -f  "$1"  ];  then
  if    [  "${0##*/}"  ==  "install_initd"  ];  then  install_initd  "$1"
  elif  [  "${0##*/}"  ==  "remove_initd"   ];  then   remove_initd  "$1"
  fi
fi
make_links
