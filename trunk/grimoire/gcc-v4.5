# requiring coreutils creates recursive requirement loop

with version stable 4.5.3
with base    binutils libelf mpfr multiprecision
#with base    binutils cloog-ppl libelf mpfr multiprecision
#with base    binutils cloog-parma libelf mpfr multiprecision
with also    --without-ppl --without-cloog
#     with also --enable-cloog-backend=isl
#     with also --with-slibdir=/lib
with role    development/compiler
with trait   console library lto_off makej multilib-fail optimize
with source  $GNU_URL gcc/gcc-$VERSION/gcc-$VERSION.tar.bz2
with info    last 20111101
with info    home http://gcc.gnu.org/
with info    docs http://gcc.gnu.org/onlinedocs/
with info    mail http://gcc.gnu.org/lists.html
with info    cite 'GNU compiler collection'

build(){

 fix_la(){
  # gcc writes it's library path strangely in libstdc++.la
  # and other libtool la files and consequently libtool also
  # fails to canonicalize and adds and explict rpath that
  # ends up rpathing into /usr/lib64 or /usr/lib
  # Both gcc and libtool authors are at fault
  # for writing bad code.
  # canonicalizing the libtool la files here prevents
  # the rpath problem from spreading.

  sed -i 's:/lib64/\.\./lib64:/lib64:
          s:/lib64/\.\./lib:/lib:
          s:/lib/\.\./lib:/lib:' "$DESTDIR"/opt/gcc/$VERSION/lib/*.la
 }

 finish_install(){
  fix_la
  local STRSTREAM=$DESTDIR/opt/gcc/$VERSION/include/c++/$VERSION/backward/strstream

  if   [[ -f           $STRSTREAM   ]] &&
     ! [[ -f           $STRSTREAM.h ]]
  then ln -s strstream $STRSTREAM.h
  fi

  rm -f  $DESTDIR/opt/gcc/$VERSION/info/dir
 }

 export   CFLAGS="${CFLAGS/-fomit-frame-pointer/}"
 export CXXFLAGS="${CXXFLAGS/-fomit-frame-pointer/}"
 export CCACHE_DISABLE=1
 export PATH="$( echo "$PATH" | sed "s/[^:]*ccache://" )"

 case $MACHTYPE in
  *-uclibc) with also --disable-__cxa_atexit --host=$HOSTTYPE-linux-uclibc --build=$HOSTTYPE-linux-uclibc --target=$HOSTTYPE-linux-uclibc ;;
  *-gnu)    with also --enable-__cxa_atexit --enable-clocale=gnu ;;
 esac

 if   [[ $HOSTTYPE == x86_64 ]] && ! [[ -f /lib/libc.so.6 ]]
 then with also --disable-multilib
 fi

   LCF="LIBCFLAGS=$CFLAGS"
  LCXF="LIBCXXFLAGS=$CXXFLAGS"
    BF="BOOT_CFLAGS=$CFLAGS"
  LJCF="LIBGCJ_CFLAGS=$CFLAGS"
 LJCXF="LIBGCJ_CXXFLAGS=$CXXFLAGS"
  LJJF="LIBGCJ_JAVAFLAGS=$CFLAGS"
#  LDF="LDFLAGS=$LDFLAGS"
   LDF="LDFLAGS=$LDFLAGS -Wl,-R/opt/gcc/$VERSION/lib64 -Wl,-R/opt/gcc/$VERSION/lib"

# --enable-shared
 OPTS+="
  --prefix=/opt/gcc/$VERSION
  --infodir=/usr/info
  --mandir=/usr/man
  --datadir=/usr/share
  --enable-long-long
  --enable-threads
  --enable-tls
  --with-system-zlib
  --disable-bootstrap"

 if [ -f /sbin/sinstall ] && [ -f /root/compact-IR ]; then
  OPTS+=" --enable-libstdcxx-pch=no"
  OPTS+=" --enable-languages=c,c++";  else
  OPTS+=" --enable-languages=c,c++,fortran,objc"

# multilib libjava compilation problematic because libtool
# is selecting the wrong bit ELF libraries.
#  OPTS+=" --enable-languages=c,c++,fortran,java,objc"
#  OPTS+=" --enable-java-awt=xlib --enable-plugin"
#  if   [[ $HOSTTYPE == x86_64 ]] && [[ $CFLAGS =~ -m32 ]]
#  then with also --x-libraries=/usr/lib
#  fi
 fi

 mkdir BUILD
 cd    BUILD
 ../configure $OPTS             &&
 make "$BF"                     \
      "$LCF"  "$LCXF"  "$LDF"   \
      "$LJCF" "$LJCXF"          &&
 make  install DESTDIR=$DESTDIR &&
 finish_install
}
