   VERSION=( 1.1.2 1.1.1 1.1.0 )
    IGNORE='pre\|rc'
  CATEGORY='network/file-share'
 ATTRIBUTE='console client server'
    SOURCE="nfs/nfs-utils-$VERSION.tar.gz"
       URL="$SOURCEFORGE_URL"
  HOMEPAGE='http://sourceforge.net/projects/nfs'
# /etc/init.d/rpc.mountd start
# Cannot register service: RPC: Unable to receive; errno = Connection refused
# Even with static port configuration via -p rpc.mountd
# still requires portmapper installed and running.
       REQ=( 'libevent libnfsidmap portmap'
             'portmap:::[*]=dynamic or [ ]=static port assignments' )
      OPTS='--disable-gss --sbindir=/sbin'
  ESTIMATE='900'
      DESC='nfs-utils provides utilities for the NFS, Network File System.
The Network File System (NFS) was developed to allow machines to mount
a disk partition on a remote machine as if it were on a local hard drive.
This allows for fast, seamless sharing of files across a network.
Read the Security section of the NFS-HOWTO
if you intend to implement an NFS setup.'

configure(){

 assigned(){
  cat /etc/services |
  tr      '\t'  ' ' |
  tr   -s ' '       |
  cut  -d ' '   -f2 |
  cut  -d '/'   -f1 |
  LC_ALL=C  sort  -ug
 }

 block4(){
  assigned |
  while read; do  echo "$REPLY"
   (( REPLY-- )); echo "$REPLY"
   (( REPLY-- )); echo "$REPLY"
   (( REPLY-- )); echo "$REPLY"
  done
 }

 4k_ports(){
  for((CX=0;CX<4096;CX++))
  do echo "$CX"
  done
 }

 avail_ports(){
  ( 4k_ports
    block4 | sed p
  ) | LC_ALL=C sort -g | uniq -u
 }

 port_menu(){
  BACKTITLE=$"$SPELL Configuration Menu"
      TITLE=$"Port Selection"
       HELP=$"Please select the base port number for statd"

  dialog --stdout --no-cancel --timeout "$PROMPT_DELAY" \
         --backtitle "$BACKTITLE" --title "$TITLE" --menu "$HELP" 0 0 0 \
         $( avail_ports | sed aport )
 }

 ask_port(){
  if          PORT_BASE="$( port_menu )" &&
       [ -n "$PORT_BASE" ]
  then echo  "PORT_BASE=$PORT_BASE" >> $SPELL_CONFIG
  fi
 }

 if  grep -qsx portmap $OPT_OFF_LOGS/$SPELL; then
  if   [ -z "$PORT_BASE" ]
  then ask_port
  fi
 fi
}


build(){

 use_portmapper(){
  # grep -q   lockd    /etc/modprobe.conf &&
  # sed  -i '/lockd/d' /etc/modprobe.conf
  grep  -l  '^OPTS=' $SCRIPT_DIR/init.d/rpc.* | xargs -r --max-lines=8 \
  sed   -i 's:OPTS=:#OPTS=:'
 }


 assigned_ports(){
  (( STATD_LISTEN = PORT_BASE     ))
  (( STATD_TALK   = PORT_BASE + 1 ))
  (( MOUNTD       = PORT_BASE + 2 ))
  (( LOCKD        = PORT_BASE + 3 ))

  ID="$SCRIPT_DIR/init.d/"
  LOCKD_OPTS="nlm_udpport=$LOCKD nlm_tcpport=$LOCKD"

  sed -i "s:#OPTS=.*:OPTS='-p $STATD_LISTEN -o $STATD_TALK':" $ID/rpc.statd
  sed -i "s:#OPTS=.*:OPTS='-p $MOUNTD':"                      $ID/rpc.mountd
  #sed -i "s:#OPTS=.*:OPTS='$LOCKD_OPTS':"                     $ID/lockd

  MP=/etc/modprobe.conf
  echo "options lockd nlm_udpport=$LOCKD nlm_tcpport=$LOCKD" > $MP
 }

 if   ! spell_installed tcp_wrappers
 then OPTS+=' --without-tcp-wrappers'
 fi

 export   CFLAGS+=' -I /usr/include/et'
 export CXXFLAGS+=' -I /usr/include/et'
 default_build &&

 if   grep -qsx portmap $OPT_OFF_LOGS/$SPELL
 then assigned_ports
 else use_portmapper
 fi
}

current(){
 case $VERSION in
  1.1.2) grep -q 'Default-Start: 2 3 4 5' /etc/init.d/rpc.idmapd ;;
 esac
}
