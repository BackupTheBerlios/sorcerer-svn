with info    edit 20131211
# Even with static port configuration
# rpc.mountd always requires rpcbind
# nfs-utils only supports MIT Kerberos 5 at the moment.
# therefore --disable-gss is mandatory for compilation

# glibc > 2.13 lacks sufficient RPC support to compile libtirpc
# consequently, librpcsecgss and rpcbind also do not compile.,
# consequently, nfs-utils also does not compile.

with info    last 20131107
with version   stable 1.2.9 1.2.8 1.2.7
with version unstable 1.2.9
with base    LVM2 keyutils libevent libnfsidmap librpcsecgss procps rpcbind util-linux
with elect   libcap
with elect   sqlite
with switch  -static '' '[ ]=dynamic or [*]=static port assignments'
with also    --disable-gss --sbindir=/sbin
with role    network/file-share
with trait   console client server
with source  stable $SOURCEFORGE_URL nfs/nfs-utils/$VERSION/nfs-utils-$VERSION.tar.bz2
with info    home http://sourceforge.net/projects/nfs
with info    cite 'utilities for the NFS, Network File System
The Network File System (NFS) was developed to allow machines to mount
a disk partition on a remote machine as if it were on a local hard drive.
This allows for fast, seamless sharing of files across a network.
Read the Security section of the NFS-HOWTO
if you intend to implement an NFS setup.'

configure(){

 assigned(){
  cat /etc/services |
  tr      '\t'  ' ' |
  tr   -s ' '       |
  cut  -d ' '   -f2 |
  cut  -d '/'   -f1 |
  LC_ALL=C  sort  -ug
 }

 block4(){
  assigned |
  while read; do  echo "$REPLY"
   (( REPLY-- )); echo "$REPLY"
   (( REPLY-- )); echo "$REPLY"
   (( REPLY-- )); echo "$REPLY"
  done
 }

 4k_ports(){
  for((CX=0;CX<4096;CX++))
  do echo "$CX"
  done
 }

 avail_ports(){
  ( 4k_ports
    block4 | sed p
  ) | LC_ALL=C sort -g | uniq -u
 }

 port_menu(){
  BACKTITLE=$"$TECHNIC Configuration Menu"
      TITLE=$"Port Selection"
       HELP=$"Please select the base port number for statd"

  dialog --stdout --no-cancel --timeout "$PROMPT_DELAY" \
         --backtitle "$BACKTITLE" --title "$TITLE" --menu "$HELP" 0 0 0 \
         $( avail_ports | sed aport )
 }

 ask_port(){
  if          PORT_BASE="$( port_menu )" &&
       [[ -n $PORT_BASE ]]
  then echo  "PORT_BASE=$PORT_BASE" >> $TECHNIC_CONFIG
  fi
 }

 if grep -qs static $OPT_ON_LOGS/$TECHNIC; then ask_port; fi
}


build(){ (

 use_rpcbind(){
  # grep -q   lockd    /etc/modprobe.conf &&
  # sed  -i '/lockd/d' /etc/modprobe.conf
  grep  -l  '^OPTS=' $SCRIPT_DIR/init.d/rpc.* | xargs -r --max-lines=8 \
  sed   -i 's:OPTS=:#OPTS=:'
 }


 assigned_ports(){
  (( STATD_LISTEN = PORT_BASE     ))
  (( STATD_TALK   = PORT_BASE + 1 ))
  (( MOUNTD       = PORT_BASE + 2 ))
  (( LOCKD        = PORT_BASE + 3 ))

  ID="$SCRIPT_DIR/init.d"
  IO="$SCRIPT_DIR/init.d.on"
  LOCKD_opts nlm_udpport=$LOCKD nlm_tcpport=$LOCKD

  sed -i "s:#OPTS=.*:opts -p $STATD_LISTEN -o $STATD_TALK:" $IO/rpc.statd
  sed -i "s:#OPTS=.*:opts -p $MOUNTD:"                      $ID/rpc.mountd
  #sed -i "s:#OPTS=.*:opts $LOCKD_OPTS:"                    $IO/lockd

  mkdir -p $DESTDIR/etc/modprobe.d
        MP=$DESTDIR/etc/modprobe.d/nfs-utils.conf
  echo "options lockd nlm_udpport=$LOCKD nlm_tcpport=$LOCKD" > $MP
 }

 if   [[ -n       ${SOURCE[1]} ]]
 then patch -p1 < ${SOURCE[1]}
 fi

 local STATIC

 if   echo "$OPTS" | grep static
 then STATIC=yes
 fi

 OPTS=${OPTS/-dynamic/}
 OPTS=${OPTS/-static/}

 if   ! technic_installed tcp_wrappers
 then OPTS+=' --without-tcp-wrappers'
 fi

 export   CFLAGS+=' -I/usr/include/et'
 export CXXFLAGS+=' -I/usr/include/et'
 default_build &&
 mkdir -p $DESTDIR/etc &&
 install -m 644 $SCRIPT_DIR/idmapd.conf $DESTDIR/etc &&

 if   [[ -n $STATIC ]]
 then assigned_ports
 else use_rpcbind
 fi
) }
