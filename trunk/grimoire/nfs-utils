    stable 1.1.2 1.1.1 1.1.0
   require libevent libnfsidmap procps rpcbind
  switch static dynamic '[ ]=dynamic or [*]=static port assignments'

    ignore 'pre\|rc'
  category network/file-share
 attribute console client server
    source nfs/nfs-utils-$VERSION.tar.gz
       url "$SOURCEFORGE_URL"
  homepage http://sourceforge.net/projects/nfs

# Even with static port configuration
# rpc.mountd always requires rpcbind

      opts --disable-gss --sbindir=/sbin
# nfs-utils only supports MIT Kerberos 5 at the moment.
# therefore --disable-gss is mandatory for compilation

case $VERSION in
 1.1.2) source nfs-utils-1.1.2-CITI_NFS4_ALL-1.dif
           url http://www.citi.umich.edu/projects/nfsv4/linux/nfs-utils-patches/1.1.2-1/ ;;
esac
  estimate 900
      desc 'nfs-utils provides utilities for the NFS, Network File System.
The Network File System (NFS) was developed to allow machines to mount
a disk partition on a remote machine as if it were on a local hard drive.
This allows for fast, seamless sharing of files across a network.
Read the Security section of the NFS-HOWTO
if you intend to implement an NFS setup.'

configure(){

 assigned(){
  cat /etc/services |
  tr      '\t'  ' ' |
  tr   -s ' '       |
  cut  -d ' '   -f2 |
  cut  -d '/'   -f1 |
  LC_ALL=C  sort  -ug
 }

 block4(){
  assigned |
  while read; do  echo "$REPLY"
   (( REPLY-- )); echo "$REPLY"
   (( REPLY-- )); echo "$REPLY"
   (( REPLY-- )); echo "$REPLY"
  done
 }

 4k_ports(){
  for((CX=0;CX<4096;CX++))
  do echo "$CX"
  done
 }

 avail_ports(){
  ( 4k_ports
    block4 | sed p
  ) | LC_ALL=C sort -g | uniq -u
 }

 port_menu(){
  BACKTITLE=$"$SPELL Configuration Menu"
      TITLE=$"Port Selection"
       HELP=$"Please select the base port number for statd"

  dialog --stdout --no-cancel --timeout "$PROMPT_DELAY" \
         --backtitle "$BACKTITLE" --title "$TITLE" --menu "$HELP" 0 0 0 \
         $( avail_ports | sed aport )
 }

 ask_port(){
  if          PORT_BASE="$( port_menu )" &&
       [ -n "$PORT_BASE" ]
  then echo  "PORT_BASE=$PORT_BASE" >> $SPELL_CONFIG
  fi
 }

 if grep -qs static $OPT_ON_LOGS/$SPELL; then ask_port; fi
}


build(){

 use_rpcbind(){
  # grep -q   lockd    /etc/modprobe.conf &&
  # sed  -i '/lockd/d' /etc/modprobe.conf
  grep  -l  '^OPTS=' $SCRIPT_DIR/init.d/rpc.* | xargs -r --max-lines=8 \
  sed   -i 's:OPTS=:#OPTS=:'
 }


 assigned_ports(){
  (( STATD_LISTEN = PORT_BASE     ))
  (( STATD_TALK   = PORT_BASE + 1 ))
  (( MOUNTD       = PORT_BASE + 2 ))
  (( LOCKD        = PORT_BASE + 3 ))

  ID="$SCRIPT_DIR/init.d"
  IO="$SCRIPT_DIR/init.d.on"
  LOCKD_opts nlm_udpport=$LOCKD nlm_tcpport=$LOCKD

  sed -i "s:#OPTS=.*:opts -p $STATD_LISTEN -o $STATD_TALK:" $IO/rpc.statd
  sed -i "s:#OPTS=.*:opts -p $MOUNTD:"                      $ID/rpc.mountd
  #sed -i "s:#OPTS=.*:opts $LOCKD_OPTS:"                    $IO/lockd

  MP=/etc/modprobe.conf
  echo "options lockd nlm_udpport=$LOCKD nlm_tcpport=$LOCKD" > $MP
 }

 if   ! spell_installed tcp_wrappers
 then OPTS+=' --without-tcp-wrappers'
 fi

 if   [ -n "${SOURCE[1]}" ]
 then patch -p1 < $SOURCE_CACHE/nfs-utils/$VERSION/${SOURCE[1]}
 fi

 local STATIC

 if   echo "$OPTS" | grep static
 then STATIC=yes
 fi

 opts ${OPTS/dynamic/}
 opts ${OPTS/static/}

 export   CFLAGS+=' -I /usr/include/et'
 export CXXFLAGS+=' -I /usr/include/et'
 default_build &&
 install -m 644 $SCRIPT_DIR/idmapd.conf /etc &&

 if   [ -n "$STATIC" ]
 then assigned_ports
 else use_rpcbind
 fi
}

current(){
 case $VERSION in
  1.1.2) grep -q var/lib/nfs/rpc_pipefs /etc/init.d/var_lib_nfs_rpc_pipefs ;;
 esac
}
