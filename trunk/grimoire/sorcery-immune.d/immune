#!/bin/bash
# Copyright 2000 through 2008 by Kyle Sallee,
# All rights reserved.
# For use with the Sorcerer distribution only.

# immune detects, corrects, and notifies the SA of problems.
# critical: ELF library checks involving glibc, ncurses and readline / 2 minutes
# neglect:  update of installed spells / 2 weeks

export  TEXTDOMAIN=${0##*/}
export  TEXTDOMAINDIR=/usr/share/locale

mail_immune_report(){
 if   [ -x /usr/bin/mail  ]; then MAILER=/usr/bin/mail
 elif [ -x /usr/bin/mailx ]; then MAILER=/usr/bin/mailx
 fi
 if   enabled "mail" ${FEATURE[*]} &&
      [ -n "$MAILER" ] && [ -n "$SORCERER" ]
 then       $MAILER -s  "$1"    $SORCERER $2
 fi
}

ldd_bash(){  LD_TRACE_LOADED_OBJECTS=1 /lib/ld-linux.so.2 /bin/bash 2>&1; }
ldd_bashx(){ LD_TRACE_LOADED_OBJECTS=1 /lib64/ld-linux-x86-64.so.2 /bin/bash 2>&1; }

check_bash(){
 locked $CAST_QUEUE/glibc cast && return

 if   [ -x /lib64/ld-linux-x86-64.so.2 ]
 then      LDD_BASH="$( ldd_bashx )"  &&
      [[ "$LDD_BASH" =~ lib        ]] &&
    ! [[ "$LDD_BASH" =~ not\ found ]]
 else
           LDD_BASH="$( ldd_bash )"   &&
      [[ "$LDD_BASH" =~ libc       ]] &&
    ! [[ "$LDD_BASH" =~ not\ found ]]
 fi
}


restore_lib(){
 local LD_LIBRARY_PATH

 if [ -d /lib64 ]; then
  export  LD_LIBRARY_PATH=/lib64.old
  /lib64.old/ld-[0-9]*.so /bin/rm -rf                   /lib64.broke
  /lib64.old/ld-[0-9]*.so /bin/mv                /lib64 /lib64.broke
  /lib64.old/ld-[0-9]*.so /bin/cp -a  /lib64.old /lib64
 else
  export  LD_LIBRARY_PATH=/lib.old
  /lib.old/ld-[0-9]*.so /bin/rm -rf              /lib.broke
  /lib.old/ld-[0-9]*.so /bin/mv             /lib /lib.broke
  /lib.old/ld-[0-9]*.so /bin/cp -a /lib.old /lib
 fi
 logger -p syslog.crit -s -t immune -- $"Critical library failure detected!"
 logger -p syslog.crit -s -t immune -- $"/lib     is now /lib.broke"
 logger -p syslog.crit -s -t immune -- $"/lib.old is now /lib"
 mail_immune_report  $"Immune detected and corrected critical library failure."
}

crit_check(){ check_bash || restore_lib; }

lock_immune(){      PFILE=/var/run/immune.pid
 if   locked       $PFILE immune
 then kill -15 $(< $PFILE )
 fi
 sleep 0.1
 echo $! > $PFILE
 disown
}

next_easy(){
 local AGE=$( find $INSTALL_LOGS/grimoire -maxdepth 0 -printf %T@ )
 local NOW=$( date +%s )

 (( NEXT_EASY = AGE + $HALF - NOW ))
 (( NEXT_EASY > 900 )) ||
 (( NEXY_EASY = 900 ))
}

neglect_check(){
 if (( SECONDS > NEXT_EASY )); then
  next_easy
  if find $INSTALL_LOGS/grimoire -maxdepth 0 -mtime +7 | grep -q '.'; then
   ( augur easy
     mail_immune_report  $"Immune updated installed spells." -a /var/log/immune.easy
   ) &> /var/log/immune.easy &
  fi
 fi
}

stall_check(){
 start(){ pgrep -u root "$1" >/dev/null || TERM="dumb" $1; }

 if (( NEXT_STAL <  SECONDS )); then
    (( NEXT_STAL += HOUR    ))
  if   queued check $CAST_QUEUE  com;         then start cast
  elif queued check $LEECH_QUEUE now reg low; then start leech
  elif queued check $DISPEL_QUEUE;            then start dispel
  fi
 fi
}

main(){
 trap : SIGHUP SIGINT SIGQUIT SIGILL SIGABRT SIGSTOP SIGPIPE
 while sleep 120; do
  $NEGLECT
  $CRITICAL
  $STALL
 done
}

. /etc/sorcery/config
export  IFS="$STANDARD_IFS"
export TERM="dumb"

(( HOUR = 3600 ))
(( HALF = 1209600 ))

unset     CRITICAL NEGLECT STALL
IMMUNITY='critical neglect stall'

if [ -n "$1" ]; then IMMUNITY="$@"; fi
if enabled critical $IMMUNITY; then CRITICAL=crit_check; fi
if enabled neglect  $IMMUNITY; then NEGLECT=neglect_check; next_easy; fi
if enabled stall    $IMMUNITY; then STALL=stall_check; NEXT_STAL=$HOUR; fi

[ -x /usr/bin/nice   ] && renice  19 -p $$ &>/dev/null
[ -x /usr/bin/ionice ] && ionice -c3 -p $$ &>/dev/null

main 1>>/var/log/immune 2>&1 &
lock_immune
