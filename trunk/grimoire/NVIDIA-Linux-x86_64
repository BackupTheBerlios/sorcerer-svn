# also see
# http://www.nvidia.com/Download/index.aspx?lang=en-us
# It sometimes points to newer drivers.

# 260.19.44 does not support xorg-server 1.10.0
# 285.03 is beta
# 310.14 is beta

with version stable 310.32 310.19 304.60
with version 313    313.18 313.09
with version 310    310.32 310.19 310.14
with version 304    304.64 304.60 304.43
with version 295    295.75
with version 290    290.10
with version 285    285.05.09 285.03
with version 280    280.13
with version 275    275.43 275.36 275.28 275.21
with version 270    270.41.19 270.41.06
with base    MesaLib gtk+ libXvMC linux-src xorg-server
with role    kernel
with trait   library linux-module multilib-fail optimize x86_64 solo x11
with source  http://us.download.nvidia.com/XFree86/Linux-x86_64/$VERSION/NVIDIA-Linux-x86_64-$VERSION-no-compat32.run
with info    last 20130131
with info    home http://www.nvidia.com
with info    vurl http://www.nvidia.com/object/unix.html
with info    freecode nvidiaxfree86_40drivers
with info    legacy http://www.nvidia.com/object/IO_32667.html
with clash   xf86-video-nouveau
with info    cite 'ELF 64-bit drivers and kernel module provided by NVIDIA for NVIDIA GPUs'

FEATURE[domain_log]=1

if   ! [[ $HOSTTYPE == x86_64 ]]; then
with trait   broke
elif ! [[ -f /lib/libc.so.6   ]]; then
with elect   NVIDIA-Linux-x86
fi

build(){
 fix_install(){
  mv             $DESTDIR/usr/include        $DESTDIR/usr/nvidia
  mkdir -pvm 755 $DESTDIR/usr/include
  mv             $DESTDIR/usr/nvidia/vdpau   $DESTDIR/usr/include
  mv             $DESTDIR/usr/nvidia         $DESTDIR/usr/include
  mkdir -pvm 755 $DESTDIR/etc/opengl/

  if [ -h  $DESTDIR/usr/lib64/libGL.so.1 ]; then
   mkdir -vpm 755                        $DESTDIR/usr/lib64/nvidia
   mv    -v   $DESTDIR/usr/lib64/libGL.* $DESTDIR/usr/lib64/nvidia/
   echo       /usr/lib64/nvidia  >       $DESTDIR/etc/opengl/nvidia
   echo       /usr/lib/nvidia   >>       $DESTDIR/etc/opengl/nvidia
  fi

# NVIDIA's wfb library can not be used by xorg and must not be installed
  rm -f $DESTDIR/usr/lib64/xorg/modules/*wfb*

## libglx extension should be installed over xorg-server's libglx
# rm -f $DESTDIR/usr/lib64/xorg/modules/extensions/libglx.*

  return 0
 }

 MOD_PATH=/usr/lib64/xorg/modules
 PRO="$( get_provider linux-kernel )"
 if   spell_installed $PRO
 then LVER="$( installed_version $PRO  )"
 else LVER="$( available_version linux )"
 fi

 case $LVER in
  3.3) LVER=3.3.0 ;;
  3.2) LVER=3.2.0 ;;
 esac

 PARAMETERS="
--accept-license
--no-questions
--ui=none
--x-prefix=$DESTDIR/usr
--x-module-path=$DESTDIR/$MOD_PATH
--x-library-path=$DESTDIR/usr/lib64
--opengl-prefix=$DESTDIR/usr
--installer-prefix=$DESTDIR/usr
--utility-prefix=$DESTDIR/usr
--documentation-prefix=$DESTDIR/usr
--kernel-source-path=/usr/src/linux
--kernel-install-path=$DESTDIR/lib/modules/$LVER/kernel/drivers/video
--kernel-name=$LVER
--no-runlevel-check
--no-abi-note
--no-rpms
--no-backup 
--no-network
--no-recursion
--no-x-check
--no-cc-version-check
--no-distro-scripts"

if ! [ -d /usr/src/linux ]; then
 echo    "/usr/src/linux is missing."
 echo    "Therefore, trying to compile and install without kernel module."
 PARAMETERS+=" --no-kernel-module"
fi

local     BUILD_DIR="$SOURCE_DIR/$SPELL/$SPELL-$VERSION"
rm   -fr $BUILD_DIR
mkdir -p $BUILD_DIR
cd       $BUILD_DIR
echo -e "#!/bin/bash\n/sbin/lsmod | grep -v \"nvidia\|rivafb\|nvidiafb\"" > $BUILD_DIR/lsmod
chmod a+x $BUILD_DIR/lsmod
export PATH=$BUILD_DIR:$PATH

mkdir -pvm 755 $DESTDIR/lib/modules/$LVER/kernel/drivers/video
mkdir -pvm 755 $DESTDIR/usr/{include,lib64}

yes Yes | sh "${SOURCE[0]}" $PARAMETERS &&

fix_install
}
