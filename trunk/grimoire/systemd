# systemd supplanted the udev project at release 183
# forked up udev is now included and installed with systemd

# elect on libgee installs gobject-introspection and much of xorg
# and creates recursive requierment loop involving
# cairo gobject-introspection libgee systemd MesaLib

# udevd must run on root file systems where xorg-server
# starts without a configuration file in order for
# external USB keyboard and pointer devices to automatically work.

with info    last 20131111
with version   stable 208 207 206
with version unstable 208
with base    acl cryptsetup dbus gperf intltool kmod libcap pci.ids pkgconfig sysvinit usbutils
if   [ -f "$CURRENT_LOGS"/sorcerer-iso9660 ] ||
     [ -f "$CURRENT_LOGS"/deployment-docent ]
then
with also    --disable-gtk-doc --disable-gtk-doc-html --disable-gtk-doc-pdf --disable-manpages
else
with base    docbook-xml-4.2 docbook-xsl libxslt
fi
# Elect on Console Kit creates recursive requirement loop
#with elect   ConsoleKit
with elect   libgcrypt '' '--disable-gcrypt --disable-libcryptsetup'
with elect   qrencode
#with elect   libgee
with also    --sbindir=/sbin --libexecdir=/lib --bindir=/sbin
with also    --disable-audit --disable-introspection 
with also    --with-rootprefix=
with also    --with-distro=other
with base     glib
#with also    --disable-gudev
# libgudev used by empathy, cheese, gnome-shell and other gnome software.
with also   --disable-tests
with role    utility
with trait   console library lto makej multilib-concurrent optimize server
with source    stable http://www.freedesktop.org/software/systemd/systemd-$VERSION.tar.xz
with source  unstable http://www.freedesktop.org/software/systemd/systemd-$VERSION.tar.xz
with info    home http://www.freedesktop.org/wiki/Software/systemd
with omit    /dev
#with omit    /lib/udev/dev/core
with vary    /lib/udev/dev/
with info    cite 'replacement for sysvinit'

build(){

# /dev/zero and /dev/mem are needed for uvesafb before udevd starts

 nod_sym_install(){
  install -vm 755 -d                      "$DESTDIR"/lib/udev/dev/{pts,shm}/
  /bin/ln -fns ../proc/self/fd            "$DESTDIR"/lib/udev/dev/fd
  /bin/ln -fns ../proc/self/fd/0          "$DESTDIR"/lib/udev/dev/stdin
  /bin/ln -fns ../proc/self/fd/1          "$DESTDIR"/lib/udev/dev/stdout
  /bin/ln -fns ../proc/self/fd/2          "$DESTDIR"/lib/udev/dev/stderr
  /bin/ln -fns ../proc/kcore              "$DESTDIR"/lib/udev/dev/core
  /bin/ln -fns ../proc/asound/oss/sndstat "$DESTDIR"/lib/udev/dev/sndstat
  rm    -f                                "$DESTDIR"/lib/udev/dev/{console,mem,null,zero}
  mknod -m 600                            "$DESTDIR"/lib/udev/dev/console c 5 1
  mknod -m 640                            "$DESTDIR"/lib/udev/dev/mem     c 1 1
  mknod -m 666                            "$DESTDIR"/lib/udev/dev/null    c 1 3
  mknod -m 444                            "$DESTDIR"/lib/udev/dev/zero    c 1 5
  mknod -m 660                            "$DESTDIR"/lib/udev/dev/kmsg    c 1 11
  true
 }

# The extra rules are needed to create frequently needed nodes 
# and symlinks. Also needed to set privileges to nodes like
# /dev/dsp, etc.

 rules_install(){
  install -vm 755 -d "$DESTDIR"/lib/udev/rules.d/
  install -vm 644 -t "$DESTDIR"/lib/udev/rules.d/ "$SCRIPT_DIR"/rules.d/*
 }

 link_fix(){
  if  [ -h "$1" ]; then
   rm   -f "$1"
   find    "$2" -type f -name libudev.so.\* -printf '%f\n' |
   head -n 1 | while read; do ln -fs "$REPLY" "$2/libudev.so"; done
  fi
 }

 so_fix(){
  link_fix "$DESTDIR/usr/lib64/libudev.so" "$DESTDIR/lib64"
  link_fix   "$DESTDIR/usr/lib/libudev.so" "$DESTDIR/lib"
 }

 ar_fix(){
  if   [ -f "$DESTDIR/usr/lib64/libudev.a" ]
  then mv   "$DESTDIR"/{usr/,}lib64/libudev.a
  fi
  if   [ -f "$DESTDIR/usr/lib/libudev.a" ]
  then mv   "$DESTDIR"/{usr/,}lib/libudev.a
  fi
 }

 pkgconfig_fix(){
  if   [ -f                      "$DESTDIR/usr/lib64/pkgconfig/libudev.pc" ]
  then sed -i 's:/usr/lib:/lib:' "$DESTDIR/usr/lib64/pkgconfig/libudev.pc"
  fi
  if   [ -f                        "$DESTDIR/usr/lib/pkgconfig/libudev.pc" ]
  then sed -i 's:/usr/lib:/lib:'   "$DESTDIR/usr/lib/pkgconfig/libudev.pc"
  fi
 }

 libtool_fix(){
  if   [ -f                  "$DESTDIR/usr/lib64/libudev.la" ]; then
   sed -i 's:/usr/lib:/lib:' "$DESTDIR/usr/lib64/libudev.la"
   sed -i 's:/usr/lib64/libudev.la:/lib64/libudev.la:' \
                          "$DESTDIR"/usr/lib64/libgudev*.la
   mv                    "$DESTDIR"{/usr,}/lib64/libudev.la
  fi
  if [ -f                      "$DESTDIR/usr/lib/libudev.la" ]; then
   sed -i 's:/usr/lib:/lib:'   "$DESTDIR/usr/lib/libudev.la"
   sed -i 's:/usr/lib/libudev.la:/lib/libudev.la:' \
                            "$DESTDIR"/usr/lib/libgudev*.la
   mv                      "$DESTDIR"{/usr,}/lib/libudev.la
  fi
 }

 disinformation_fix(){
  rm -f "$DESTDIR"/etc/init.d/README
  rm -f "$DESTDIR"/usr/share/man/man8/{halt,poweroff,reboot,runlevel,shutdown,telinit}.8
  rm -f "$DESTDIR"/var/log/README
 }

 if   [[ $HOSTTYPE == x86_64 ]] && ! [[ $CFLAGS =~ -m32 ]]
 then with also --with-rootlibdir=/lib64
 else with also --with-rootlibdir=/lib
 fi

 export   CFLAGS="${CFLAGS//-flto/}"
 export CXXFLAGS="${CXXFLAGS//-flto/}"
 export  LDFLAGS="$( echo "$LDFLAGS" | sed "s:-flto=[^ ]::" )"

 # systemd is not compatible with openpam
 if   spell_installed openpam
 then with also --disable-pam
 fi

 default_build   &&
 nod_sym_install &&
   rules_install &&
   pkgconfig_fix &&
     libtool_fix &&
          so_fix &&
          ar_fix &&
 disinformation_fix
}

libudev_location_fix(){
  effected(){
   export LC_ALL=C
   grep -l /usr/lib64/libudev.la /usr/lib64/*.la
   grep -l /usr/lib/libudev.la   /usr/lib/*.la
  }

 effected 2>/dev/null |
 show_from |
 cut -d : -f1 |
 pipe_queue "$MOIL_QUEUE"
}

post_install(){
 if   LC_ALL=C grep -q '^mem:x:'  /etc/group
 then sed -i 's/^mem:x:/kmem:x:/' /etc/group
 fi
 libudev_location_fix
 default_post_install
}
