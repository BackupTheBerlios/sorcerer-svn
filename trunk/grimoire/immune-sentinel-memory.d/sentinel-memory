#!/bin/bash
# Copyright 2011, 2012, 2013 by Kyle Sallee,
# All rights reserved.
# For use with the Sorcerer distribution only.

swap_scan(){
 while read F S U; do
  if    [[ $F = SwapFree: ]]; then
   if   ((  S > 262144 ))
   then return 0
   else return 1
   fi
  fi
 done < /proc/meminfo
}

# 10M reserve worked in trials.

pawn(){
 mkdir -pm 700   $CG/pawn
 echo $BASHPID > $CG/pawn/tasks
 echo 0        > $CG/pawn/memory.oom_control
 echo 1000     > /proc/$BASHPID/oom_score_adj
 local RESERVE="$( dd if=/dev/zero bs=16M count=1 2>/dev/null | tr '\0' ' ' )"
 while sleep 15 && swap_scan; do :; done
}

oom_control(){
 find $CG -mindepth 2 -maxdepth 2 -type f -name memory.oom_control |
 grep -v memory/pawn/memory |
 while read; do echo $1 > $REPLY; done
}

main(){
 allocate(){
  fallocate "-l$SIZE" "$SWAP" ||
  dd if=/dev/zero  of="$SWAP" bs=1M count=${SIZE%M}
 }

 local PASS=0
 echo -1000 > /proc/$BASHPID/oom_score_adj
 while
  (( PASS++ ))
  SWAP=$SDIR/swap.$$.$RANDOM.$PASS &&
  allocate &&
  mkswap  "$SWAP" &&
  chmod 0 "$SWAP" &&
  coproc pawn
 do
  read <& ${COPROC[0]}
  swapon "$SWAP"
  /usr/bin/wall "sentinel-memory activated swap file"
  /bin/logger   "sentinel-memory activated swap file"
 done
 oom_control 0
 exit 0
}

on_exit(){ oom_control 0; }

[ -f /lib/cgroup/functions ] &&
   . /lib/cgroup/functions   &&
cgroup_find ||
exit 0

if   [[     -x /usr/libexec/bash/sleep ]]
then enable -f /usr/libexec/bash/sleep sleep
fi

SDIR=${1:-/aux/run/swap}
SIZE=${2:-1024M}

if   [     -d      $SDIR ]
then rm    -f      $SDIR/swap* &>/dev/null
elif [     -e      $SDIR ]
then rm    -fr     $SDIR
     mkdir -pm 700 $SDIR
else mkdir -pm 700 $SDIR
fi

trap on_exit EXIT
oom_control 1
main &>/dev/null &
exit 0
