# gcc-v3.3 is needed only for libdeploy.so (as of jdk 1.7.0) but nothing from jdk
# requires it so it seems safe to not install gcc-v3.3

# Interesting method for dynamically constructing the version
# however, it must rely upon something such as UTC time
# or a time fixed to a specific time zone.
# Otherwise it can not be accurate for boxes located
# in all other time zones.

# Initial build version and date
v0=144
t0="26 May 2011"
# Number of builds since the initial build
#n=$(( ($(date -u +%s) -  $(date -u -d "$t0" +%s))/86400/7 ))
n=0
# Current build version and release date
v=$(( $v0 + $n ))
t=$(date -u -d "$t0 + $(( $n * 7 )) days"  +%d_%b_%Y)
t=$( echo $t | tr '[:upper:]' '[:lower:]')

   require alsa-lib libXi libXp libXrender libXtst unixODBC

case $HOSTTYPE in
  x86_64) RPATH="/opt/jdk/jre/lib/amd64${LF}/opt/jdk/jre/lib/amd64/jli${LF}/opt/jdk/jre/lib/amd64/client${LF}/opt/jdk/jre/lib/amd64/server${LF}/opt/jdk/jre/lib/amd64/headless${LF}/opt/jdk/jre/lib/amd64/motif21${LF}/opt/jdk/jre/lib/amd64/xawt"
    version stable 7-ea-bin-b${v}-linux-x64-${t} ;;
       *)
    version stable 7-ea-bin-b${v}-linux-i586-${t}
          RPATH="/opt/jdk/jre/lib/i386${LF}/opt/jdk/jre/lib/i386/jli${LF}/opt/jdk/jre/lib/i386/client${LF}/opt/jdk/jre/lib/i386/server${LF}/opt/jdk/jre/lib/i386/headless${LF}/opt/jdk/jre/lib/i386/motif21${LF}/opt/jdk/jre/lib/i386/xawt" ;;
esac
  category development/interpreter
 attribute archive_off seamonkey-plugin x11 x86
    source http://download.java.net/jdk7/archive/${VERSION:9:4}/binaries/jdk-$VERSION.tar.gz
#   source http://download.java.net/jdk7/binaries/jdk-$VERSION.bin
#    source http://dlc-cdn.sun.com/jdk7/binaries/jdk-$VERSION.bin
      info home  http://openjdk.java.net
#     vurl http://download.java.net/openjdk/jdk7/
#     vurl http://download.java.net/jdk7/binaries/
      vurl http://jdk7.java.net/download.html
  eprovide java
   disable sdelta
      desc 'open-source JDK (Java Platform SE)'

build(){

install_jdk(){
 case $HOSTTYPE in
    x86_64) ADIR=amd64 ;;
         *) ADIR=i386  ;;
 esac  
 case $VERSION in
  7*) DIR='jdk1.7.0' ;;
 esac

 set -x
 mkdir -pvm 755           $DESTDIR/{opt/$DIR,usr/bin}
 # Copy the untarred package to the destination
 cp -ax *           $DESTDIR/opt/$DIR
 chown -R root.root $DESTDIR/opt/$DIR
 # /opt/jdk should be a symbolic link to the current version and NOT a directory
 ln -fs $DIR        $DESTDIR/opt/jdk	
 # Make links to the binaries
 for        FILE in $DESTDIR/opt/jdk/bin/*
 do  ln -fs /opt/jdk/bin/${FILE##*/} $DESTDIR/usr/bin/${FILE##*/}
 done

 if   [  -x  $DESTDIR/opt/jdk/jre/bin/java_vm ]
 then ln -fs /opt/jdk/jre/bin/java_vm $DESTDIR/usr/bin/java_vm
 fi 

 local PD
 # Some pages say that only libnpjp2.so plugin is needed for Firefox
 if   [ -d   /usr/lib64/mozilla/plugins ]; then
  PD=$DESTDIR/usr/lib64/mozilla/plugins; mkdir -vpm 755    $PD
  ln -fs /opt/jdk/jre/lib/amd64/libnpjp2.so                $PD/
 elif [ -d         /usr/lib/mozilla/plugins ]; then
  PD=$DESTDIR/usr/lib/mozilla/plugins;   mkdir -vpm 755    $PD
  ln -fs /opt/jdk/jre/lib/i386/libnpjp2.so                 $PD/
 fi

 set +x

 #mkdir -p  $DESTDIR/etc/.java/.systemPrefs
 #touch     $DESTDIR/etc/.java/.systemPrefs/.system.lock
 #touch     $DESTDIR/etc/.java/.systemPrefs/.systemRootModFile
 #chmod 644 $DESTDIR/etc/.java/.systemPrefs/.system*
}

 # Make sure the source downloaded is really a shell script
 # test broke with file version 5.05
 #file $SOURCE | grep -q 'shell script' && 

 # Test that the package was really JDK, not only some HTTP response:
 [[ -f COPYRIGHT ]] &&
 install_jdk
}
