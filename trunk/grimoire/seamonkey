COMPACT="on"
   VERSION=( "1.1.3" "1.1.2" "1.1.1" "1.1" "1.0.7" "1.0.6" "1.0.5" "1.0.4" "1.0.3" "1.0.2" "1.0.1" "1.0" )
      SAFE=( "1.1.3" )
  CATEGORY="network/web"
 ATTRIBUTE="client solo x11"
    SOURCE="seamonkey-$VERSION.source.tar.bz2"
#   SOURCE="seamonkey-source-$VERSION.tar.bz2"
DICTIONARY=( "seamonkey-source-1.0.2.tar.bz2" )
  HOMEPAGE="http://www.mozilla.org/projects/seamonkey/"
       URL="http://ftp.mozilla.org/pub/mozilla.org/seamonkey/releases/${VERSION}/"
       REQ=( "gss gtk+ heimdal jpeg libIDL libpng libmng perl zip zlib"
             "libgnomeui::--disable-gnomeui --disable-gnomevfs:for gnome support" )
  EPROVIDE="mozilla"
  ESTIMATE="39300"
      DESC="seamonkey is continued evolution of mozilla."


configure() {
if  !  grep  -q  "FULL_INSTALL"  $SPELL_CONFIG
then

  if    query  "Install complete seamonkey? " y
  then  echo   "FULL_INSTALL=true"   >>  $SPELL_CONFIG
  else  echo   "FULL_INSTALL=false"  >>  $SPELL_CONFIG 
    
    if    query  "Install mail/news?" y
      then  echo   "MAIL_NEWS=true"   >>  $SPELL_CONFIG
      else  echo   "MAIL_NEWS=false"  >>  $SPELL_CONFIG
    fi
    
    if    query  "Install composer?" y
      then  echo   "COMPOSER=true"   >>  $SPELL_CONFIG
      else  echo   "COMPOSER=false"  >>  $SPELL_CONFIG
    fi
    
    if    query  "Install chatzilla (irc client)?" y
      then  echo   "CHATZILLA=true"   >>  $SPELL_CONFIG
      else  echo   "CHATZILLA=false"  >>  $SPELL_CONFIG
    fi
  fi

fi
}

build() {

check_space()  {
 KILOBYTES=$(
 df    -Pkm  $SOURCE_DIR  |
 tr    -s ' '             |
 tail  -n 1               |
 cut   -d ' '  -f4
 )
 if    ((  KILOBYTES < 1152  ));  then
  echo  "Insufficient disk space available for compiling seamonkey."
  false
 fi
}

install_symlinks()  {

  rm  -fr                                     /usr/include/seamonkey
  ln  -fs    /usr/include/seamonkey-$VERSION  /usr/include/seamonkey
  rm  -fr                                     /usr/include/mozilla
  ln  -fs    /usr/include/seamonkey-$VERSION  /usr/include/mozilla

  rm  -fr                                     /usr/lib/seamonkey
  ln  -fs        /usr/lib/seamonkey-$VERSION  /usr/lib/seamonkey
  rm  -fr                                     /usr/lib/mozilla
  ln  -fs        /usr/lib/seamonkey-$VERSION  /usr/lib/mozilla

  rm  -fr                                     /usr/share/idl/seamonkey
  ln  -fs  /usr/share/idl/seamonkey-$VERSION  /usr/share/idl/seamonkey
  rm  -fr                                     /usr/share/idl/mozilla
  ln  -fs  /usr/share/idl/seamonkey-$VERSION  /usr/share/idl/mozilla

  rm  -fr                                     /usr/bin/mozilla-config
  ln  -fs  /usr/bin/seamonkey-config          /usr/bin/mozilla-config
  rm  -fr                                     /usr/bin/mozilla
  ln  -fs  /usr/bin/seamonkey                 /usr/bin/mozilla

}


fix_config()  {
 sed  -i  "s:/usr/lib/seamonkey-[^ ]*:/usr/lib/seamonkey:g"  /usr/bin/seamonkey-config
}

# The firefox/mozilla/seamonkey tarball package does not install 
# the nss includes as it should. This annoying problem seems to 
# be well known and worked around by packagers
install_security() {
 local       NSS_DIR=/usr/include/seamonkey/nss
 mkdir  -p  $NSS_DIR
 cp     -fv $BUILD_DIR/dist/{private,public}/nss/*.h  \
            $NSS_DIR
}

  IVERSION=$(  installed_version  $SPELL  )

  # already-running patch for running multiple
  # instances of mozilla without -remote option.
  # bzip2  -cd  $SCRIPT_DIR/already-running.patch.bz2  |  patch -p1

  export    CFLAGS="${CFLAGS/-ffast-math/}"
  export  CXXFLAGS="${CXXFLAGS/-ffast-math/}"
  export    CFLAGS="${CFLAGS/-fomit-frame-pointer/}"
  export  CXXFLAGS="${CXXFLAGS/-fomit-frame-pointer/}"

  export  MOZILLA_OFFICIAL=1
  export  BUILD_OFFICIAL=1

  # The following 2 lines stopped working with mozilla 1.4.1
  # the source came without the internal libart library.
  # export  MOZ_INTERNAL_LIBART_LGPL=1
  # ac_add_options --enable-svg

case $HOSTTYPE in 
 x86_64)  case $( installed_version gcc ) in
            4.1.0|4.1.1) # Stupid gcc is buggy: This fixes an error message
                  # like: 
                  # "jsapi.o can't relocate symbols... memcpy@GLIBC, use -fPIC"
                  # or
                  # /usr/bin/ld: nsCOMPtr.o: relocation R_X86_64_PC32 against
                  AC_VISIBILITY="ac_cv_visibility_pragma=no" 
                  ;;
            *)    AC_VISIBILITY=""
          esac
          ELF_DYNSTR_GC="--disable-elf-dynstr-gc"
          ;;
      *)  ELF_DYNSTR_GC="--enable-elf-dynstr-gc" 
          ;;
esac

cat  <<  EOF  >  .mozconfig
$AC_VISIBILITY
ac_add_options --prefix=/usr
ac_add_options --enable-application=suite
ac_add_options --enable-shared
ac_add_options --disable-static
ac_add_options --with-system-jpeg
ac_add_options --with-system-zlib
ac_add_options --with-system-png
ac_add_options --with-system-mng
ac_add_options --enable-crypto
ac_add_options --enable-xinerama
ac_add_options --disable-tests
ac_add_options --disable-debug
ac_add_options --enable-optimize="$CFLAGS"
ac_add_options --enable-reorder
ac_add_options --enable-strip
ac_add_options $ELF_DYNSTR_GC
ac_add_options --enable-cpp-rtti
ac_add_options --enable-xterm-updates
ac_add_options --enable-toolkit-gtk2
ac_add_options --enable-default-toolkit=gtk2
ac_add_options --enable-old-abi-compat-wrappers
ac_add_options --enable-xft
ac_add_options --disable-freetype2
ac_add_options --disable-gnomevfs
EOF

  # mail/news support
  if  ! $MAIL_NEWS;  then
    echo "ac_add_options --disable-mailnews" >> .mozconfig
  fi   

  # composer support
  if  ! $COMPOSER;  then
    echo "ac_add_options --disable-composer" >> .mozconfig
  fi

  # chatzilla support
  if  ! $CHATZILLA;  then
    echo 'ac_add_options --enable-extensions="default,-irc"' >> .mozconfig
  fi  

  export  LDFLAGS="-Wl,-rpath,/usr/lib/seamonkey-$VERSION  $LDFLAGS"
  grep   -rl             "\-Wl,-soname" * |
  xargs  -l64  sed  -i  "s:-Wl,-soname:-Wl,-rpath,/usr/lib/seamonkey-$VERSION -Wl,-soname:"

  check_space         &&
  ./configure  $OPTS  &&
  make                &&
  prepare_install     &&
  make    install     &&
  install_symlinks    &&
  fix_config          &&
  install_security
}


post_install() {
  default_post_install
  RECAST="$(  show_installed  seamonkey-plugin  )"
  if    [  -n  "$RECAST"  ]
  then  echo   "$RECAST"  |  pipe_queue  "$CAST_QUEUE"  "com"
  fi
  true
}
