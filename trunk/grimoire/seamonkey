# seamonkey is no longer tested
# use firefox instead, please.
# Note by JM: I test and use seamonkey
# then please test version 2.0 of seamonkey

# 1,1,14 is also a security fix release.

    latest 2.0.3 2.0.1 1.1.18 1.1.16 1.1.15 1.1.14
    stable 1.1.13 1.1.12 1.1.11 1.1.10 1.1.9 1.1.8 1.1.7 1.1.6 1.1.5 1.1.4
    secure 1.1.18 1.1.13
   require gss gtk+ heimdal libIDL libmng zip
  optional libgnomeui '' '--disable-gnomeui --disable-gnomevfs' for gnome support
  category network/web
 attribute client solo x11
    source http://ftp.mozilla.org/pub/mozilla.org/seamonkey/releases/$VERSION/seamonkey-$VERSION.source.tar.bz2
  homepage http://www.mozilla.org/projects/seamonkey/
  eprovide mozilla
  estimate 39300
      desc 'seamonkey is continued evolution of mozilla.'

configure(){

query_dialog(){
 qd_help(){
  if [ -n "$4" ]; then
   dialog --backtitle "$BACKT"      \
          --stdout                  \
          --timeout "$PROMPT_DELAY" \
          --msgbox                  \
          "$( long_desc "$4" )"     \
          0 0
  fi
  query_dialog "$@"
 }
              
 local ASK BACKT RESPONSE DEFAULT FTS FAS

 if   [ -n "$SPELL" ]
 then BACKT="Spell:  $SPELL"
 fi

 ASK="$( echo "$1" |
         sed "s:\\\e\[.m::g
              s:\\\e\[..m::g"
       )"

 case "$2" in
  y|Y) DEFAULT="Yes" ;;
  n|N) DEFAULT="No"  ;;
 esac

 if [ -n "$3" ]; then

   FTS="as optional requirement for this spell"
   FAS="as optional requirement for all spells"

   RESPONSE=$( dialog --backtitle "$BACKT"        \
                      --stdout                    \
                      --timeout   "$PROMPT_DELAY" \
                      --default-item   "$DEFAULT" \
                      --help-button               \
                      --no-cancel                 \
                      --item-help                 \
                      --menu      "$ASK"          \
                      0 0 0                       \
                      "Yes"       ""  "Yes $FTS"  \
                      "No"        ""  "No  $FTS"  \
                      "Always"    ""  "Yes $FAS"  \
                      "Never"     ""  "No  $FAS"
             )
   case $RESPONSE in
    Always|Never) STRONG="true"  ;;
               *) STRONG="false" ;;
   esac
  else

   RESPONSE=$( dialog --stdout                     \
                      --timeout   "$PROMPT_DELAY"  \
                      --default-item   "$DEFAULT"  \
                      --item-help                  \
                      --no-cancel                  \
                      --menu      "$ASK"           \
                      0 0 0                        \
                      "Yes"       ""  "Yes Please" \
                      "No"        ""  "No  Thanks"
             )
 fi
 clear
 case ${RESPONSE:=$2} in
  No|Never|n|N|f|F|m|M) false        ;;
    Yes|Always|y|Y|j|J) true         ;;
                *HELP*) qd_help "$@" ;;
                     *) true         ;;
 esac
}


query(){ query_dialog "$@"; }



 if  !  grep  -q  'FULL_INSTALL'  $SPELL_CONFIG
 then

  if   query 'Install complete seamonkey? ' y
  then echo  'FULL_INSTALL=true'  >> $SPELL_CONFIG
  else echo  'FULL_INSTALL=false' >> $SPELL_CONFIG 
    
   if    query 'Install mail/news?' y
    then echo  'MAIL_NEWS=true'  >> $SPELL_CONFIG
    else echo  'MAIL_NEWS=false' >> $SPELL_CONFIG
   fi
    
   if    query 'Install composer?' y
    then echo  'COMPOSER=true'  >> $SPELL_CONFIG
    else echo  'COMPOSER=false' >> $SPELL_CONFIG
   fi
    
   if    query 'Install chatzilla (irc client)?' y
    then echo  'CHATZILLA=true'  >> $SPELL_CONFIG
    else echo  'CHATZILLA=false' >> $SPELL_CONFIG
   fi
  fi
 fi
}

build(){

 check_space(){
  KILOBYTES=$(
  df    -Pkm  $SOURCE_DIR |
  tr    -s ' '            |
  tail  -n 1              |
  cut   -d ' '  -f4
  )
 if    (( KILOBYTES < 1152 )); then
  echo 'Insufficient disk space available for compiling seamonkey.'
  false
 fi
}

 install_symlinks(){

  rm -fr                                   /usr/include/seamonkey
  ln -fs   /usr/include/seamonkey-$VERSION /usr/include/seamonkey
  rm -fr                                   /usr/include/mozilla
  ln -fs   /usr/include/seamonkey-$VERSION /usr/include/mozilla

  rm -fr                                   /usr/lib/seamonkey
  ln -fs       /usr/lib/seamonkey-$VERSION /usr/lib/seamonkey
  rm -fr                                   /usr/lib/mozilla
  ln -fs       /usr/lib/seamonkey-$VERSION /usr/lib/mozilla

  rm -fr                                   /usr/share/idl/seamonkey
  ln -fs /usr/share/idl/seamonkey-$VERSION /usr/share/idl/seamonkey
  rm -fr                                   /usr/share/idl/mozilla
  ln -fs /usr/share/idl/seamonkey-$VERSION /usr/share/idl/mozilla

  rm -fr                                   /usr/bin/mozilla-config
  ln -fs /usr/bin/seamonkey-config         /usr/bin/mozilla-config
  rm -fr                                   /usr/bin/mozilla
  ln -fs /usr/bin/seamonkey                /usr/bin/mozilla
 }


 fix_config(){
  sed -i 's:/usr/lib/seamonkey-[^ ]*:/usr/lib/seamonkey:g' /usr/bin/seamonkey-config
 }

 # The firefox/mozilla/seamonkey tarball package does not install 
 # the nss includes as it should. This annoying problem seems to 
 # be well known and worked around by packagers
 install_security(){
  local      NSS_DIR=/usr/include/seamonkey/nss
  mkdir -p  $NSS_DIR
  cp    -fv $BUILD_DIR/dist/{private,public}/nss/*.h \
            $NSS_DIR
 }


  # already-running patch for running multiple
  # instances of mozilla without -remote option.
  # bzip2  -cd  $SCRIPT_DIR/already-running.patch.bz2  |  patch -p1

 export   CFLAGS="${CFLAGS/-ffast-math/}"
 export CXXFLAGS="${CXXFLAGS/-ffast-math/}"
 export   CFLAGS="${CFLAGS/-fomit-frame-pointer/}"
 export CXXFLAGS="${CXXFLAGS/-fomit-frame-pointer/}"

 export MOZILLA_OFFICIAL=1
 export BUILD_OFFICIAL=1

 # The following 2 lines stopped working with mozilla 1.4.1
 # the source came without the internal libart library.
 # export  MOZ_INTERNAL_LIBART_LGPL=1
 # ac_add_options --enable-svg

 case $HOSTTYPE in 
  x86_64) ELF_DYNSTR_GC='--disable-elf-dynstr-gc' ;;
      *)  ELF_DYNSTR_GC='--enable-elf-dynstr-gc'  ;;
 esac

 cat << EOF > .mozconfig
$AC_VISIBILITY
ac_add_options --prefix=/usr
ac_add_options --enable-application=suite
ac_add_options --enable-shared
ac_add_options --disable-static
ac_add_options --with-system-jpeg
ac_add_options --with-system-zlib
ac_add_options --with-system-png
ac_add_options --with-system-mng
ac_add_options --enable-crypto
ac_add_options --enable-xinerama
ac_add_options --disable-tests
ac_add_options --disable-debug
ac_add_options --enable-optimize="$CFLAGS"
ac_add_options --enable-reorder
ac_add_options --enable-strip
ac_add_options $ELF_DYNSTR_GC
ac_add_options --enable-cpp-rtti
ac_add_options --enable-xterm-updates
ac_add_options --enable-toolkit-gtk2
ac_add_options --enable-default-toolkit=gtk2
ac_add_options --enable-old-abi-compat-wrappers
ac_add_options --enable-xft
ac_add_options --disable-freetype2
ac_add_options --disable-gnomevfs
EOF

 case $VERSION in
  1.1.[456789]|1.1.1[0-9])
   mkdir -p include/pango-1.0/pango
   cp    /usr/include/pango-1.0/pango/pangocairo.h \
              include/pango-1.0/pango/
   sed -i  "/cairo_font_type_t/d"  include/pango-1.0/pango/pangocairo.h
   export   CFLAGS+=" -I$BUILD_DIR/include/pango-1.0"
   export CXXFLAGS+=" -I$BUILD_DIR/include/pango-1.0" ;;
 esac


 # mail/news support
 if ! $MAIL_NEWS; then
  echo "ac_add_options --disable-mailnews" >> .mozconfig
 fi   

 # composer support
 if ! $COMPOSER; then
  echo "ac_add_options --disable-composer" >> .mozconfig
 fi

 # chatzilla support
 if ! $CHATZILLA; then
  echo 'ac_add_options --enable-extensions="default,-irc"' >> .mozconfig
 fi  

 export LDFLAGS+=" -Wl,-rpath,/usr/lib/seamonkey-$VERSION"
 grep  -rl            "\-Wl,-soname" * |
 xargs --max-lines=64 sed -i "s:-Wl,-soname:-Wl,-rpath,/usr/lib/seamonkey-$VERSION -Wl,-soname:"

 check_space        &&
 ./configure  $OPTS &&
 make               &&
 prepare_install    &&
 make    install    &&
 install_symlinks   &&
 fix_config         &&
 install_security
}


post_install(){
 default_post_install
 RECAST="$( show_installed seamonkey-plugin )"
 if   [ -n "$RECAST" ]
 then echo "$RECAST" | pipe_queue "$CAST_QUEUE" com
 fi
 true
}
