diff -r -U2 sysvinit-2.85/src/Makefile sysvinit-2.85/src/Makefile
--- sysvinit-2.85/src/Makefile	2004-04-19 23:21:33.123417952 -0700
+++ sysvinit-2.85/src/Makefile	2004-04-19 23:21:33.123417952 -0700
@@ -65,7 +65,4 @@
 		$(CC) $(LDFLAGS) -o $@ bootlogd.o
 
-sulogin.o:	sulogin.c 
-		$(CC) -c $(CFLAGS) -DWITH_SELINUX sulogin.c
-
 init.o:		init.c init.h set.h reboot.h
 		$(CC) -c $(CFLAGS) -DWITH_SELINUX init.c
diff -r -U2 sysvinit-2.85/src/init.c sysvinit-2.85/src/init.c
--- sysvinit-2.85/src/init.c	2004-04-19 23:21:33.128417192 -0700
+++ sysvinit-2.85/src/init.c	2004-04-19 23:21:33.128417192 -0700
@@ -49,8 +49,4 @@
 #include <sys/syslog.h>
 #include <sys/time.h>
-#include <sys/mman.h>
-#include <selinux/selinux.h>
-#include <sys/mount.h>
-
 
 #ifdef __i386__
@@ -83,4 +79,85 @@
 			sigaction(sig, &sa, NULL); \
 		} while(0)
+#ifdef WITH_SELINUX
+#include <sys/mman.h>
+#include <selinux/selinux.h>
+#include <sys/mount.h>
+
+static int load_policy(int *enforce) 
+{
+  int fd=-1,ret=-1;
+  int rc=0;
+  struct stat sb;
+  void *map;
+  char policy_file[PATH_MAX];
+  int policy_version=0;
+  extern char *selinux_mnt;
+
+  log(L_VB, "Loading security policy\n");
+  if (mount("none", SELINUXMNT, "selinuxfs", 0, 0) < 0) {
+    if (errno == ENODEV) {
+      log(L_VB, "SELinux not supported by kernel: %s\n",SELINUXMNT,strerror(errno));
+    } 
+    else {
+      log(L_VB, "Failed to mount %s: %s\n",SELINUXMNT,strerror(errno));
+      return ret;
+    }
+    return ret; /* Never gets here */
+  }
+
+  selinux_mnt = SELINUXMNT; /* set manually since we mounted it */
+
+  policy_version=security_policyvers();
+  if (policy_version < 0) {
+    log(L_VB,  "Can't get policy version: %s\n", strerror(errno));
+    goto UMOUNT;
+  }
+  
+  rc=security_getenforce();
+  if (rc < 0) {
+    log(L_VB,  "Can't get SELinux enforcement flag: %s\n", strerror(errno));
+    goto UMOUNT;
+  } 
+  *enforce=rc;
+
+  snprintf(policy_file,sizeof(policy_file),"%s.%d",SELINUXPOLICY,policy_version);
+  fd = open(policy_file, O_RDONLY);
+  if (fd < 0) {
+    /* Check previous version to see if old policy is available
+     */
+    snprintf(policy_file,sizeof(policy_file),"%s.%d",SELINUXPOLICY,policy_version-1);
+    fd = open(policy_file, O_RDONLY);
+    if (fd < 0) {
+      log(L_VB,  "Can't open '%s.%d':  %s\n",
+	  SELINUXPOLICY,policy_version,strerror(errno));
+      goto UMOUNT;
+    }
+  }
+  
+  if (fstat(fd, &sb) < 0) {
+    log(L_VB, "Can't stat '%s':  %s\n",
+	    policy_file, strerror(errno));
+    goto UMOUNT;
+  }
+  
+  map = mmap(NULL, sb.st_size, PROT_READ, MAP_SHARED, fd, 0);
+  if (map == MAP_FAILED) {
+    log(L_VB,  "Can't map '%s':  %s\n",
+	    policy_file, strerror(errno));
+    goto UMOUNT;
+  }
+  ret=security_load_policy(map, sb.st_size);
+  if (ret < 0) {
+    log(L_VB, "security_load_policy failed\n");
+  }
+
+ UMOUNT:
+  /*umount(SELINUXMNT); */
+  if ( fd >= 0) {
+    close(fd);
+  }
+  return(ret);
+}
+#endif
 
 /* Version information */
@@ -108,5 +185,4 @@
 sig_atomic_t got_cont = 0;	/* Set if we received the SIGCONT signal */
 sig_atomic_t got_signals;	/* Set if we received a signal. */
-int enforcing = -1;		/* SELinux enforcing mode */
 int emerg_shell = 0;		/* Start emergency shell? */
 int wrote_wtmp_reboot = 1;	/* Set when we wrote the reboot record */
@@ -192,140 +268,4 @@
 };
 
-static int load_policy(int *enforce) 
-{
-	int fd=-1,ret=-1;
-	int rc=0;
-	struct stat sb;
-	void *map;
-	char policy_file[PATH_MAX];
-	int policy_version=0;
-	extern char *selinux_mnt;
-	FILE *cfg;
-	char buf[4096];
-	int seconfig = -2;
-	
-	cfg = fopen("/etc/sysconfig/selinux","r");
-	if (cfg) {
-		while (fgets(buf, 4096, cfg)) {
-			if (strncmp(buf,"SELINUX=",8))
-				continue;
-			if (!strcmp(buf+8,"enforcing\n")) {
-				seconfig = 1;
-			} else if (!strcmp(buf+8,"permissive\n")) {
-				seconfig = 0;
-			} else if (!strcmp(buf+8,"disabled\n")) {
-				seconfig = -1;
-			}
-		}
-		fclose(cfg);
-	}
-	mount("none", "/proc", "proc", 0, 0);
-	cfg = fopen("/proc/cmdline","r");
-	if (cfg) {
-		char *tmp;
-		if (fgets(buf,4096,cfg) && (tmp = strstr(buf,"enforcing="))) {
-			if (tmp == buf || isspace(*(tmp-1))) {
-				enforcing=atoi(tmp+10);
-			}
-		}
-		fclose(cfg);
-	}
-#define MNT_DETACH 2
-	umount2("/proc",MNT_DETACH);
-	
-	if (enforcing >=0)
-		*enforce = enforcing;
-	else if (seconfig == 1)
-		*enforce = 1;
-	
-	if (mount("none", SELINUXMNT, "selinuxfs", 0, 0) < 0) {
-		if (errno == ENODEV) {
-			log(L_VB, "SELinux not supported by kernel: %s\n",SELINUXMNT,strerror(errno));
-			*enforce = 0;
-		} else {
-			log(L_VB, "Failed to mount %s: %s\n",SELINUXMNT,strerror(errno));
-		}
-		return ret;
-	}
-
-	selinux_mnt = SELINUXMNT; /* set manually since we mounted it */
-
-	policy_version=security_policyvers();
-	if (policy_version < 0) {
-		log(L_VB,  "Can't get policy version: %s\n", strerror(errno));
-		goto UMOUNT;
-	}
-  
-	rc = security_getenforce();
-	if (rc < 0) {
-		log(L_VB,  "Can't get SELinux enforcement flag: %s\n", strerror(errno));
-		goto UMOUNT;
-	}
-	*enforce = rc;
-	if (enforcing >= 0) {
-		rc = security_setenforce(enforcing);
-		if (rc < 0) {
-			log(L_VB, "Can't set SELinux enforcement flag: %s\n", strerror(errno));
-			goto UMOUNT;
-		}
-		*enforce = enforcing;
-	} else if (seconfig == -1) {
-		rc = security_setenforce(0);
-		if (rc < 0) {
-			log(L_VB, "Can't disable SELinux enforcement: %s\n", strerror(errno));
-			goto UMOUNT;
-		}
-		*enforce = 0;
-		ret = 0;
-		goto UMOUNT;
-	} else if (seconfig >= 0) {
-		rc = security_setenforce(seconfig);
-		if (rc < 0) {
-			log(L_VB, "Can't set SELinux enforcement flag: %s\n", strerror(errno));
-			goto UMOUNT;
-		}
-		*enforce = seconfig;
-	}
-
-	snprintf(policy_file,sizeof(policy_file),"%s.%d",SELINUXPOLICY,policy_version);
-	fd = open(policy_file, O_RDONLY);
-	if (fd < 0) {
-		/* Check previous version to see if old policy is available
-		 */
-		snprintf(policy_file,sizeof(policy_file),"%s.%d",SELINUXPOLICY,policy_version-1);
-		fd = open(policy_file, O_RDONLY);
-		if (fd < 0) {
-			log(L_VB,  "Can't open '%s.%d':  %s\n",
-			    SELINUXPOLICY,policy_version,strerror(errno));
-			goto UMOUNT;
-		}
-	}
-  
-	if (fstat(fd, &sb) < 0) {
-		log(L_VB, "Can't stat '%s':  %s\n",
-		    policy_file, strerror(errno));
-		goto UMOUNT;
-	}
-  
-	map = mmap(NULL, sb.st_size, PROT_READ, MAP_SHARED, fd, 0);
-	if (map == MAP_FAILED) {
-		log(L_VB,  "Can't map '%s':  %s\n",
-		    policy_file, strerror(errno));
-		goto UMOUNT;
-	}
-	log(L_VB, "Loading security policy\n");
-	ret=security_load_policy(map, sb.st_size);
-	if (ret < 0) {
-		log(L_VB, "security_load_policy failed\n");
-	}
-
-UMOUNT:
-	/*umount(SELINUXMNT); */
-	if ( fd >= 0) {
-		close(fd);
-	}
-	return(ret);
-}
-
 /*
  *	Sleep a number of seconds.
@@ -2628,5 +2568,4 @@
 	int			f;
 	int			isinit;
-	int			enforce = 0;
 
 	/* Get my own name */
@@ -2692,17 +2631,17 @@
 	}
 
+#ifdef WITH_SELINUX
   	if (getenv("SELINUX_INIT") == NULL) {
 	  putenv("SELINUX_INIT=YES");
+	  int enforce=0;
 	  if (load_policy(&enforce) == 0 ) {
 	    execv(myname, argv);
 	  } else {
-	    if (enforce > 0) {
+	    if (enforce) 
 	      /* SELinux in enforcing mode but load_policy failed */
-	      /* At this point, we probably can't open /dev/console, so log() won't work */
-	      printf("Enforcing mode requested but no policy loaded. Halting now.\n");
 	      exit(1);
-	    }
 	  }
 	}
+#endif
   
 	/* Start booting. */
diff -r -U2 sysvinit-2.85/src/killall5.c sysvinit-2.85/src/killall5.c
--- sysvinit-2.85/src/killall5.c	2004-04-19 23:21:33.125417648 -0700
+++ sysvinit-2.85/src/killall5.c	2004-04-19 23:21:33.125417648 -0700
@@ -219,11 +219,15 @@
 			strcpy(p->statname, s);
 
-			/* This could be replaced by getsid(pid) */
-			if (sscanf(q, "%*c %*d %*d %d", &p->sid) != 1) {
-				p->sid = 0;
-				nsyslog(LOG_ERR, "can't read sid from %s\n",
-					path);
-				free(p);
-				continue;
+			/* This could be replaced by getsid(pid), and I did it */
+	                if (needSid) {
+                 	  p->sid = getsid(pid);
+	                  if (p->sid < 0) {
+	                    p->sid = 0;
+ 	                    nsyslog(LOG_ERR, "can't read sid for pid %d\n", pid);                   
+			    free(p);
+               		    continue;
+			   }
+			} else {
+			    p->sid = 0;
 			}
 			fclose(fp);
diff -r -U2 sysvinit-2.85/src/sulogin.c sysvinit-2.85/src/sulogin.c
--- sysvinit-2.85/src/sulogin.c	2004-04-19 23:21:33.122418104 -0700
+++ sysvinit-2.85/src/sulogin.c	2004-04-19 23:21:33.122418104 -0700
@@ -332,14 +332,4 @@
 	signal(SIGTSTP, SIG_DFL);
 	signal(SIGQUIT, SIG_DFL);
-#ifdef WITH_SELINUX
-	if (is_selinux_enabled > 0) {
-	  security_context_t* contextlist=NULL;
-	  if (get_ordered_context_list("root", 0, &contextlist) > 0) {
-	    if (setexeccon(contextlist[0]) != 0) 
-	      fprintf(stderr, "setexeccon faile\n");
-	    freeconary(contextlist);
-	  }
-	}
-#endif
 	execl(sushell, shell, NULL);
 	perror(sushell);
