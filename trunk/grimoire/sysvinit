   VERSION=( 2.86 )
  CATEGORY='utility'
 ATTRIBUTE='console'
    SOURCE="sysvinit-$VERSION.tar.gz"
       URL='ftp://ftp.cistron.nl/pub/people/miquels/sysvinit/'
  HOMEPAGE='ftp://ftp.cistron.nl/pub/people/miquels/sysvinit/'
       REQ='init-functions'
   EXCLUDE='/etc/init.d/dev.d
            /etc/init.d/log.d
            /etc/rc.d
            /etc/rc.d.old'
  ESTIMATE='35'
      DESC='sysvinit is the parent process of all process.
sysvinit starts processes from the information specified in file /etc/inittab.
sysvinit also contains the following utilities:
reboot, shutdown, killall, poweroff, tellinit, sulogin, wall

The sysinit  logfile is /etc/init.d/log.d/sysinit.log
The runlevel logfile is /etc/init.d/log.d/runlevel.?.log
The dmesg    logfile is /etc/init.d/log.d/dmesg.log

# Sorcerer runlevels differ slightly from LSB specified runlevels.
# Runlevels
# 0: halt
# 1: sequential init
# 2: parallel   init + multi-user + networking
# 3: sequential init + multi-user + networking
# 4: parallel   init + multi-user + networking + GUI login
# 5: sequential init + multi-user + networking + GUI login
# 6: reboot

Parallel runlevels 2 and 4 execute faster.
If problems occur during execution of init-scripts
then the init-script owning the problem
is easier to identify when using
sequential runlevels 3 or 5

Edit /etc/inittab to adjust
the default runlevel used during booting.
The current runlevel does not change when updating.
Runlevels 2 3 4 5 can be used while updating.

More information about sysvinit is available at:
http://www.linux-foundation.org/spec/refspecs/LSB_3.1.0/LSB-Core-generic/LSB-Core-generic/iniscrptfunc.html'


configure(){

 char_dev_menu(){ find /dev -type c | sed 'acharacter device'; }

 select_char_dev(){
  BACKTITLE='sysvinit Configuration'
      TITLE='Character Device Selection Menu'

  dialog \
   --stdout --title "$TITLE" --timeout "$PROMPT_DELAY" \
   --backtitle "$BACKTITLE" --default-item "$2" \
   --no-cancel --menu  "$1" 0 0 0 $( char_dev_menu )
 }

 if ! grep -qs SI_DEV= $SPELL_CONFIG ||
    ! grep -qs RL_DEV= $SPELL_CONFIG
 then
  ( FOR='Please select the device to display the scroll from programs started during'
    export  IFS=$'	\n'
    SI_DEV="$( select_char_dev "$FOR sysinit."   '/dev/tty9'  )"
    RL_DEV="$( select_char_dev "$FOR runlevels." '/dev/tty10' )"
    if  [ -n "$SI_DEV"  ]; then echo "SI_DEV=$SI_DEV" >  $SPELL_CONFIG; fi
    if  [ -n "$RL_DEV"  ]; then echo "RL_DEV=$RL_DEV" >> $SPELL_CONFIG; fi
  )
 fi
}


build(){
 install_init(){
  cpc(){ if [ -n "$1" ] && ! [ /dev/console == "$1" ]; then cp -afv $1 $2; fi; }

  sed     -i      "s:ulimit :# ulimit :" \
                  src/initscript.sample
  install -vm 700 src/initscript.sample /etc

  mkdir   -vp                         /etc/init.d
  install -vm 600 $SCRIPT_DIR/inittab /etc
  install -vm 700 $SCRIPT_DIR/prc     /etc/init.d
  install -vm 700 $SCRIPT_DIR/rcS     /etc/init.d

  install -dvm 755 /etc/init.d/log.d
  install -dvm 755 /etc/init.d/dev.d
  rm      -f       /etc/init.d/dev.d/{si,rl}
  cpc "$SI_DEV"    /etc/init.d/dev.d/si
  cpc "$RL_DEV"    /etc/init.d/dev.d/rl

  return
 }

 case $HOSTTYPE in
  x86_64) sed -i 's:/usr/lib/libcrypt.a:/usr/lib64/libcrypt.a:' src/Makefile ;;
 esac

 sed   -i "s:-O2 -fomit-frame-pointer:${CFLAGS}:" src/Makefile

# case $VERSION in
#  2.86) patch -p1 < $SCRIPT_DIR/sysvinit-2.86-selinux.patch ;;
# esac

# Can probably start selinux from init-scripts.
# mount /selinux and then load policy
# and finally enable enforcing if desired.

 if   spell_installed libselinux
 then export CFLAGS+=' -DWITH_SELINUX' SEL='WITH_SELINUX=1'
 fi

 make -C src $SEL &&
 prepare_install  &&
 make -C src $SEL install &&
 install_init
}

post_install(){
 default_post_install
 if   ! [ -x /usr/sbin/sorcerer.install ]
 then /sbin/init u; sleep 2
 fi
}
