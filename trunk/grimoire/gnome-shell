# Not certain about requirements.
# 3.2.0 requires an upgrade of glib to a version that causes
# compile problems with other software

   version stable 3.2.0 3.0.2 3.0.0.1 3.0.0
   require evolution-data-server folks gjs gnome-bluetooth mutter telepathy-logger
      opts --without-ca-certificates
#     opts --with-ca-certificates=/etc/ssl/certs/ca-certificates.crt
  category utility utility/terminal-emulator
 attribute gnome new
    source $GNOME_URL sources/gnome-shell/${VERSION:0:3}/gnome-shell-$VERSION.tar.xz
      info last 20111006
  homepage http://www.gnome.org
    CFLAGS='-O2'
   LDFLAGS='-Wl,-O1'
      desc 'core user interface functions for the GNOME 3 desktop,
like switching to windows and launching applications.
GNOME Shell takes advantage of the capabilities of
modern graphics hardware and introduces
innovative user interface concepts
to provide a visually attractive and easy to use experience.'

build(){
 local LD_LIBRARY_PATH
 sed -i 's:hardcode_into_libs=yes:hardcode_into_libs=no:' configure
 if  [[ $HOSTTYPE == x86_64 ]] && ! [[ $CFLAGS =~ -m32 ]]; then
  if [ -d /usr/lib64/nvidia ]; then export LDFLAGS+=" -Wl,-rpath,/usr/lib64/nvidia"; fi
  if [ -d /usr/lib64/ati    ]; then export LDFLAGS+=" -Wl,-rpath,/usr/lib64/ati"; fi
  export LD_LIBRARY_PATH="/usr/lib64/xulrunner-1.9.2.23"
 else
  if [ -d /usr/lib/nvidia ]; then export LDFLAGS+=" -Wl,-rpath,/usr/lib/nvidia"; fi
  if [ -d /usr/lib/ati    ]; then export LDFLAGS+=" -Wl,-rpath,/usr/lib/ati"; fi
  export LD_LIBRARY_PATH="/usr/lib/xulrunner-1.9.2.23"
 fi

 default_build
}



# LD_RUN_PATH and LD_LIBRARY_PATH did not work around:
# /usr/src/sorcery/compile/gnome-shell/gnome-shell-3.0.0/src/tmp-introspectPcQBYA/.libs/lt-Shell-0.1: 
# error while loading shared libraries: libmozjs.so: cannot open shared 
# object file: No such file or directory

build_old(){
build_older(){
 local XULVER="$( installed_version $( get_provider xulrunner ) )"
 if   [[ $HOSTTYPE == x86_64 ]] &&
    ! [[ $CFLAGS   =~ -m32   ]]
 then export LDFLAGS+=" -L/usr/lib64/xulrunner-$XULVER/"
 else export LDFLAGS+=" -L/usr/lib/xulrunner-$XULVER/"
 fi
 default_build
}
 local LD_LIBRARY_PATH
 local XULVER="$( installed_version $( get_provider xulrunner ) )"
 if     [[ $HOSTTYPE == x86_64 ]] &&
      ! [[ $CFLAGS   =~ -m32   ]]
 then export LD_LIBRARY_PATH=/usr/lib64/xulrunner-$VERSION
 else export LD_LIBRARY_PATH=/usr/lib/xulrunner-$VERSION
 fi
 default_build
}
