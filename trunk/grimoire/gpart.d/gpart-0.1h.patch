# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../gpart/errno.patch
# Copyright (C) 2004 - 2006 The T2 SDE Project
# Copyright (C) 1998 - 2003 ROCK Linux Project
# 
# More information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---

--- gpart-0.1h/src/disku.c.org	Thu May 15 18:31:53 2003
+++ gpart-0.1h-fixed/src/disku.c	Thu May 15 18:32:02 2003
@@ -19,6 +19,7 @@
 #include <stdio.h>
 #include <string.h>
 #include <sys/ioctl.h>
+#include <errno.h>
 #include "gpart.h"
 
 #if defined(__linux__)
@@ -27,7 +28,6 @@
 #endif
 
 #if defined(__FreeBSD__)
-#include <errno.h>
 #include <sys/disklabel.h>
 #endif
 
--- gpart-0.1h/src/l64seek.c.orig	2003-05-20 11:33:12.000000000 +0200
+++ gpart-0.1h-fixed/src/l64seek.c	2003-05-20 11:33:33.000000000 +0200
@@ -15,6 +15,7 @@
  */
 
 #include "l64seek.h"
+#include <errno.h>
 
 
 #define OSTACKLEN	16

diff -ur gpart-0.1h/src/gpart.c gpart-0.1h-fixed/src/gpart.c
--- gpart-0.1h/src/gpart.c	2001-02-07 19:08:08.000000000 +0100
+++ gpart-0.1h-fixed/src/gpart.c	2006-08-14 09:24:51.000000000 +0200
@@ -45,6 +45,7 @@
  *
  */
 
+#include "gpart.h"
 
 #include <stdio.h>
 #include <stdlib.h>
@@ -56,7 +57,6 @@
 #include <errno.h>
 #include <sys/stat.h>
 #include <sys/types.h>
-#include "gpart.h"
 
 
 static const char	rcsid[] = "$Id: gpart.c,v 1.11 2001/02/07 18:08:08 mb Exp mb $";
diff -ur gpart-0.1h/src/l64seek.c gpart-0.1h-fixed/src/l64seek.c
--- gpart-0.1h/src/l64seek.c	2006-08-14 09:38:59.000000000 +0200
+++ gpart-0.1h-fixed/src/l64seek.c	2006-08-14 09:30:11.000000000 +0200
@@ -26,36 +26,6 @@
 } ostck[OSTACKLEN];
 static int		osptr = -1;
 
-#if defined(__linux__) && defined(__i386__)
-_syscall5(int,_llseek,uint,fd,ulong,hi,ulong,lo,loff_t *,res,uint,wh)
-#endif
-
-
-
-off64_t l64seek(int fd,off64_t offset,int whence)
-{
-	off64_t		ret = (off64_t)-1;
-
-#if defined(__linux__) && defined(__i386__)
-	int		iret;
-	unsigned long	ohi, olo;
-
-	ohi = (unsigned long)((offset >> 32) & 0xFFFFFFFF);
-	olo = (unsigned long)(offset & 0xFFFFFFFF);
-	iret = _llseek(fd,ohi,olo,&ret,whence);
-	if (iret == -1)
-		ret = (off64_t)-1;
-#endif
-
-#if defined(__FreeBSD__) || (defined(__linux__) && defined(__alpha__))
-	ret = lseek(fd,offset,whence);
-#endif
-
-	return (ret);
-}
-
-
-
 int l64opush(int fd)
 {
 	s64_t		fpos;
diff -ur gpart-0.1h/src/l64seek.h gpart-0.1h-fixed/src/l64seek.h
--- gpart-0.1h/src/l64seek.h	2000-12-13 23:56:07.000000000 +0100
+++ gpart-0.1h-fixed/src/l64seek.h	2006-08-14 09:26:06.000000000 +0200
@@ -17,31 +17,21 @@
 #ifndef _L64SEEK_H
 #define _L64SEEK_H
 
-#include <unistd.h>
-
-/*
- * define a type 'off64_t' which is at least 64bit, and a
- * lseek function capable of seeking with at least 64bit
- * offsets.
- */
-
-
-#if defined(__linux__)
-#	include <linux/unistd.h>
-#	include <sys/types.h>
-	typedef int64_t off64_t;
-#endif
+#define _FILE_OFFSET_BITS 64
+#define __USE_LARGEFILE64
+#define __USE_FILE_OFFSET64
 
+#include <unistd.h>
 
-#if defined(__FreeBSD__)
-	typedef off_t off64_t;
-#endif
-
+#include <sys/types.h>
 
+typedef off_t off64_t;
 typedef off64_t s64_t;
 
-off64_t l64seek(int fd, off64_t offset, int whence);
+
 #define l64tell(fd) l64seek(fd,0,SEEK_CUR)
+#define l64seek lseek
+
 int l64opush(int);
 s64_t l64opop(int);
 
--- gpart-0.1h/src/l64seek.h	2006-10-04 17:31:31.000000000 +0000
+++ gpart-0.1h-fixed/src/l64seek.h	2006-10-04 17:32:39.000000000 +0000
@@ -25,9 +25,7 @@
 
 #include <sys/types.h>
 
-typedef off_t off64_t;
-typedef off64_t s64_t;
-
+typedef off_t s64_t;
 
 #define l64tell(fd) l64seek(fd,0,SEEK_CUR)
 #define l64seek lseek

--- gpart-0.1h.orig/src/gm_ntfs.h
+++ gpart-0.1h/src/gm_ntfs.h
@@ -14,6 +14,9 @@
  *
  */
 
+#include <stdint.h>
+#include <asm/byteorder.h>
+
 #ifndef _GM_NTFS_H
 #define _GM_NTFS_H
 
@@ -29,32 +32,38 @@
 /* 'NTFS' in little endian */
 #define NTFS_SUPER_MAGIC	0x5346544E
 
-#if defined(i386) || defined(__i386__) || defined(__alpha__)
-
 /* unsigned integral types */
 #ifndef NTFS_INTEGRAL_TYPES
 #define NTFS_INTEGRAL_TYPES
-typedef unsigned char		ntfs_u8;
-typedef unsigned short		ntfs_u16;
-typedef unsigned int		ntfs_u32;
-typedef s64_t			ntfs_u64;
+typedef uint8_t			ntfs_u8;
+typedef uint16_t		ntfs_u16;
+typedef uint32_t		ntfs_u32;
+typedef uint64_t		ntfs_u64;
+typedef int8_t			ntfs_s8;
+typedef int16_t			ntfs_s16;
 #endif /* NTFS_INTEGRAL_TYPES */
-#endif /* defined(i386) || defined(__i386__) || defined(__alpha__) */
-
-
-/* Macros reading unsigned integers from a byte pointer */
-/* these should work for all little endian machines */
-#define NTFS_GETU8(p)		(*(ntfs_u8*)(p))
-#define NTFS_GETU16(p)		(*(ntfs_u16*)(p))
-#define NTFS_GETU24(p)		(NTFS_GETU32(p) & 0xFFFFFF)
-#define NTFS_GETU32(p)		(*(ntfs_u32*)(p))
-#define NTFS_GETU64(p)		(*(ntfs_u64*)(p))
-
-/* Macros reading signed integers, returning int */
-#define NTFS_GETS8(p)		((int)(*(char*)(p)))
-#define NTFS_GETS16(p)		((int)(*(short*)(p)))
-#define NTFS_GETS24(p)		(NTFS_GETU24(p) < 0x800000 ? (int)NTFS_GETU24(p) :
-
 
+#define CPU_TO_LE16(a) __cpu_to_le16(a)
+#define CPU_TO_LE32(a) __cpu_to_le32(a)
+#define CPU_TO_LE64(a) __cpu_to_le64(a)
+
+#define LE16_TO_CPU(a) __cpu_to_le16(a)
+#define LE32_TO_CPU(a) __cpu_to_le32(a)
+#define LE64_TO_CPU(a) __cpu_to_le64(a)
+
+/* Macros reading unsigned integers */
+#define NTFS_GETU8(p)      (*(ntfs_u8*)(p))
+#define NTFS_GETU16(p)     ((ntfs_u16)LE16_TO_CPU(*(ntfs_u16*)(p)))
+#define NTFS_GETU24(p)     ((ntfs_u32)NTFS_GETU16(p) | \
+		           ((ntfs_u32)NTFS_GETU8(((char*)(p)) + 2) << 16))
+#define NTFS_GETU32(p)     ((ntfs_u32)LE32_TO_CPU(*(ntfs_u32*)(p)))
+#define NTFS_GETU64(p)     ((ntfs_u64)LE64_TO_CPU(*(ntfs_u64*)(p)))
+
+/* Macros reading signed integers */
+#define NTFS_GETS8(p)        ((*(ntfs_s8*)(p)))
+#define NTFS_GETS16(p)       ((ntfs_s16)LE16_TO_CPU(*(short*)(p)))
+#define NTFS_GETS24(p)       (NTFS_GETU24(p) < 0x800000 ? \
+	                                (int)NTFS_GETU24(p) : \
+					(int)(NTFS_GETU24(p) - 0x1000000))
 
 #endif /* _GM_NTFS_H */

--- gpart-0.1h.orig/src/gm_fat.h
+++ gpart-0.1h/src/gm_fat.h
@@ -60,6 +60,6 @@
 	__u16	info_sector;	/* filesystem info sector */
 	__u16	backup_boot;	/* backup boot sector */
 	__u16	reserved2[6];	/* Unused */
-};
-
+} __attribute__ ((packed));
+
 #endif /* _GM_FAT_H */
