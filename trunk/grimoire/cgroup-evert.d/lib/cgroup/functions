# Copyright Kyle Sallee 2011, 2012.
# All rights reserved.
# For use with the distribution sorcerer only!

cgroup_ifs(){ export IFS=" 	
"; }

cgroup_find(){
 if   [ -f ${CG:-/sys/fs/cgroup}/tasks ]
 then return 0
 else return 1
 fi
}

cgroup_inherit(){
 if   [ -f      $1/blkio.weight ]; then
  read <   ${1%/*}/blkio.weight
  echo $REPLY > $1/blkio.weight
 fi
}

cgroup_join(){
# $1 = name of control group
# $2 = cpuset

 local CG B C P
 if     [ -n "$1" ] && cgroup_find; then C="$CG/$1"; P="${C%/*}"
  if    [ -d "$C" ] || mkdir -pm 700 "$C"; then
   if   [ -n "$2" ] &&
        [ -f        "$C/cpuset.cpus" ]
   then echo "$2" > "$C/cpuset.cpus"
   fi
   echo $$        > "$C/tasks"
   echo $BASHPID  > "$C/tasks"
   cgroup_inherit   "$C"
  else false
  fi
  else false
 fi 2>/dev/null
}

cgroup_blkio_weight(){
# $1 = name of control group
# $2 = valid weight

 local CG C
 if    [ -n "$1" ] && cgroup_find; then C="$CG/$1"
  if   [ -d "$C" ] &&
       [ -n "$2" ] &&
       [ -f        "$C/blkio.weight" ]
  then echo "$2" > "$C/blkio.weight"
  fi
 fi
}

cgroup_root(){
 local CG
 if   cgroup_find && [ -w "$CG/tasks" ]
 then echo $$        >    "$CG/tasks"
      echo $BASHPID  >    "$CG/tasks"
 else false
 fi 2>/dev/null
}

cgroup_exit(){
# If possible
# then depart cgroup by moving tasks
# into higher level cgroup task file
# $1 = cgroup to depart from

 local IFS; cgroup_ifs
 local CG R U="${1%/*}"

 if   [ -n     "$1"       ] && cgroup_find &&
      [ -f "$CG/$1/tasks" ] &&
      [ -w "$CG/$U/tasks" ]
 then while read R; do echo "$R" > $CG/$U/tasks; done < "$CG/$1/tasks"
 else false
 fi 2>/dev/null
}

cgroup_pids(){
# returns PIDs from specified cgroup's task file
# $1 = cgroup
# $2 = cgroup
# $3 = cgroup
# ...
# $REPLY = the PIDs

 local IFS; cgroup_ifs
 local CG R

 REPLY=

 if cgroup_find; then
  while   [ -n "$1" ]; do
   if     [ -r "$CG/$1/tasks" ]; then
    while read R; do
     if   [ -z  "$REPLY" ]
     then REPLY="$R"
     else REPLY="$REPLY $R"
     fi
    done < "$CG/$1/tasks"
   fi
   shift 1
  done
 fi

 [ -n "$REPLY" ]
}

cgroup_kill(){
# sends signal to all processes in specified control group
# $1 = control group
# $2 = signal

 local IFS; cgroup_ifs
 local CG R

 if   [ -n     "$1"       ] && cgroup_find &&
      [ -r "$CG/$1/tasks" ]
 then while read R; do kill $2 $R; done < "$CG/$1/tasks"
 else false
 fi 2>/dev/null
}

cgroup_oust(){
# removes specified control group
# $1 = control group
# $2 = control group
# $3 = control group
# ...

 local IFS; cgroup_ifs
 local CG

 if cgroup_find; then
  while [ -n "$1" ]; do
   if   [ -r "$CG/$1/tasks" ]
   then rmdir --ignore-fail-on-non-empty "$CG/$1"
   fi
   shift 1
  done
 else false
 fi 2>/dev/null
}
