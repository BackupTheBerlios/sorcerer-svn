# Docent installation method designed, implemented and copyrighted
# by Kyle Sallee 2013 All rights Reserved
# for use with the distribution Sorcerer Modern Magic

  NORM="[0m"
  BOLD="[1m"
  HALF="[2m"
 BLINK="[5m"
 BLACK="[30m"
   RED="[31m"
 GREEN="[32m"
YELLOW="[33m"
  BLUE="[34m"
VIOLET="[35m"
  CYAN="[36m"
 WHITE="[37m"
 RIGHT="[40G"
  NORM="[0m"

stock(){ local v="$1"; while [ -n "$2" ]; do eval $v+=\"$2\"; shift; done; }

ID=$"Modern Magic"; ID+="$RIGHT"; ID+=$"Deployment Docent"; ID+="\n"
#SC=$"Useful commands below"; SC+="$RIGHT"; SC+=$"# rationale for running the command"; SC+="\n"
AR="argot"; AR+="$RIGHT"; AR+=$"# suggests essential vocabulary";    AR+="\n"
AS="ask";   AS+="$RIGHT"; AS+=$"# provides definition for argot";    AS+="\n"
DO="docs";  DO+="$RIGHT"; DO+=$"# suggests documentation";           DO+="\n"
HH="hint";  HH+="$RIGHT"; HH+=$"# suggests the obvious";             HH+="\n"
TE="test";  TE+="$RIGHT"; TE+=$"# checks   current task completion"; TE+="\n"
FA="fore";  FA+="$RIGHT"; FA+=$"# advances to the next  step";       FA+="\n"
YR="yore";  YR+="$RIGHT"; YR+=$"# returns  to the prior step";       YR+="\n"

declare -A ARGOT ASK DOCS FORE YORE GOAL HELP HINT

progress(){ YORE[$1]="$2"; FORE[$1]="$3"; }

progress origin			Introduction		Introduction
progress Introduction		Introduction		POST
progress POST			Introduction		date
progress date			POST			password
progress password		date			ALSA
progress ALSA			password		multiroot
progress multiroot		ALSA			Plan
progress Plan			multiroot		FHS
progress FHS			Plan			navigation
progress navigation		FHS			/dev/
progress /dev/			navigation		Partition
progress Partition		/dev/			MBR
progress MBR			Partition		RAID
progress RAID			MBR			LVM2
progress LVM2			RAID			LUKS
progress LUKS			LVM2			mkfs.ext2
progress mkfs.ext2		LUKS			mkfs
progress mkfs			mkfs.ext2		mkswap
progress mkswap			mkfs			mkdir
progress mkdir			mkswap			mount
progress mount			mkdir			/etc/fstab.rootfs
progress /etc/fstab.rootfs	mount			boothash
progress boothash		/etc/fstab.rootfs	hostname
progress hostname		boothash		rootname
progress rootname		hostname		hosts
progress hosts			rootname		network
progress network		boothash		cp
progress cp			network			rbind
progress rbind			cp			chroot
progress chroot			rbind			umount
progress umount			chroot			reboot
progress reboot			umount			reboot

progress resume			origin			reap
progress reap			resume			feature
progress feature		reap			update
progress update			feature			account
progress account		update			groups
progress groups			account			manifest
progress manifest		groups			inittab
progress inittab		manifest		scry
progress scry			inittab			retry
progress retry			scry			reboot

stock DOCS[Introduction] \
"man less"				"$RIGHT" $"# learn to use the pager program" "\n" \
"less /usr/doc/docent/intro"		"$RIGHT" $"# please read the introduction" "\n" \
"man man"				"$RIGHT" $"# learn to read manual pages"     "\n" \
"man xz"				"$RIGHT" $"# learn to decompress documents" "\n" \
"man bash"                              "$RIGHT" $"# learn to wield the shell" "\n" \
"xz -cd /usr/share/tldp/" '\\\\' "\n" \
"Keyboard-and-Console-HOWTO.xz | less"	"$RIGHT" $"# learn to wield virtual consoles"

stock ARGOT[Introduction] \
"docent virtual console POSIX Unix command lore SA shell deploy neophyte"

stock ASK[docent]   $"tour guide or assistant instructor"
stock ASK[virtual]  $"providing through emulation capacities similar to actual"
stock ASK[console]  $"the display device for a computer"
stock ASK[POSIX]    $"portable operating system interface for Unix"
stock ASK[Unix]     $"popular multi-user operating system"
stock ASK[command]  $"name of a computer program"
stock ASK[lore]     $"knowledge and the ability to wield the knowledge"
stock ASK[shell]    $"interactive command interpreter for an operating system"
stock ASK[SA]       $"system administrator, the pilot or driver of a POSIX"
stock ASK[deploy]   $"transfer an operating system to a mass storage device"
stock ASK[neophyte] $"person who has yet to acquire lore"

GOAL[Introduction]=$"Comprehension"
stock HINT[Introduction] $"The docs command presents command lines." "\n" \
$"Executing command lines displays relevant documentation."

stock DOCS[POST] \
"less /usr/doc/docent/POST_to_Present"	"$RIGHT" $"# learn the steps of booting"
stock GOAL[POST] $"Understand booting"
stock HINT[POST] $"Proper deployment achieves successful booting."

stock DOCS[date] "man date hwclock"
stock GOAL[date] $"Set the Date and Time"
stock HINT[date] $"Use date to set the time and date." "\n" \
                 $"Then save the UTC to the hardware clock."
stock ARGOT[date] "UTC"
stock ASK[UTC] $"Universal Time Coordinates is the same time and date everywhere on Earth."

stock ARGOT[POST] \
"POST ROM BIOS device hardware motherboard mainboard MBR RAM " \
"boot block linux kernel initramfs compression cpio concatenation " \
"directory hierarchy stream byte bit rootfs swap sysinit mount runlevel " \
"symbolic link inode chroot inittab login"

stock ASK[POST]		$"power on self test"
stock ASK[ROM]		$"read only memory"
stock ASK[BIOS]		$"basic input output system"
stock ASK[device]	$"hardware attached directly or indirectly to the mainboard"
stock ASK[hardware]	$"physical electronic devices as opposed to"
stock ASK[motherboard]	$"the main circuit board of a computer"
stock ASK[mainboard]	"${ASK[motherboard]}"
stock ASK[MBR]		$"master boord record is the first sector of 446 bytes of a mass storage device"
stock ASK[RAM]		$"Random Access Memory"
stock ASK[boot]		$"time after POST when hardware is initialized and software is loaded and run"
stock ASK[block]	$"512 bytes or more on a data storage device"
stock ASK[linux]	$"name of the kernel designed by Linux Torvalds"
stock ASK[kernel]	$"the gatekeeper/moderator between hardware and software in an operating system"
stock ASK[initramfs]	$"initral RAM file system used for booting, shutdown, trouble shooting"
stock ASK[compression]	$"expressing repetitious patterns of data while using less memory"
stock ASK[cpio]		$"a format that allows concatenation and separation of files while preserving the reprsentation of a directory hieararchy"
stock ASK[concatenation]	$"to conjoin multiple files and directories and output as a single file or stream"
stock ASK[directory]	$"a file which acts as a container for links to other files, directories, device nodes, and symbolic links"
stock ASK[hierarchy]	$"the logic of the naming convention and linking of directories more succinctly stated it is how directories are organized"
stock ASK[stream]	$"a sequence of bytes that might not exist already as a file"
stock ASK[byte]		$"a meaningful exprssion of 8 bits that yields a value between 0 and 255"
stock ASK[bit]		$"the smallest unit size that has two separate states that represent either on or off or 0 or 1"
stock ASK[rootfs]	$"a RAM based file system, that can also be backed by swap, where the contents of the cpio initramfs images are decompressed and unconcatenated and provided in a file system hierarchy"
stock ASK[swap]		$"a portion of a mass storage device that can store infrequently accessed data that was formerly stored in RAM"
stock ASK[sysinit]	$"the portion of booting before services begin where the operating system recognizes and initializes devices and mounts file systems onto the rootfs hierarchy"
stock ASK[mount]	$"attaching file system to the current hierarchy  at the point where a directory exists"
stock ASK[runlevel]	$"the stage of booting where most services begin execution"
stock ASK[symbolic]	$"a symbolic link says where to look for the contents without actually linking to it and therefore can point to files or directories that exist across file system boundaries"
stock ASK[link]		$"one or more directory entires that point to the same inode on a file system"
stock ASK[inode]	$"data structure that stores information about a file or directory"
stock ASK[chroot]	$"to virtually mount part of a file system hiearachy as / the root"
stock ASK[inittab]	$"the configuration file for the init process which runs as process identifier number 1 and is responsible for directing events that happen during boot, shutdown, and runlevel transition"
stock ASK[login]	$"the process of providing credentials followed by authentication which if successful grants permission to start processes as the user"

stock GOAL[ALSA] $"Configure audio"
stock DOCS[ALSA] "less /usr/doc/docent/ALSA" "\n" \
                 "man alsamixer" "\n" \
                 "man alsaconf"  "\n" \
                 "man mocp"
stock HINT[ALSA] $"audio works often without configuration." "\n" \
		 $"alsaconf can help configure audio."

stock ARGOT[ALSA] "ALSA speaker-test mocp"
stock ASK[ALSA]	$"Advanced Linux Sound Architecture is the current standard for excellent audio output on linux boxes"
stock ASK[speaker-test] $"if audio is expect to work then try running speaker-test as suggested in /usr/doc/docent/ALSA to verify proper speaker position"
stock ASK[alsaconf] $"If udev failed to load the audio kernel module during runlevel then alsaconf can assist with discovering which module to load and making the the load an explicitly requested during every boot"
stock ASK[mocp] $"Music on Console Player is a program for playing audio files"

stock DOCS[Plan] \
"less /usr/doc/docent/plan"		"$RIGHT" $"# plan to achieve success"
stock GOAL[Plan] $"Select Deployment Plan"
stock HINT[Plan] $"Select or modify a sensible plan."

stock ARGOT[Plan] \
"gigabyte terabyte partition LVM2 RAID LUKS file filesystem ext2 ext4 SSD " \
"encryption"

stock ASK[gigabyte]	$"1073741824 bytes or 1048576 kilobytes, or 1024 megabytes, or 2^30 bytes"
stock ASK[terabyte]	$"1024 gigabytes"
stock ASK[LVM2]		$"2nd major revision of Logical Volume Managment\; useful for defining where file systems should exist on a mass storage device"
stock ASK[partition]	$"portion of a mass storage device suitable for containing a file or swap system"
stock ASK[RAID]		$"redundant array of inexpensive disks\; useful for creating file systems that are larger than a single disk or protecting against the failure of one or more disk devices in a RAID"
stock ASK[LUKS]		$"Linux Unified Key Setup\; useful standard format for creating encrypted devices"
stock ASK[file]		$"data grouped together yet considered separate from other data and stored on a device"
stock ASK[filesystem]	$"a system of organization that allows for rapid accessing and modifying data stored on a device"
stock ASK[ext2]		$"the second major revision of the extended file system, it's incarnation prior to journaling functionality"
stock ASK[ext4]		$"the fourth major revision of the extended file system that supports journaling and 64-bit scalability"
stock ASK[SSD]		$"a solid state drive\; a mass storage device that lacks motors and magnetic disks"
stock ASK[encryption]	$"a method for storing data where the data is can not be understood without processing with an accurate digital key"

stock DOCS[FHS] \
"gzip -cd /usr/share/fhs.txt.gz | less" "$RIGHT" $"# learn the logic of file system loadout" "\n" \
"less /usr/doc/docent/fhs"	 	"$RIGHT" $"# learn this POSIX's variation"

stock GOAL[FHS] $"Comprehension"
stock HINT[FHS] $"FHS describes almost everything about a root file system." "\n" \
                $"However, the /aux/ hierarchy is described in the /usr/doc/docent/fhs"

stock ARGOT[FHS] $"FHS"
stock ASK[FHS]	$"File System Hierarchy Standard is documentation that describes the organization local and purpose of directories"

stock DOCS[Modules] \
"less /usr/src/linux/README"		"$RIGHT" $"# read everything before the line" "\n" \
					"$RIGHT"  "# INSTALLING the kernel source:" "\n" \
"man lsmod"				"$RIGHT" $"# learn to list loaded kernel modules" "\n" \
"man modprobe"				"$RIGHT" $"# learn to load kernel modules" "\n" \
"find /lib/modules -type f -name \*.ko"	"$RIGHT" $"# list available kernel modules"

GOAL[Modules]=$"View and load kernel modules"

stock HINT[Modules] \
$"/sbin/udevadm trigger already executed during boot."   "\n" \
$"/sbin/udevadm trigger typically loads useful modules." "\n" \
$"However, not all subsystems load."                     "\n" \
$"And not all installed hardware can be detected."       "\n" \
$"Modules required for booting are automatically loaded on most computers."

stock ARGOT[Modules] "module kernel daemon udevadm udevd lsmod modprobe rmmod"
stock ASK[udevadm]	$"control program for udev daemon"
stock ASK[udevd]	$"udev daemon for configured handling hot and cold plug hardware events"
stock ASK[daemon]	$"process that lingers and awaits additional events rather than terminating after completing a single task"
stock ASK[lsmod]	$"program for listing loaded kernel modules"
stock ASK[modprobe]	$"program for loading a kernel module from disk into RAM"
stock ASK[rmmod]	$"program for removing a loaded kernel module"

stock DOCS[navigation] \
"less /usr/doc/docent/navigation"       "$RIGHT" $"# learn base lore"
GOAL[navigation]=$"Learn cd find ls nano sed xargs"
HINT[navigation]=$"Skilled SA should skip this step."

stock ARGOT[navigation] "PWD shell cd / // . .. find xargs ELF linker ls"
stock ASK[PWD] 		$"present working directory for a process\; any file or path name that does not being with / is assumed to exist in the hierarchy that begins with current PWD"
stock ASK[shell] 	$"interactive command interpreter\; shells allow for easy execution of commands and to effectively connect commands\; a shell is like multi-purpose glue for connecting commands"
stock ASK[cd]		$"change directory changes the PWD to the directory specified following cd and one or more spaces or tabs."
stock ASK[/]		$"forward slashes also called slashes separate paths and file names"
stock ASK[//]		$"one or more slashes without anything else indicate the root directory\; the root directory can be / // /// //// and so forth, but frequently shortened to merely /"
stock ASK[.]		$"dot is a directory entry that links recursively to the directory which contains it. /bin/ /bin/. /bin/./ /bin/././ are all the same directories.  Likewise /usr/./bin/ is the same directory as /usr/bin/.  However, a directory entry that begins with a . is typically hidden from the ls command. /usr/.bin/ would be a hidden .bin directory within /usr and is not the same as /usr/bin/ Dot files and dot directories typically exist within a user's home directory and no other places within a file system"
stock ASK[..]		$"dot dot refers to the directory above.  Therefore, /usr/bin/../lib/ is the same as /usr/lib/ provided that the /usr/bin/ directory actually exists"
stock ASK[find]		$"find is a command for location both files and directories.  It is not exclusively for locating lost files and directories, but instead supports many command line arguments that enable selecting files and directories that match criteria."
stock ASK[xargs]	$"xargs allows for a command to be run where the data provided on standard input is convered to command line parameters."
stock ASK[ls]		$"who does not occasionally wonder why the list command was called ls?"

stock DOCS[/dev/] \
"less /usr/src/linux/Documentation/devices.txt" "\n" \
                                        "$RIGHT" $"# learn device names" "\n" \
"less /usr/doc/docent/dev"              "$RIGHT" $"# important devices"
GOAL[/dev/]="Learn device node nomenclature"
HINT[/dev/]="Learn the device node names for fixed disks and partitions."

stock DOCS[Partition] \
"less /usr/doc/docent/partition"	"$RIGHT" $"# partitioning summarized" "\n" \
"xz -cd /usr/share/tldp/Partition.xz"	"$RIGHT" $"# learn about partitioning" "\n" \
"less /usr/doc/syslinux/gpt.txt"	"$RIGHT" $"# learn about GPT" "\n" \
"man gdisk"				"$RIGHT" $"# partition table manipulator" "\n" \
"man cgdisk"				"$RIGHT" $"# curses based GPT manipulator" "\n" \
"man parted"				"$RIGHT" $"# multi-format manipulator"

stock GOAL[Partition] $"Create at least 2 partitions"
stock HINT[Partition] $"Use gdisk." "\n" \
$"Remember to give the first partition the legacy BIOS bootable attribute."

test_Partition(){
 local dev table
 read  -p $"Please enter the block device node of the mass storage device: " dev

   if !   [ -b "$dev" ]
 then   echo $"$dev is not a block device"
        echo $"If the block device node is unknown"
        echo $"then the this step was probably not properly completed."

 elif   LC_ALL=C sgdisk -A=1:show "$dev" 2>/dev/null |
                 grep -q "legacy BIOS bootable"
 then echo $"The first partition has the legacy BIOS bootable attribute."
      echo $"This looks correct."
 else echo $"The first partition lacks the legacy BIOS bootable attribute."
      echo $"It will probably not boot."
 fi
}

stock DOCS[MBR] \
"less /usr/doc/docent/mbr"              "$RIGHT" $"# learn the MBR"

GOAL[MBR]=$"Install a bootable MBR"
stock HINT[MBR] "cat /usr/share/syslinux/gptmbr.bin > /dev/sda" "\n"

test_MBR(){
 local dev
 read  -p $"Please enter the block device node of the mass storage device: " dev
   if  !   [ -b "$dev" ]
 then  echo $"$dev is not a block device"
       echo $"If the block device node is unknown"
       echo $"then the this step was probably not properly completed."
 elif file   -sk "$dev" | grep -q "SYSLINUX GPT-MBR" &&
      echo $"$dev has a SYSLINUX GPT-MBR installed in the MBR" &&
      sfdisk -l  "$dev" 2>/dev/null | grep -q GPT &&
      echo $"$dev appears to have a GPT."
 then echo $"This combination looks usable."
 else echo $"This combination looks flawed."
      echo $"Install /usr/share/syslinux/gptmbr.bin to $dev"
      echo $"run /sbin/gdisk and create a GPT"
 fi
}

stock DOCS[RAID] \
"xz -cd /usr/share/tldp/Software-RAID-HOWTO.xz | less" "\n" \
                                        "$RIGHT" $"# learn RAID" "\n" \
"man mdadm"                             "$RIGHT" $"# learn RAID utility commands"

stock GOAL[RAID] $"Optionally create a RAID"
stock HINT[RAID] $"A RAID becomes useful with 3 or more disks." "\n" \
$"A RAID is recognized early in the boot sequence."  "\n" \
$"Consequently, RAIDs can be partitioned, LUKSed or LVM2ed."

stock DOCS[LVM2] \
"xz -cd /usr/share/tldp/LVM-HOWTO.xz | less" "\n" \
                                        "$RIGHT" $"# learn LVM2" "\n" \
"man lvm"                               "$RIGHT" $"# learn command summary"
stock GOAL[LVM2] $"Optionally create logical volumes"
stock HINT[LVM2] $"LVM2 is used for creating logical volumes."  "\n" \
$"Logical volumes are similar yet not identical to partitions." "\n" \
$"Few SAs invest time to memorize confusing LVM2 nomenclature." "\n" \
$"However, some POSIX require deployment using LVM2."   "\n" \
$"Therefore, at least learning it's capabilities is useful."

stock DOCS[LUKS] \
"man cryptsetup"                        "$RIGHT" $"# learn LUKS encryption command" "\n" \
"less /usr/doc/docent/LUKS"
stock GOAL[LUKS] $"Optionally encrypt block devices"
stock HINT[LUKS] $"When the root file system reside on a LUKS encrypted device" "\n" \
$"then an unencrypted ext2 /boot partition must also exist." "\n" \
$"LUKS encryption can be applied to partitions, RAIDs, and logical volumes."

stock DOCS[mkfs.ext2] \
"less /usr/src/linux/Documentation/filesystems/ext2.txt" "\n" \
"man mkfs.ext2" "\n"

stock GOAL[mkfs.ext2] $"Initialize file system for /boot"
stock HINT[mkfs.ext2] $"mkfs.ext2 /dev/sda1" "\n" \
$"The above command is correct when /dev/sda1 will be mounted on /boot"

test_mkfs.ext2(){
 local part
 read  -p $"Please enter the device node name of the partition that was initialized with an ext2 file system: " part
   if !   [ -b  "$part" ]
 then     echo $"$part is not a block device"
 elif !   [ "${part:8:2}" == 1 ]
 then     echo $"The first partition should have been initialized instead."
 elif !   LC_ALL=C file -sk "$part" | grep -q "ext2 filesystem"
 then     echo $"That does not appear to contain an ext2 file system."
 else     echo $"This step appears to be successfully completed."
 fi
}

stock DOCS[mkfs] \
"cat /usr/src/linux/Documentation/filesystems/" '\\\\' "\n" \
"{btrfs,ext4,jfs,ocfs2,xfs}.txt | less" "\n" \
"man mkfs.{btrfs,ext4,ocfs2,xfs} jfs_mkfs" "\n" \
"xz -cd /usr/share/tldp/Filesystems-HOWTO.xz | less" "\n" \
"less /usr/doc/docent/plan"

stock GOAL[mkfs] $"Initialize file systems"
stock HINT[mkfs] $"Device node name is an essential command line parameter." "\n" \
$"Other parameters suggested in manual pages are optional."

stock DOCS[mkswap] \
"man mkswap" "\n" \
"less /usr/doc/docent/swap" "\n" \
"less /usr/doc/docent/plan"

stock GOAL[mkswap] $"Initialize swap partitions"
stock HINT[mkswap] $"mkswap device_node" "\n" \
$"The above command initializes device_node as swap space."

test_mkswap(){
 local part len
 read  -p $"Please enter the device node name of the partition that was initialized as swap: " part
 len="${#part}"
 (( len-- ))
   if !   [ -b  "$part" ]
 then     echo $"$part is not a block device"
 elif !   LC_ALL=C file -sk "$part" | grep -q "swap file"
 then     echo $"That does not appear to contain a swap system."
 else     echo $"This step appears to be successfully completed."
 fi
}

stock DOCS[mkdir] \
"man mkdir" "\n" \
"less /usr/doc/docent/mkdir" "\n" \
"less /usr/doc/docent/plan"

stock GOAL[mkdir] $"Make mount points"
stock HINT[mkdir] $"mkdir -pm 755 /media/root/main/" "\n" \
$"The above command creates the directory /media/root/main/." "\n" \
$"The above command is correct for a computer with a single root file system."

test_mkdir(){
   if !   [ -d   /media/root/main/ ]
 then     echo $"/media/root/main/ is not a directory, but should be."
          echo $"Please request a hint to learn the command to execute."
 else     echo $"This step appears to be successfully completed."
 fi
}

stock DOCS[mount] \
"man mount" "\n" \
"less /usr/doc/docent/mount" "\n" \
"less /usr/doc/docent/plan"

stock GOAL[mount] $"Mount file systems"
stock HINT[mount] $"Mount in proper order all of the file systems specified by the selected plan."

test_mount(){
 local mrm=/media/root/main

 if   ! grep -q  $mrm       /proc/mounts
 then   echo   $"$mrm/ should be mounted, but is not mounted."
 elif ! grep -q  $mrm/boot  /proc/mounts
 then   echo   $"$mrm/boot/ should be mounted, but is not mounted."
 elif ! sed "0,\,$mrm ,d" /proc/mounts |
        grep -q  $mrm/boot
 then   echo $"$mrm/ should be mounted before $mrm/boot."
        echo $"However, the order was reversed."
        echo $"Execute: umount $mrm $mrm/boot"
        echo $"Remount file system in proper order please."
 else   echo $"$mrm and $mrm/boot appear to be properly mounted."
        echo $"If the plan provides additional file systems"
        echo $"then mount those file systems also."
        echo $"Only /media/root/main/ requires a boot subdirectory."
 fi
}

stock DOCS[/etc/fstab.rootfs] \
"man fstab" "\n" \
"less /usr/doc/docent/fstab.rootfs"

stock GOAL[/etc/fstab.rootfs] $"Make a valid /etc/fstab.rootfs"
stock HINT[/etc/fstab.rootfs] "cp /usr/doc/docent/fstab.rootfs.sample /etc/fstab.rootfs" "\n" \
"nano /etc/fstab.sample" "\n" \
$"When uncertain the above commands create an easy to edit template."

field_check(){
 sed 's:#.*::' $1 | cat -n |
 while read line fs_spec fs_file fs_vfstype fs_mntops fs_freq fs_passno junk; do
  if   [[ -n $junk ]];  then echo #"Line $1 contains too many fields"; return 1
  elif [[ -z $fs_spec               ]]; then continue
  elif [[    $fs_spec =~ luks       ]] ||
       [[    $fs_spec =~ LABEL=     ]] ||
       [[    $fs_spec =~ UUID=      ]] ||
       [[    $fs_spec =~ PARTLABEL= ]] ||
       [[    $fs_spec =~ PARTUUID=  ]]
       [[ -b $fs_spec ]]
  then :
  else  echo $"Line $line should begin with luks, LABEL= UUID= PARTLABEL= PARTUUID= or be a block device."
       return 1
  fi
  if   [[    $fs_file =~ none ]] ||
       [[    $fs_file =~ NONE ]] ||
       [[ -d $fs_file ]]
  then :
  else echo $"Line $line fs_file should be none or a directory."; return 1
  fi
  if   [[     $fs_freq == 0 ]] ||
       [[     $fs_freq == 1 ]]
  then :
  else echo $"Line $line fs_freq must be 0 or 1"; return 1
  fi
  if   [[     $fs_passno == 0 ]] ||
       [[     $fs_passno == 1 ]]
  then :
  else echo $"Line $line fs_passno must be 0 or 1"; return 1
  fi
 done
}

test_etc_fstab.rootfs(){
 local f=/etc/fstab.rootfs
 local m=/media/root/main
 local b=/media/root/main/boot

 if   ! [ -f $f ]
 then echo $"$f does not exist, but should exist"; false
 elif ! sed 's:#.*::'  $f | grep -v $b | grep -q $m
 then echo $"$f must contain an entry for $m"; false
 elif ! sed 's:#.*::'  $f | grep -q $b
 then echo $"$f must contain an entry for $b"; false
 elif ! sed "0,\:$m:d" $f | grep -q $b
 then echo $"$f must contain $m above the line for $b"; false
 fi &&
 field_check $f
}

stock DOCS[password] "man passwd"
stock GOAL[password] $"Set root account password"
stock HINT[password] "passwd root" "\n" \
$"Execution of the above command completes this step."

# The password test does not yet properly work.
# test_password(){
#  if   echo $"Please enter the root password"; su -c /bin/true &>/dev/null
#  then echo $"Entered password verified as current root password."
#  else echo $"Entered password is not current root password."
#  fi
# }

stock DOCS[account] "man useradd" "\n" "man groupadd" "\n" "/usr/doc/docent/account"
stock GOAL[account] $"Create a user account and group"
stock HINT[account] $"For convenience an adduser script exists." "\n" \
                    $"adduser will run useradd, groupadd, and create a mail spool entry."

stock DOCS[groups] "man usermod"
stock GOAL[groups] $"Join useful groups"
stock HINT[groups] "usermod -G audio,cdrom,video username" "\n" \
$"Replace username with the name of the user account." "\n" \
$"Running the above command completes this step" "\n" \
$"Group memberships grant additional privileges to a user."

stock DOCS[boothash] "less /usr/doc/docent/boothash"
stock GOAL[boothash] $"Change the boot password"
stock HINT[boothash] 'sed -i \"s|PASSWD.*|PASSWD\\\t\$( md5crypt <<< \"unique\")|\" /etc/extlinux/head' "\n" \
$"Substitute something clever for unique." "\n" \
$"Entering the above command completes this step."

test_boothash(){
 local h=/etc/extlinux/head REPLY
 if   grep -q "PASSWD	sorcerer" $h
 then echo $"$h still has default password."; return 1
 elif read -p "Please enter boot password: " -s
      grep -q "$( md5crypt <<< "$REPLY" )" $h
 then echo $"Password verified."
 else echo $"Password verification failed."; return 1
 fi
}

stock DOCS[cp] "man cp" "\n" \
               "less /usr/doc/docent/cp"
stock GOAL[cp] $"Copy rootfs to new root file system"
stock HINT[cp] $"cp -ax / /usr/ /media/root/main/"	"$RIGHT" $"# copies the files."
stock ARGOT[cp] "cp"
stock ASK[cp]  $"Who does not occasionally wonder why the copy command is called cp?"

test_cp(){
 local r=/media/root/ n=/etc/rootname
 if   ! cat $r*$n &>/dev/null
 then echo $"If files were copied then they did not go where expected"; false
 elif [ -n "$( cat $r*$n | sort | uniq -d )" ]
 then echo $"One or more root file systems has the same rootname."
      echo $"Fix that now by running the command:"
      echo $"nano /media/root/*"; false
 else echo $"Seems that files copied."
 fi
}

stock DOCS[rbind] "man mount" "\n" "less /usr/doc/docent/rbind"
stock GOAL[rbind] $"rbind virtual file systems"
stock HINT[rbind] \
"mount --rbind {,/media/root/main}/dev"  "\n" \
"mount --rbind {,/media/root/main}/proc" "\n" \
"mount --rbind {,/media/root/main}/sys"

test_rbind(){
 local t=/etc/mtab m=/media/root/main
 local d=$m/dev p=$m/proc s=$m/sys
 if   ! grep -q $d $t; then echo $"Please mount $d"; false
 elif ! grep -q $p $t; then echo $"Please mount $p"; false
 elif ! grep -q $s $t; then echo $"Please mount $s"; false
                       else echo $"Binds seem to be active."
 fi
}

stock DOCS[chroot] "man chroot" "\n" "less /usr/doc/docent/chroot"
stock GOAL[chroot] $"Install bootloader"
stock HINT[chroot] \
"chroot /media/root/main/ /etc/init.d/extlinux force-reload" "\n" \
$"Execution of the above command completes this step."

test_chroot(){
 if   [ -f /media/root/*/boot/initrf/etc ]
 then echo $"chroot step successfully completed."
 else echo $"chroot step incomplete."; false
 fi
}

stock DOCS[umount] "man umount"
stock GOAL[umount] $"Unmount file systems"
stock HINT[umount] 'grep /media/root/ /proc/mounts | cut -d \" \" -f2 | sort -r | xargs -r umount' "\n" \
$"Execution of the above command completes this step."

test_umount(){
 if   ! grep -q /media/root/ /proc/mounts
 then echo $"umount successful."
 else echo $"file systems are still mounted."; false
 fi
}

stock DOCS[reboot] "man shutdown"
stock GOAL[reboot] "Reboot the computer"
stock HINT[reboot] "shutdown -r now" "\n" \
$"Execution of the above command properly reboots a computer." "\n" \
$"However, booting from an I/R is not properly booting a computer." "\n" \
"reboot -f" "\n" \
$"The above command immediately reboots without executing runlevel 6." "\n" \
$"Remember to eject CDROMs DVDs or disconnect USB SSDs." "\n" \
$"The next boot will use the mass storage device."

stock DOCS[hostname]  "man -a hostname"
stock GOAL[hostname] $"Give the computer a hostname"
stock HINT[hostname]  "nano /etc/hostname"
stock DOCS[rootname]  "less /usr/doc/docent/rootname"
stock GOAL[rootname] $"Give a name to a root file system"
stock HINT[rootname]  "nano /etc/rootname"
stock DOCS[hosts]     "man hosts" "\n" "less /usr/doc/docent/hosts"
stock GOAL[hosts]    $"Edit /etc/hosts"
stock HINT[hosts]     "nano /etc/hosts"

test_exists_file(){
 if   [ -s "$1" ]; then echo $"$1 exists and has content";   return 0
 elif [ -f "$1" ]; then echo $"$1 exists but lacks content"; return 1
                   else echo $"Please create $1"; return 1
 fi
}

test_hosts(){    test_exists_file /etc/hosts; }
test_hostname(){ test_exists_file /etc/hostname; }
test_rootname(){ test_exists_file /etc/rootname
 if   [ "$(< /etc/hostname )" == \
        "$(< /etc/rootname )" ]
 then $"Content of /etc/hostname and /etc/rootname must differ."; false
 fi
}

stock DOCS[network] "less /usr/share/tldp/Unix-and-Internet-Fundamentals-HOWTO.xz" "\n" \
"less /usr/share/tldp/Networking-Overview-HOTWO.xz" "\n" \
"less /usr/share/tldp/NET3-4-HOWTO.xz" "\n" \
"less /usr/share/tldp/Adv-Routing-HOWTO.xz" "\n" \
"less /usr/share/tldp/IP-Alias.xz" "\n" \
"less /usr/share/tldp/IP-Masquerade-HOWTO.xz" "\n" \
"less /usr/share/tldp/Linux+IPv6-HOWTO.xz" "\n" \
"less /usr/share/tldp/Mobile-IPv6-HOWTO.xz" "\n" \
"less /usr/share/tldp/Ethernet-HOWTO.xz" "\n" \
"less /usr/share/tldp/Ethernet-Bridge-netfilter-HOWTO.xz" "\n" \
"less /usr/share/tldp/Home-Network-mini-HOWTO.xz" "\n" \
"man ip" "\n" \
"less /etc/networks.d/templates/README" "\n" \
"less /usr/doc/docent/network"

stock GOAL[network] $"Configure network interface"
stock HINT[network] $"Hopefully automatic network configuration worked." "\n" \
                    $"Otherwise read and follow what the documentation suggests." "\n" \
                    $"Using the template method provided in /etc/networks.d/ is recommended."


stock DOCS[feature] "au help feature 2>&1 | less"
stock GOAL[feature] "Activate useful sorcery features"
stock HINT[feature] "au help feature"

test_feature(){
 if   augur feature 2>&1 | grep -q retry
 then echo $"The retry feature was successfully enabled."
 else echo $"The retry feature is not yet enabled."
      echo $"However, the retry feature probably should be enabled."
      false
 fi
}

stock DOCS[update] "au" "\n" "au help sync" "\n" "au help scry"
stock GOAL[update] $"Update installed software projects"
stock HINT[update] "au merge; au sync; au scry"

stock DOCS[manifest] "au help begin" "\n" "less /usr/doc/docent/manifest"
stock GOAL[manifest] "Install additional software"
stock HINT[manifest] "au merge; au begin firefox kde xorg; au begin; au scry"

stock DOCS[reap] "au help queue" "\n" "less /usr/doc/docent/reap"
stock GOAL[reap] $"Uninstall the deployment docent"
stock HINT[reap] "au queue reap/deployment-docent"     "\n" \
                 "au queue reap/wesnoth-music-samples" "\n" \
                 "au begin" "\n" "au scry"

stock DOCS[inittab] "man inittab" "\n" "less /usr/doc/docent/inittab"
stock GOAL[inittab] $"Modify /etc/inittab if desirable"
stock HINT[inittab] "nano /etc/inittab"

stock DOCS[multiroot] "less /usr/doc/docent/multiroot"
stock GOAL[multiroot] "Understand multiroot deployment"
stock HINT[multiroot] $"The advanced concept of multiple root file systems is supported"

stock DOCS[scry] "au help"
stock GOAL[scry] "Monitor the progress of software installation"
stock HINT[scry] "au begin; au scry"

stock DOCS[retry] "au help" "\n" "less /usr/doc/docent/retry"
stock GOAL[retry] "Retry software that failed to install"
stock hint[retry] "au queue | sed 's:moil/failed/:moil/:p;d' | au begin"

new_prompt(){
 . /etc/bash.d/interactive/PS1
 local ps1="$PS1"

 NAV="$SC$AR$AS$DO$HH$TE$FA$YR"
 PS1="\n"
 if [ -n "$ID" ]; then
 PS1+="$YELLOW$BOLD$ID$NORM"; fi
 PS1+="${CYAN}Step: $GREEN$STEP$NORM"
 PS1+="$RIGHT${CYAN}Goal: $GREEN${GOAL[$STEP]}$NORM\n"
 PS1+="$BOLD"
 PS1+=$"Valid Docent Commands are:"
 PS1+="$RIGHT"
 PS1+=$"argot; ask; docs; hint; test; fore; yore."
 PS1+="\n";               if [ -n "${HELP[$STEP]}" ]; then
 PS1+="${HELP[$STEP]}\n"; fi
 PS1+="$NAV$NORM"
 PS1+="$ps1"
 export PS1
}

fore(){
 if !  [ "$STEP" == origin ]; then
  if   [ -n "$FA" ]; then FA=
  elif [ -n "$SC" ]; then SC=
  elif [ -n "$ID" ]; then ID=
  fi
 fi

 if   [ -n "$1" ] &&
      [ -n "${GOAL[$1]}" ]
 then STEP="$1"
 else
  local next=${FORE[$STEP]}
  if   declare -f before_$next
  then            before_$next || return
  fi
  STEP=$next
 fi
 new_prompt
}

yore(){
 YR=
 STEP=${YORE[$STEP]}
 new_prompt
}

hint(){
 HH=
 if   [ -n "${HINT[$STEP]}" ]
 then echo -e "$BLINK${HINT[$STEP]}$NORM"; echo
 else echo $"No hint is provided for step $STEP."
 fi
}

docs(){
 DO=
 if   [ -n "${DOCS[$STEP]}" ]
 then echo -e "${DOCS[$STEP]}"; echo
 else echo $"No documentation recommended for step $STEP."
 fi
}

argot(){
 AR=
 if   [    -n "${ARGOT[$STEP]}" ]
 then echo -e "${ARGOT[$STEP]}"; echo
 else echo $"No argot recommended for step $STEP."
 fi
}

ask(){
 local REPLY
 AS=
 if   [ -n "$1" ]; then REPLY="$1"
 else 
 read  -p $"Please enter the word: " REPLY
 fi

 if   [    -n "${ASK[$REPLY]}" ]
 then echo -e "${ASK[$REPLY]}"; echo
 else echo $"The arogt $REPLY was not recognized."
      echo $"Capitalization might differ."
      echo $"The word must be entered as it previously appeared."
 fi
}

test(){
 TE=
 if   declare -F | grep -q "test_${STEP//\/_}$"
 then test_${STEP//\/_}
 else echo "No test was designed for step $STEP."
 fi
}
 
if   [ 1 == "$( /bin/stat -c %D / )" ]
then STEP=origin
else STEP=resume
fi

fore
