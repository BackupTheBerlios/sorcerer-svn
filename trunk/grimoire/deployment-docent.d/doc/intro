Welcome to the Modern Magic Docent.
Docents perform the roles of teaching assistant and tour guide.
The deployment docent provides step by step guidance
towards the goal of accomplishing a successful deployment.

Deployment is the transfer of a POSIX
in a pre-deployed state from an Install/Rescue disk image or device
to a deployed state onto a mass storage device, such as a fixed disk.
A fixed disk is a device for storing a large capacity of data.

POSIX means Portable Operating System Interface for Unix.
Unix is the operating system which a POSIX emulates.
This distribution of free software is a POSIX.

In a deployed state the installed software can be configured,
updated, and additional software can be installed.
The pre-deployed state of this POSIX provides
only the software that is useful for deployment
and rescue of previous deployments.
Thousands more fun and amusing software projects
can be easily installed after deploying.

Software is the term used to describe
computer code that originates from a project.
A software project is a person or group of individuals
that design and implement computer code.
Frequently, the phrase "software project"
can refer both or either the people or the computer code.
The surrounding context provides clues.

The docent recognizes the following commands:
argot; ask; docs; hint; test; fore; yore.
"argot"	provides a vocabulary list.
"ask"	provides definitions.
"docs"	suggests commands for reading documentation.
"hint"	suggests commands that could be immediately useful.
"test"	can sometimes perform tests.
Tests	can verify that the current task was completed successfully.
"fore"	advances the docent to the following task.
"yore"	regresses the docent to the previous task.

Unrecognized commands are executed by the bash shell.
The name BASH means Bourne Again Shell.
A shell is an interactive command interpreter.

Using a docent command tacitly implies recognition.
Used commands do not appear in following prompts.
However, the command remains a valid choice.

Trimming the prompt
mitigates the probability
of important information
scrolling above the displayed portion
of the virtual console.

The console is the screen, monitor, or display.
It is virtual in the sense that
several can be concurrently provided.
However, the physical screen displays
only the content of a single virtual console.
The currently displayed virtual console
can easily be changed by pressing
certain keys in combination together.
Additional documentation describes virtual console usage.
The command to view it is:
xz -cd /usr/share/tldp/Keyboard-and-Console-HOWTO.xz | less

Many useful POSIX commands exist.
Commands are computer program names.
The names are part of the argot.
Argot is the collection of words that are specific
to an experience, occupation, or profession.
The provided documentation helps
to demystify the argot of POSIX.

Understanding argot is of paramount importance.
Please do not omit seeking understanding
of words that are unknown or misunderstood.

Wielding the power of POSIX requires acquisition of lore.
Lore is not merely the comprehension of argot.
Lore is also the the skill for effectively wielding argot.
Failure to comprehend causes failed deployment.

The word system administrator is abbreviated as SA.
SAs responsibilities are
deploying operating systems,
configuring software,
updating installed software,
and ensuring that the software performs
according to the expectations of the client or computer user.

SAs accept tasks prior to acquisition of sufficient lore.
The lore required for successful completion of a task
is acquired by a SA when such lore becomes required.
SAs repeatedly confront challenges;
learn from each failed attempt;
and ultimately arrive at a successful outcome.

The ability to deploy a POSIX is standard SA lore.
The experience of deployment varies with the POSIX.
The experience of deployment varies with experience.
A neophyte SA could perceive deployment
as an endless amount of tasks
each involving an insurmountable challenge.
However, by assimilating the lore;
each challenge can be successfully accomplished.
What began as daunting experience
can be savored as a fantastic adventure
of learning and achievement.
Those who achieve deployment
and master administration tasks
should feel welcomed into the cabal
of those who wield the Modern Magic.

Additional opportunities for receiving help
can be acquired by joining the email lists,
interacting with other SAs,
reading the documentation hosted at
"The Linux Documentation Project" website,
reading documentation hosted at software authors' websites,
reading documentation provided in software tarballs,
reading installed documentation,
reading manual and info pages,
doing google searches, and more.

Learning is an available opportunity
to anyone who wants to learn.
Books   need not be purchased.
CDs     need not be purchased.
Classes need not be purchased.
That is the splendor of free software.

Modern Magic is merely one approach
to creating and providing a POSIX.
Many different POSIX exist.
Each specializes in one or more niches.

The path of Modern Magic emphasizes mastery of lore.
Masters of Modern Magic acquire lore
which is applicable to the deployment
and administration of many POSIX.
The majority of learning
is about about command line tools
that are common among all POSIX.

Do not lament if the challenge of deployment
seems insurmountable at this time.
Many other fine POSIX exist.

No POSIX is the best POSIX.
Each POSIX attempts to fulfill
the requirements of one or more niches.
At least two or more POSIX
tend to compete in the same niche.
While nearly an identical selections of software
can be provided by various POSIX
the experience of deployment and administration vary.

Modern Magic is intended to please
those who possess the pinnacle of lore.
Several secondary goals exists such as:
achieving performance from powerful computers;
updating using slow or expensive Internet connections;
providing lore to those capable of assimilating it.
The methods for achieving the primary and secondary niches
are revealed in additional documentation
and through the experience of administration.

POSIX exist that aim to fulfill the niche
of being deployed without the acquisition of lore.
They are called "Live CD" or "Live DVD."

CD is the abbreviation for compact disk.
A CD is a round flat piece of plastic
nearly the diameter of a person's hand
which contains data that is read
by a device that contains a laser and motor.
And a DVD is a CD with a larger data storage capacity,
while maintaining the same physical dimensions as a CD.

A "Live CD" style POSIX can be ideal
for those who want a POSIX for play.
Some can be utilized without deploying.
A small selection of impressive eye candy is provided.
However, software development tools are lacking
or not installed until after deployment.

In contrast Modern Magic is intended to be deployed.
The pre-deployed state provides many development tools.
However, eye candy is lacking.
If a workstation is deployed
then a graphical user interface, desktop environment
and several gigabytes of amusing and useful software
can be installed.

However, a deployed server
does not require xorg and GUI software.
Consequently, providing software that that is useful
for tasks other than deployment and rescue
wastes the available 650 megabyte capacity
of an ISO9660 file system on a CDROM.

Rather than competing in the niche of "Live CD,"
Modern Magic aims to be a POSIX
that can be deployed exactly as SAs desire.

In contrast a "Live CD" POSIX
provides fewer choices concerning deployment.
A no questions asked deployment process
is a simple method for the simple minded.
Performance is the typical cost for simplicity.

If tempted to ask the question,
"Which style of POSIX is superior,"
then be aware that the answer received
depends upon the preference of the person answering.
Many of the differences between POSIX
tend to be entirely matters of personal preferences.
Most POSIX are based upon administration tools
developed by FreeBSD, RedHat, Debian GNU/Linux, and Slackware
the the differences in experience among
such POSIX and their forks can be extremely slight.
A fork is a blatant copy of other people's effort and work
rather than something accomplished by a person's own design and effort.

Modern Magic lacks a package manager.
The administration technology is called sorcery.
From inception sorcery was intended
to be entirely for source based administration.
Therefore, it lacks many of the limitations
of pre-compiled package based POSIX.
The experience of wielding sorcery
will differ from the experience
of wielding package managers.

Each person should allow oneself the patience and persistence.
A skilled SA can achieve deployment in mere minutes.
A neophyte can achieve deployment in mere months.
An apprentice level SA can expect
between one and a few hours.
The duration depends upon
how much additional lore must be assimilated
to achieved the desired deployment plan.

At the time of editing this document
my most recent deployment required about an hour.
It I created 24 partitions, several file systems,
performed backups, and restored from backups,
and utilized LUKS encrypted devices.
Consequently, the experience differed from the experience
of someone doing a first time deployment using an Install/Rescue CD.

The proper time to attempt deployment
is when nothing urgent is expected to occur anytime soon.
Allocate 8 hours, complete it in 1.5 hours
and gain the title of "Miracle Worker,"
like the character Montgomery Scott
from the 1960s television show "Star Trek."
Even when deployment progresses smoothly
the extra hours can be spent savoring the flavor
of reading both vintage and current documentation.

The documentation provided courtesy
of the website "The Linux Documentation Project,"
tends to be vintage.
Some of it nearly describes the methods for programming
the computer systems of the of the (NCC-1701) USS Enterprise.
That was a joke.
The (NCC-1701) USS Enterprise was also a reference
to the television show "Star Trek."

Some of the HowTo documentation
describes software that was not in use since pre 2000.
Do not be daunted or surprised if some aspects differ.
Many important differences are described
in the documentation provided with the docent.
The HowTos are not intended to be vintage.
But documentation in that style was more favorable
during the previous 2 decades as compared with now.

Current documentation can almost always be found
within a software project's source tarballs,
at a software project's website,
or in manual and info pages.
Please do keep that distinction in mind
when reading the HowTo style documentation.
And observe the date of the most recent edition
near the top of each HowTo.
If it is over 5 years old
then some of what it describes
might not longer be current best practices.

The docent suggests reading both vintage documentation
and also documentation provided with the docent
and of course manual pages and documentation
that was installed when a software project installed.
Consequently, comprehension will not be stuck in a time warp.
Yet at the same time comprehension will benefit from
the more verbose descriptions provided in the HowTos.
The documentation provided by running programs
with the --help parameter
or by reading manual pages
tends to describe the current syntax.
Therefore, when choosing what to expect to be accurate
please regard the HowTo style documentation as being
potentially historic and consequently least accurate.

Please exercise patience.
Surmount challenges and savor the feeling of satisfaction.
Both the quantity and quality of enjoyment
tends to be proportional to the amount of time
required to achieve a successful deployment.
Consequently, faster is not always better.

The docent is intended to be a useful boon
like training wheels on a bicycle.
It is also intended to be discarded
after sufficient lore is acquired.
SAs are expected to design and implement
their own methods for efficient mass deployment.

So with that in mind
and no further ado,
please enjoy.
