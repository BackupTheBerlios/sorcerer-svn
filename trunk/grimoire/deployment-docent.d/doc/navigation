If a file system's hierarchy
is imagined as a network of roads
then the present working directory
would be the road currently being traveled upon.
Each process has a present working directory.
The common abbreviation is PWD.
The PWD is changed by using the change directory command.
For the BASH shell the change directory command is "cd"

To change the present working directory to /bin
then the following command would be executed:
cd /bin

Directory names that start with a '/', slash, are called absolute.
Directory and file names that do not start with slash are called relative.
The present working directory can be changed to /usr/bin by:
cd /usr/bin

Or two commands can be used
cd /usr
cd bin

Or three commands can be used
cd /
cd usr
cd bin

Two of the examples demonstrate the concept of relative path names.
A series of connected directories
that lead to a destination are called a path.

However, PATH is also the name of an important environment variable.
Environment is a portion of data that is shared among processes.
Environment can contain many variables including command line parameters
which are the things that are typed on a command line
following a program name and prior to terminating symbols
such as ';' '|' '#' '&' '&&' '||'
The meaning of those symbols are explained in the BASH manual page.

The environment variable PATH is a colon separated list of paths
which should contain executable files.
Consequently, directories such as /usr/local/bin /usr/bin /bin
are typically included in the PATH.
To see the current value for PATH execute the command:
echo $PATH

The above command will likely print something such as:
/root/bin:/usr/local/bin:/usr/bin/:/bin:/usr/local/sbin:/usr/sbin:/sbin
Notice how colons separate the directory names.
As expected this also implies that colons
are not expected within directory names.
However, the Perl programming language
oddly installs many files with file names
that contain two adjacent colons.

When a command is given to the shell,
which is the interactive command interpreter,
then the command should be prefaced
with the absolute path name
where the command program resides.
However, when commands are given
without the prefix of an absolute path name
then the directories specified by $PATH
are searched for the program.

Every directory has two entries that are special.
'.', dot, recursively refers to the itself.
'..', dot dot, refers to the directory that contains the directory.

If the PWD is /usr/bin
then what does the PWD become after the command
cd ..

Of course the PWD becomes /usr

In addition to changing directories
the content of directories can be listed.
The two most frequently used shell tools
for listing directories are ls and find.
ls is the abbreviation for list.
Definitely read the manual page for both:
man ls
man find

Try reading docent documentation differently.

Instead of executing:

less /usr/share/docent/navigation

Try executing:

cd /usr/share/docent
less navigation

Both ls and find can locate and display
the names of files, directories, and more.
They display file names, but not content.
less is useful for viewing file content.
However, another useful command is "file."
The "file" command examines a few bytes from a file
and outputs a guess about the file's content.

From reading /usr/share/fhs.txt.gz
the lore is learned that
/bin/ /sbin/ /usr/bin/ /usr/sbin/ directories
contain files that can be run.
/sbin/ and /usr/sbin/ contain files that are primarily run
by the system or system administrator, hence the 's' before bin.
/bin/ /usr/bin/ and /usr/local/bin/
typically contain files that are run by user accounts.
Below is a command that will display
the type of files discovered in /bin/

find /bin/ | xargs file

The above command can be typed
in a separate virtual console
so that this file can continue
being displayed on this virtual console.
Doing so can be more useful than
exiting the pager, running the command,
then pressing up arrow twice followed by enter
to reload this document and then scanning forward
to the location where reading interrupted.

From reading the BASH manual page
lore about the pipe symbol is learned.
The pipe command connects
the    standard output of the first  command
to the standard input  of the second command.

Please read the xargs manual page.
It describes how xargs can be used for invoking
a program one or more times
where the stdin to xargs become command line parameters
to the program being executed by xargs.

Without the xargs command the same output could be achieved
by running the following command
find /bin/ | while read REPLY; do file "$REPLY"; done

However, xargs is more convenient.
When processing many lines
xargs can execute faster than a bash loop.
Both /bin/find and /bin/xargs are
installed by the same software project.
That software project is called findutils.
xargs can be used with any program.
However, xargs is most frequently used with the find command.
SAs master the lore of file, find, ls, and xargs.

If curious about the type of a specific file
such as /bin/bash
then the "file" command can be executed
with /bin/bash as the command line parameter.
file /bin/bash

The above command should report that /bin/bash is an executable ELF,
executable link format.

Navigating the file  system with the shell
and displaying files   type with the file command
and displaying file content with the less command
are base SA skills.
In years past when graphical user interfaces
were less frequently used;
Unix computer users acquired shell navigation lore.
In modern times skilled SAs still wield the shell.
They wield a shell every day at work.

Many of the files in a file system are text.
Text files can be modified using a text editor.
Text files are considered human readable.

In contrast an ELF, executable link format,
such as /bin/bash is considered machine readable file.
Machine readable files are sometimes called binary files.
Binary files are not typically edited.
Instead they are translated from human readable source code
into a computer program by the compiler and linker program.
Compilation reads text files and outputs machine code.

The linker modifies the machine code
so that the dynamic linker can
automatically load ELF library files
that are required for running
a dynamically linked ELF executable file.

The use of ELF library files provides several advantages.
An ELF library file contains computer code or data
that is used by one or more executable programs.
They conserve RAM when used by multiple processes.
They conserve disk space.
They conserve CPU cycles by being compiled and linked once
while being available for use by many programs.

ELF library contain common code and data
that is intentionally factored out of a program
similar to factoring an integer
into a list of prime numbers.
ELF libraries allow people from different software projects
to share the same or similar code.
Sharing of code mitigates effort and time required to produce software.

Metaphorically an ELF library is not unlike a public library.
Functions are provided instead of books.
ELF libraries are rarely edited.

SAs typically have several methods for editing text files.
For editing a text file using a shell command; the program sed can be used.
For editing a file interactively; the program nano can be used.
This document was written using nano.
And it was spell checked using aspell.

Nano is easily learned.
Or maybe nano requires no learning?
I appreciate how nano prints the control key sequences
and what they accomplish on the final two lines.

The commands to read the manual pages
for the aforementioned programs aught to be obvious.

man nano
man sed

sed might be used during deployment.
Effective usage of sed also requires learning
a type of syntax called "Perl Regular Expressions."
This document does not elaborate on regex.
regex is a concise and flexible syntax
for matching and modifying text.
To learn about enter the command:

man -a regex

Skip the first manual page presented.
The syntax is explained in manual REGEX(7)

If a system administrator were a fantasy wizard
then how cool would that be?
If a system administrator were a fantasy wizard
then the shell would be the wizard's stave or wand.
The shell provides a fast and powerful method for wielding lore.

Neophytes tend to prefer graphical user interfaces.
They want to run file manager programs.
File manager programs seem to offer convenience.
Yet the amount of tasks that a file manager can accomplish
is several magnitudes less than what can be accomplished with a shell.
Therefore, file managers provide convenience
for only a tiny selection of tasks.

A fluffy file manager
does not make a powerful POSIX.
File managers are provided for use by those users
who are either unable or unwilling to assimilate lore.
File nurse or file crutch are appropriate descriptions
for file manager programs.

Learning to use the shell,
how to navigate,
how to execute commands,
how to chain commands together,
and how to write shell scripts
are for a SA the same as literacy for non SAs.
System administrator that prefer file mangers
often conceal that preference.
Being seen using a file manager
gives others SAs reason to suspect lack of lore.

Many choices of text editor programs exist.
Consequently, SAs can become capable
without learning commands of esoteric text editors.
Many choices of shell programs exist.
Therefore, a SA can be passable
with only average BASH lore
provided that the SA gains lore
involving korn, cshell, or some other shell.

Some shells attempt to blur the limitations between
a shell and a high level language.
However, some tasks are best accomplished
or can only be accomplished with a high level language.

Wielding a high level languages
require more effort for accomplishing a task
that can also be accomplished with a shell script.
However, a cleverly crafted C program can execute faster
than a cleverly crafted shell script.
The type of task to be accomplished,
and the importance of efficiency,
and preference of the SA
help determine whether to use
a high level language or shell script.

While not all system administrators are programmers,
many have C programming experience.
The majority of software on a POSIX
was written in C source code.
Understanding of the C language is beneficial
for fixing problems in C source.
However, some problems and solutions
can be researched using google web searches.

C programming lore is optional for a SA.
Shell lore is not optional.
Passable ability with BASH is required.
However specialization in another shell
can augment the effectiveness of SAs.

Please be aware that the BASH manual page
is considered to be a reference
rather than an instructional documentation.
Consequently, it lacks examples.
The Linux Documentation Project
hosts tutorials that involve BASH shell scripting.

A computer programmer will understand the BASH manual page.
Non programmers will likely require
tutorials, examples, guides or more.
Do not feel daunted by the task
of assimilating BASH lore.
Refusing to learn BASH
is tantamount to an archer
that refuses to hold a arc/bow.
3 years to become adept with BASH is not unreasonable.

Adepts craft fascinating and useful BASH scripts.
A neophyte should focus on the command line
interactive aspects of BASH.
The ability to understand and execute commands
using the BASH shell will be required
in order to complete deployment.
However, anyone read this step in the docent
is should be adequately progressing.

If time is allocated to read the fascinating portions
of the bash manual page using the command:

man bash

then deployment could seem easier.
However, since it is a reference guide
expect it to present more more information
than explanation and examples.

I read it whenever I required information
for less frequently used syntax.
I read it after major updates.
I enjoy learning the new and nifty
features and functionality.

About a decade elapsed before I felt
as if understood 99% of the BASH manual page.
And when writing BASH scripts
I use less than half of BASH's capabilities.
Consequently, if anyone achieves 10%
or greater understanding about BASH
on the first reading of the manual page
then that would be an impressive accomplishment.
Most manual pages are not as long nor as complex
as the BASH manual page.
Do not worry.

For most SAs mastery of a shell or shells
presents the single most difficult challenge.
Almost all SAs are still in the process
of learning and mastering one or more shells
even after a decade of work experience.
Consequently, do not expect to master it in minutes.
Instead expect to be able to learn exactly
what is required to continue with the deployment process.
Since the bash manual page is always available;
feel free to look at it whenever it could help provide clarity.
