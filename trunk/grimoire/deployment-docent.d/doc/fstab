/etc/init.d/mount runs during sysinit.
/etc/fstab is processed.
File systems are mounted.
Binds created.
The order lines appear in /etc/fstab
is the order in which the actions happen.
Therefore, order is important.

During sysinit rootfs is mounted as /
rootfs is always mounted as /
Never mount anything directly on /
Any other directory can become a valid mount point.
However, real file systems are always mounted
on the immediate sub directories of /+/

Run level execution happens chrooted.
Therefore, during runlevel execution
a real file system appears to be mounted as /
/etc/init.d/mount also executes during the runlevel.
During runlevel /etc/fstab is processed.

Each real file system can have it's own /etc/fstab
Only /+/base/ must contain the file:
/aux/set/rootfs/etc/fstab 

Or that file can exist as /aux/set/rootfs/etc/fstab
The contents of directory /aux/set/rootfs/etc/
are copied to /etc/ early during sysinit.
By this means alternate configuration files
and alternate user group and password files
can be provided for the rootfs.

fstab is the abbreviation for file system table.
However, over many years the format was amended
to provide additional functionality.
For example /etc/fstab can also specify swap systems

The format for the fstab file is described by the manual page
which can be viewed with the command:
man fstab

The mount manual page best describes binds.
The mount manual page can be viewed with the command:
man mount

Binds allow part of a file system
to also appear at another place.
A bind is like a bridge or wormhole
which created between two directories.
Only directories can be bound.
A bind can not exist between files.
Files can be hard linked which is similar to a bind.
However, hard links can not cross file system boundaries.
binds lack that limitation.

All real file systems are mounted
in immediate sub directories of /+/
/etc/fstab can also specify binds.
A bind is useful for concurrently sharing
/home/ or other portions of a file system
across multiple real file systems.
And portions of file systems such as
/aux/can/
can also be mounted and shared by additional binds.
Then it can be bound to /+/base/aux/can/
and  it can be bound to /+/base/work/can/
It can be bound in as many locations as desired.

If multiple real file systems
exist on the same file system
then that file system could first be mounted
on some place other than /+/
And then the directories containing real file systems
can be bind to sub directories of /+/
Or if the file system directories were sub directories
then that file system could be mounted on /+/

Using an individual file system for each real file system
is recommended to maximize efficiency and minimize confusion.
Yet, the above paragraph explains that nonsensical
inefficient methods also work using binds.

Creating real file systems
on a dedicated partition
or a dedicate logical volume is typical.
Performance is the reason benefit.
However, on a computer where file systems
are frequently created and deleted
then LVM2 may provide more benefit.

A logical volume carved from a volume group
can use an arbitrary amount of available space space.
A partition can use only uninterrupted available space.

/aux/set/rootfs/etc/fstab is copied to /etc/ early during sysinit.
/etc/fstab is used during sysinit   for mounting and binding.
/etc/fstab is used during run level for mounting.

Consider a /etc/fstab for the Simplicity Plan.
It might look like the following two lines:

/dev/sda2	/+/base		ext4	defaults	0 0
/dev/sda1	/+/base/boot	ext2	defaults	0 1

Please grant additional attention to the sequence.
The file system which contains a mount point
must be mounted first.
The mount command probably aught to sensibly reorder
the contents of /etc/fstab
before attempting to mount file systems.
However, it does not.
Proper order is responsibility of the SA.

An alternate method would be

/dev/sda2	/+/base	ext4	defaults	0 0

in    /+/base/aux/set/rootfs/etc/fstab
while /+/base/etc/fstab contains

/dev/sda1	/boot	ext2	defaults	0 1

Run level execution for a file system occurs chrooted.
Consequently, /boot specified above is mounted
while already chrooted within    /+/base/
and therefore becomes mounted as /+/base/boot

Due to unshared name space;
/+/base/boot/ appears empty while logged into /
/boot/ appears populated while logged into /+/base/

The format of a fstab file
is also given by the fstab manual page.

The first field of a fstab command is the fs_spec.
Traditionally, a device name is used such as in the above examples.
During the first decade of 2000 use of device names
in fstab files became unpopular.
The reasons where because of the changing device names
provided by the Linux kernel and the the less than certain
order in which devices will be assigned names after a hot-plug-able
device is introduced.
Therefore, a few other methods were introduced for identifying
devices or more accurately file and swap systems.

Some types of file systems are assigned UUID at creation.
UUID is the abbreviation for universal unique identifier.
Some file systems support labels.
Labels must be manually assigned to a file system.
The limitations such as which characters can be used
and the length of a label is determined by the file system.
The limited length of some file system labels
give cause for not wanting to use labels.
For many years I preferred using UUIDs.
However, comments in a fstab file are useful for recalling
which UUID belonged with each partition.

With the introduction of GPT partitioning
the ideas of UUIDs and labels was introduced
into the partition table.
Again this is something the SA must plan to use.

The fstab manual page describes how to use labels.
UUID= and LABEL= must occur to use the UUIDs and labels
that are assigned to a system.
However, if the GPT assigned UUIDs and labels are desired
then those are accessed with PARTUUID= and PARTLABEL=
If any confusion or errors exist concerning the use of
UUID and LABEL for identifying partitions or systems
then the computer might not reboot.
Careful reading of the manual page is advised.

Special nomenclature must be used in fstab
for mounting a file system on a LUKS encrypted device.
Either the device name or the logical volume name or the UUID can be used.
However, they must be properly prefixed with
/dev/mapper/luks-

Therefore, the /aux/set/rootfs/etc/fstab
for the Secure Mobility plan would be:

/dev/mapper/luks-sda2	/+/base	ext4	defaults	0 0
/dev/sda1		/+/base/boot	ext2	defaults	0 1

The reason for using labels and UUIDs
is because device names can change
when hardware is added or removed
or when the Linux kernel is upgraded.
An assigned label or UUID would not change
unless changed by the system administrator.

Please be certain to specify all the file systems
required for the selected plan.
Otherwise the file systems will not be mounted during boot.
And that could cause space on / to deplete rapidly.
Depleting a file system's available space
can cause unanticipated failures.

The UUIDs assigned to devices
can be discovered with the command:

ls -la /dev/disk/by-uuid/

or with the command:

blkid /dev/sda1

where the /dev/sda1 is replaced with the desired partition.

If desired then /+/base/set/rootfs/etc/fstab
can be later re-edited to replace device names
with UUIDs or labels.
For now device names are sufficient.
But remember to change it shortly after deployment
otherwise a kernel upgrade or plugging in a USB device
might create a box that no longer boots.

An entry for /aux/set/rootfs/etc/fstab
that contains a UUID might look like:

UUID=546e2a7e-52fa-5981-7fa0-40d5902315	/+/base	ext4	defaults 0 0

Remember that the correct UUID for the device can be discovered
with the command:
ls -la /dev/disk/by-uuid/

The device node names can change during boot.
However, the UUID will remain the same
unless changed by the SA.

Devices can also be identified using shorter 15 byte maximum labels.
However, not all file systems support labels in the same way.
Some file systems support label size large than 15.
And the bytes allowed in a label could vary.
Labels tend to be a popular way
for specifying and identifying file systems.
However, UUID is the most certain method
for identifying a file system.

The manual pages for the file system creation tool
for each file system probably contains information
concerning the label such as appropriate content and length.
Not all file systems are created with equal capabilities.
XFS for example lacks a boot block,
yet ext2, ext3, and ext4 all reserve the boot block
area of space so that a boot loader could be installed.
Installing a boot loader into an XFS file system corrupts it,
because the area known as the boot block is not reserved.
Learn a file system's boons, banes, and limitations
before deploying it.

Every file system which is created is assigned a unique UUID,
unique universal identifier.
Consequently, UUID seems safe and easy to use.
No concerns exist about it that are similar to labels.

Make comments in fstab
that associate UUID with the purpose of the file system.
That way the UUID for the file system
which is utilized for /boot becomes apparent
from reading the comment.
Comments in fstab begin with #
Therefore, anything after a # is a comment.
Comments are ignored when fstab files are parsed.

Almost all configuration files in /etc/
of a POSIX support the use of comments.
However, the comment character is not universally #
# is the most frequently used comment delimiter.
Consequently, SAs are encouraged to use comments
to provide information, justification, reasoning
and other information in a configuration file.
When looking at it a few years from now
or when someone else is looking at it
then what was intended and accomplished becomes apparent.

For example binding home might look like:

# share /home/ among file systems dev www ftp gui

UUID=546e2a7e-52fa-5981-7fa0-40d5902315	/home ext4 defaults 0 0
/home /+/dev/home none bind 0 0
/home /+/www/home none bind 0 0
/home /+/ftp/home none bind 0 0
/home /+/gui/home none bind 0 0

The above comment and lines indicate that the same /home/
would be visible when logged into
/+/dev/
/+/www/
/+/gui/

Proper order is imperative.
Binds should almost always
exist towards the end of a fstab file.
More about bind mounts can be learned
from reading the mount manual page.
