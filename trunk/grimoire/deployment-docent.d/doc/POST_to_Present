This document explains booting
from Power On Self Test to log in.

Booting involves the execution of many groups
of computer instruction codes.
However, not all of these code groups
are stored at the same location.
The first portion of computer code executed
is stored in the ROM BIOS.

ROM BIOS is the Read Only Memory Basic Input Output System.
When a box is powered on
the code in the ROM BIOS begins execution.
It performs the POST, Power On Self Test.
POST might do a memory check,
identify installed devices,
provide an opportunities to enter menus
for configuration and boot device selection, etc...

The menus provided during POST are not explained in this document.
The documentation provided with the motherboard
or main board or computer should provide instruction
concerning the BIOS provided menus.

Near the completion of POST the MBR, Master Boot Record,
is read from the boot device into RAM, Random Access Memory.
The code loaded from the MBR begins execution.
The code loads the partition table from the device.
The partition which has the bootable flag or attribute is identified.
Code from the boot block of a bootable partition is loaded into RAM.
Code from the boot block begins execution.
The boot block is similar to the MBR,
however instead of existing at the start of the device;
a boot block exists at the start of a partition.
Partitions are how a disk is divided into usable segments.
Verbose explanation concerning partitions exists at a later step.

The code from the boot block should contain a boot loader.
extlinux is the name of the disk boot loader.
isolinux is the name of the CDROM boot loader.
Both extlinux and isolinux come from the same software project
which is known by the name of syslinux.
Credit for creation of syslinux goes to H. Peter Anvin
and the software authors that provided contributions to the project.

The boot loader can provide a menu of labels for booting.
After a short delay the default label is processed.
This causes a kernel and initramfs images
to be loaded from a mass storage device into RAM.

The Linux kernel is the all powerful gate keeper
which serves as a mediator between processes and hardware.
Processes are software which is currently running.
Hardware collective refers to the electronic devices
that compromise a computer.
Nearly anything about a computer which is not software is hardware.
For example, RAM, is hardware.

initramfs are specially crafted cpio images.
They contain portions of a root file system.
A root file system provides useful programs and data files.
If a POSIX was a person
then the root file system would be the body.
After the kernel and initramfs images are loaded into memory
then execution of the kernel's code begins.

The kernel decompresses itself.
The kernel decompresses the initramfs cpio images.
The rootfs receives the content of the initramfs cpio images.
rootfs is a virtual file system that exists in RAM.
However, unlike RAMFS rootfs can also exist in swap space.
Swap space is a portion of a mass storage device
that is tasked to holding memory contents
that are accessed too infrequently
to be worthy of storing in RAM.

The rootfs typically contains /bin/ /etc/ /lib/ /lib64/ /sbin/
from the root file system.
However, it will not contain /aux/ /opt/.
Very few files from /usr/ are also provided.
The purpose of the rootfs is to provide
a sufficient amount of programs and data
that would useful for booting, shutdown.
The rootfs of Modern Magic also contains programs
that are useful for trouble shooting problems
that exist on root file systems.

Because a root file system is eventually mounted
the rootfs requires only a careful selection
of files from an actual root file system.
The rootfs does not become
a mirror image of a root file system.

After completing the above steps;
the kernel begins execution of /init as process 1.
This stage is called sysinit.
/init will mount /proc and /dev
Then /sbin/init begins executing as process 1.
sysinit is not yet complete.
When sysinit completes the run level begins.

Sysinit performs many tasks.
Modules and firmware are loaded for installed hardware.
Device nodes are created in /dev/
Networking devices can be configured.
File systems on mass storage devices can be checked.
Near the end of sysinit root file systems are mounted.
Modern Magic can mount about 60 root file systems,
however I have yet to test more than 6.
When using a single root file system
then that root file system is typically mounted as
/+/base/

Modules provide kernel code in files.
Modules provide code for running hardware, disks, file systems, 
protocols, networking and more.
Modules can be loaded into the kernel when required.
Some modules can be unloaded.
Modules that are not loaded
can eventually be removed from RAM
and stored in swap space.
However, the content of RAM used by loaded modules
will not be transferred into swap space
unless suspending to disk.
Suspending to disk is a method for temporarily powering
off a computer with intention to skip doing a full boot
when power is next turned on.
Consequently, a modular kernel allows for more efficient use of RAM.

Some modules might contain bugs.
The bugs do not manifest if the module is not loaded
or if the code is not compiled directly into the kernel.
And sometimes different modules exist for the same hardware,
yet only one module or the other can be loaded.
Consequently, modules providing more drivers
while mitigating the manifestation of bugs.

Some devices require firmware in addition to modules.
A module without firmware will be unable to drive those devices.
Firmware is code is often used by devices directly.
The processors on a device typically execute the firmware code.
However, some firmware is intended for execution
on the central processing units, or CPUs.

Updating the ROM BIOS of a main board to a newer version
involves flashing the static RAMs with a newer firmware image.
Flashing creates a copy of data onto a memory device.
Static RAMs retain their data without power.
Most of the RAM on a computer requires a constant
regulated amount of electrical power.
Otherwise RAM contents decay and become corrupt.
Retrieval of contents from RAM that has corrupted
differs from what was originally stored there.
RAM corruption typically causes a computer to halt.
Modern computers typically do not suffer RAM corruption
unless one of the RAM modules is defective.
A RAM module is a physical device.
A kernel module is a file.

Mounting joins the additional file systems
with the current directory hierarchy.
A directory hierarchy is the method by which
directories are linked to each other.
It can be imagined as an upside down triangle
where the root exists at the bottom.

Mount points are directories.
A mount point can be a directory that is empty.
When a file system is mounted on a directory
then the contents of the directory become occluded.
Instead the content of the attached file system
is displayed in the directory where it was mounted.

Before a root file system is mounted
/+/base/ is merely an empty directory.
After mounting /+/base/ displays a root file system.
During booting only mounts are performed.
During shutdown and reboot all file systems are unmounted.

After root file systems are mounted
then booting continues by executing some software
chrooted within the root file system.
chrooting allows for the file system
at a given portion of a hierarchy
to appear as if it's position
is the root of the hierarchy.
chroot is short for change root.

Before chrooting a root file system appears at /+/base/.
After chrooting into /+/base/
then that same root file system appears at /
After chrooting the file system formerly mounted at /
becomes occluded from view.
Therefore, chrooting into the root file system
obscures the view of the file system provided on the rootfs.

Soon after mounting root file systems
and doing chrooted execution of programs then sysinit ends.
Run level execution begins entirely chrooted
within a root file system.

Run level begins execution of programs
that are appropriate for the run level.
In addition such programs usually exist
only on the root file system.
Programs that execute during run level
do not have their files provided on the rootfs.
Therefore, such programs can not begin execution
until after root file systems are mounted.
Some exceptions to that rule exist.
The rootfs typically contains many small utility programs
that are executed both during sysinit and run level.

The description for each run level is explained in
/etc/inittab
/etc/inittab is the configuration file
for the init process which runs as process 1.
The selection of software that executes during run level
depends upon the default run level,
and the software installed in the root file system.

The run level is typically where
graphical login programs begin execution.
Web servers, and email servers also begin
execution during the run level.

When the run level begins logind starts.
logind provides prompts to run the login program
on Linux virtual consoles.
Each root file system can receive
it's own login prompt on a virtual console.

login of a user account typically begins
execution of an interactive BASH shell.
However, any software can be selected
to run in place of a shell.

The point at which the run level completes execution
is typically considered to be the end of booting.
However, from a user's perspective
the moment after the user completes
a login on a graphical user interface
and receive a fully functional desktop environment
might be considered the completion of booting.

Connecting the steps of booting resembles:
POST -> MBR -> boot block -> boot loader -> Linux -> /init ->
/sbin/init  -> sysinit    -> run level    -> login

The above diagram is not applicable to all POSIX.
As a generalization the above diagram
is a commonly occurring pattern.

While in a pre-deployed state
the rootfs is also acting as a root file system.
Consequently, login happens on the rootfs
rather than the root file system.
And also the amount of RAM used during booting
is far greater during pre-deployment than post deployment.

The purpose of deployment
is to transfer the operating system
from an installation media
to file systems on one or more mass storage devices.
Deployment grants additional file system space.
That space can be used
for installing additional software projects.
The current manifest of installed software projects
is suitable for the task of deployment
and repair of previous deployments.
This limited manifest of software is sometimes called
a foundation or a skeletal system.

The cold powered off state of a computer
is something like puzzle pieces scattered in a box.
One or more mass storage devices
are containers for data or essential a box for data.
The puzzle pieces are software components or files.
RAM is similar to an available portion of a table.

Booting is similar to the act of connecting
the puzzle pieces on the table.
When a computer boots the software components
are loaded from a mass storage device
into RAM and then meaningfully connected.
The result is the creation of
a perfectly performing POSIX.
A perfectly performing POSIX is like the
pretty picture that becomes the reward
for successfully assembling a puzzle.

After sufficient POSIX argot is assimilated
then the precise steps of booting
can be understood as explained in this document.
Until that moment where the concepts snap perfectly into place
remember that booting is the method of loading software
from a mass storage device and
meaningfully connecting the software components together in RAM.
Booting is the performance art of a POSIX.
