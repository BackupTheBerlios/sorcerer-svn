/usr/src/linux/Documentation/filesystems/ramfs-rootfs-initramfs.txt

Please read the aforementioned document.

Each root file system acts like an individual computer.
Each root file system is granted a VETH, virtual ethernet device.
Each root file system's VETH is granted one or more IP addresses.

The rootfs acts like a firewall/router.
The rootfs controls how the network
can connect to each root file system.
Unless explicitly firewalled
then processes on each root file system
can connect to the network in an unlimited fashion.

The rootfs is mounted on /
The rootfs can not be unmounted.
Each root file system is mounted on
an immediate subdirectory of /+/

Rootfs differs from a root file system.
Rootfs is not backed by a media storage device.
Rootfs is backed by swap.
Rootfs content is lost during reboot and shutdown.
Rootfs is a generated file system.
Rootfs is populated by content from compressed cpio archives.
Cpio archives are typically generated
from content provided on the /+/base/ root file system.

The cpio archives are also called initramfs,
"initial random access file system."
Not all cpio archives are initramfs.
Cpio archives used during booting are initramfs.

cpio is the format selected
for storing then providing file system content.
Kernel hackers selected cpio
instead of the more popular tar format.

One root file systems is delegated the duty
of generating the initramfs files.
/+/base/             is typical mount point.
/+/base/boot/initrf/ is where the initramfs files are stored.
/+/base/boot/        is frequently an ext2 file system
                     on a dedicated 1 gigabyte partition.
/+/base/boot/        as a dedicated file system allows
/+/base/             to be on any Linux supported file system.

The boot loader loads files into RAM, random access memory.
The kernel loads first followed by cpio files.
The loaded files are compressed to expedite loading.

Linux decompresses itself.
Linux decompresses the cpio files.
Linux mounts rootfs on /
Linux transfers the decompressed content
from decompressed initramfs to the rootfs.

Rootfs is a file system.
Rootfs suffices for booting, trouble shooting,
networking, and running special services such as
a DNS resolution process and a network time process.
Rootfs is not a root file system.
Rootfs receives only a subset of the files
installed on a root file system.

Rootfs appears to be mounted as /
to processes running on the rootfs.
A root file system appears to be mounted as /
to processes running on a root file system
such as the root file system mounted on /+/base/

Each root file system runs nearly independently.
Each root file system is like a virtual computer.
Each root file system requires less resources than a virtual computer.
The rootfs's role become similar to a host computer or a hypervisor.

Rootfs receives the actual networking devices.
Root file systems receive only one part of a VETH pair.
VETH is a virtual Ethernet adapter.
A VETH pair provides a tunnel.
Each VETH adapter receives it's own IP address.
A VETH pair acts like a tunnel.
Rootfs acts like a firewall/router for all root file systems.

Only one root file system is obliged
to create the Linux kernel, Linux modules,
firmware, and initramfs.
That root file system will provide directories:
/boot/ /lib/firmware/ /lib/modules/
Other root file systems are not obliged
to provide /boot/ /lib/firmware/ /lib/modules/

/+/base/ manifest of installed software
can be limited to the role of updating
and generating the Linux kernel,
generating Linux modules,
and generating the initramfs.

/+/work/ manifest of installed software
can be limited to the role of updating
and providing workstation software.
Delegation of roles allows for concise
manifests of installed software.
Each root file system retains autonomy.

/+/base/ can provide additional boons.
/+/base/ can be copied to a 2G or larger size USB SSD.
The USB SSD can then be used for deployment and rescue.

/+/base/aux/{can,run}/can be excluded to conserve space.
However, if still too large a repair only USB SSD can be generated.
/+/base/boot/ provides sufficient content
for booting and repairing.
A 256M size USB SSD would suffice.

The downloadable DI, Deployment Image, is specially crafted.
It provides all the content expected for /+/base/
Yet the DI is highly compressed
to reduce the download size by a magnitude.
Creating a compact I/R require considerable testing.
In contrast a bootable USB SSD generated from /+/base/
performs nearly the same as /+/base/
Files /aux/set/etc/{realfs,rootfs}/etc/{fstab,hostname} must differ

Configuration files are stored in /etc/
Configuration files used for a root file system
have the exact same name as the configuration files used on the rootfs.
However, files with different content and the same name;
can not coexist within the same directory.
Therefore, conflicting files must exist in different directories.

The rootfs inherits the /etc/ of it's progenitor root file system.
Therefore, before sysinit begins the content of
/etc/ and /+/base/etc do not differ.
However, early within sysinit the content from
/aux/set/rootfs/etc/ is copied to /etc/
Therefore, a file such as /aux/set/rootfs/etc/fstab overwrites /etc/fstab
In that fashion the rootfs receives a custom fstab file.
The rootfs can also have a custom password file.
That file would be /+/base/aux/set/rootfs/etc/shadow
During sysinit /aux/set/rootfs/etc/shadow overwrites /etc/shadow
And that allows different passwords for accounts.

/etc/ is the historical location for storing configuration files.
The path and name of several configuration files are hard coded.
Adjustment is not easily accomplished.
Therefore, /aux/set/rootfs/etc/ provides a simple method
for providing configuration files intended for use on the rootfs.

The components of path names should already be understood.
However, subtle confusion might yet exist.
/ is a separator.
However, a leading / is special.
A path that begins with slash is called absolute.
A path that begins any other way is called relative.

The leading slash of a path has a special name.
Unlike the other slashes the leading slash is called the root
/
The above is often referred to as root.
This differs from the root account's home directory.
The root account's home directory is often /root/
The compounded uses of the word root create cause for confusion.
Fortunately, the distinction become more apparent with experience.

The slash is a path name separator.
Anything in front of a slash is necessarily
a directory or a symbolic link to a directory.
Anything following a slash could be nearly anything.
Ending a path with a slash eases confusion
by implying that the end point is either
a directory or a symbolic link to a directory.

POSIX, means portable operating system for UNIX.
A POSIX is an operating system that is sufficiently compatible with UNIX
such that software intended to run on UNIX can be run on a POSIX
with little or no modification to the software project's source code
prior to compilation and linking.

Rootfs exists on all Linux based POSIX.
Most single-root POSIX empty the rootfs
and then chroot into the single root file system.
The rootfs then becomes completely inaccessible.

However, on a multi-root POSIX
the rootfs exists at all times.
Yet the rootfs is also occluded to processes
running within a root file system.
What appears to be mounted as /
differs depending upon where a process runs.

When discussing locations on a root file system
then an absolute paths might be relative
to the root file system rather than
specifying a location on the rootfs.
When editing the file /etc/hostname
located on the /+/base/ root file system
then the appearance of that file
when logged into the rootfs is
/+/base/etc/hostname
However, when logged into /+/base/ the file appears at
/etc/hostname
While the rootfs may initially seem confusing SA quickly acclimates.

After successful deployment and a reboot
then logging into root file systems becomes possible.
During deployment the object is to create root file systems.

When /etc/hostname and /aux/set/rootfs/etc/hostname
contain proper content
then the login location is accurately presented
as part of the prompt.

Before completing this document
Please answer 3 questions.
What  is  the rootfs?
Where is  the rootfs?
Where was the rootfs generated?
This document provides the answer to those 3 questions.
If confusion persists then please re-read this document
along with the document suggested in the beginning.

Lastly, remember that rootfs != root file system.
rootfs is read exactly as rootfs.
Realizing that the word rootfs is shorter than "root file system,"
can remind that the rootfs provides only a subset of the files
that are provided on a root file system.

The word rootfs and the phrase root file system appear frequently.
Mastering the distinction avoids bewilderment.

Evert Vorster expressed concern that the words
rootfs and root file system would be
easily erronously assumed synonymous.
They differ as explained above.

A root file system is real
in the sense that the file system exists on a real device.
That device is expected to retain content across boots.
Consequently, most instances of the phrase "root file system"
in following documents are replaced with the phrase
"real file system."
