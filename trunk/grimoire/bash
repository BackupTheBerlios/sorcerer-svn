# Compiling with lto produces smaller, but slower bash

with info    good 20131124
with info    last 20130307
with version stable 4.2.045 4.2.042
with base    readline
with also    --without-libiconv-prefix --without-libintl-prefix
with role    development/interpreter utility/shell
with trait   console makej optimize solo
with source  stable ftp://ftp.cwru.edu/pub/bash/ ftp://ftp.gnu.org/pub/gnu/bash/ bash-${VERSION:0:3}.tar.gz

case $VERSION in
 4.2.*) local l
    for (( l = 1; l < 10; l++ ))
    do with source ftp://ftp.cwru.edu/pub/bash/bash-${VERSION:0:3}-patches/bash42-00$l
    done
    for (( l = 10; l <= ${VERSION:5:2}; l++ ))
    do with source ftp://ftp.cwru.edu/pub/bash/bash-${VERSION:0:3}-patches/bash42-0$l
    done
 ;;
esac
with info    home http://cnswww.cns.cwru.edu/~chet/bash/bashtop.html
with info    docs http://tiswww.case.edu/php/chet/bash/bashref.html
with shbin   /bin/bash /bin/sh
with protect /bin/bash
with protect /bin/sh
with omit    /etc/shells
with info    freecode gnubash
with info    cite 'the bourne again shell
Bash is an sh-compatible shell that incorporates useful
features from the Korn shell (ksh) and C shell (csh).
It is intended to conform to the
IEEE POSIX P1003.2/ISO 9945.2 Shell and Tools standard.
It offers functional improvements over sh for both
programming and interactive use; these include command
line editing, unlimited size command history, job control,
shell functions and aliases, indexed arrays of unlimited size,
/and integer arithmetic in any base from two to sixty-four.
In addition, most sh scripts can be run by Bash without modification.'


build(){
 install_loadables(){
  install -vm 755 -d "$DESTDIR"/usr/libexec/bash/
  cd  examples/loadables
  for FILE in *.c
  do  make             ${FILE%.c}
      install -vsm 755 ${FILE%.c} "$DESTDIR"/usr/libexec/bash/
  done
  true
 }

 install_etc(){
  install -vm 755 -d                           "$DESTDIR"/etc/skel/
  install -vm 644 "$SCRIPT_DIR"/profile        "$DESTDIR"/etc/
  install -vm 644 "$SCRIPT_DIR"/profile        "$DESTDIR"/etc/skel/.bashrc
  install -vm 644 "$SCRIPT_DIR"/profile        "$DESTDIR"/etc/skel/.bash_profile
  install -vm 644 "$SCRIPT_DIR"/logout         "$DESTDIR"/etc/skel/.bash_logout
  install -vm 755 -d                           "$DESTDIR"/etc/bash.d/
  install -vm 755 "$SCRIPT_DIR"/bash.d/default "$DESTDIR"/etc/bash.d/
 }

# cast automatically patches it.
# CX=1
# while [[ -n  ${SOURCE[$CX]} ]]; do
#  patch -p0 < ${SOURCE[$CX]}
#  (( CX++ ))
# done

 if    [ "$HOSTTYPE" == x86_64 ]
 then  BUILD="$MACHTYPE"
 elif  [ -f "$CURRENT_LOGS"/deployment-docent ] ||
       [ -f "$CURRENT_LOGS"/sorcerer-iso9660  ]
 then  BUILD="i486-${MACHTYPE#*-}"
 else  BUILD="$MACHTYPE"
 fi

 case $BUILD in
  *-uclibc) grep -q        uclibc    support/config.sub ||
            sed  -i "s:gnu:uclibc:g" support/config.sub ;;
 esac

 case $HOSTTYPE in
  x86_64) sed -i 's:rl_prefix}/lib$:rl_prefix}/lib64:' configure ;;
 esac

 ./configure               \
 --build="$BUILD"          \
 --prefix=/usr             \
 --bindir=/bin             \
 --with-installed-readline \
 --with-curses             \
 $OPTS                     &&
 make                      &&
 make install DESTDIR="$DESTDIR" &&
 ln -sf bash  "$DESTDIR"/bin/sh  &&
 install_loadables &&
 install_etc
}

current(){
 case $VERSION in
  4.2.045) if   !  [ bash == "$( readlink /bin/sh )" ]
           then rm -f /bin/sh; ln -s bash /bin/sh
           fi
           xz -cd "$POST_LOGS"/bash | grep -q "^l${TAB}sh${TAB}bash$" ;;
 esac
}
