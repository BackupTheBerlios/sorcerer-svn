   VERSION=( "thaumaturgy-20061128-0" "thaumaturgy-20061122-0" "thaumaturgy-20061115-4" "thaumaturgy-20061114-3" "thaumaturgy-20061113-4" "thaumaturgy-20061103-0" "thaumaturgy-20061102-0" "thaumaturgy-20061031-0" "thaumaturgy-20061025-0" "thaumaturgy-20061024-0" "thaumaturgy-20061021-0" "thaumaturgy-20061019-0" "thaumaturgy-20061018-0" "thaumaturgy-20061016-0" "thaumaturgy-20061015-0" "thaumaturgy-20061013-0" "thaumaturgy-20061012-1" "thaumaturgy-20061011-0" "thaumaturgy-20061006-0" "thaumaturgy-20061005-0" "thaumaturgy-20061001-2" "thaumaturgy-20060929-0" "thaumaturgy-20060928-0" "thaumaturgy-20060926-0" "thaumaturgy-20060925-0" "thaumaturgy-20060924-0" "thaumaturgy-20060920-1" "thaumaturgy-20060919-2" "thaumaturgy-20060917-0" "thaumaturgy-20060912-0" "thaumaturgy-20060911-0" "thaumaturgy-20060910-0" "thaumaturgy-20060909-0" "thaumaturgy-20060908-3" "thaumaturgy-20060906-2" "thaumaturgy-20060905-1" "thaumaturgy-20060904-0" "thaumaturgy-20060828-0" "thaumaturgy-20060821-4" "thaumaturgy-20060801-0" "thaumaturgy-20060731-1" "thaumaturgy-20060724-0" "thaumaturgy-20060723-0" "thaumaturgy-20060719-0" "thaumaturgy-20060717-1" "thaumaturgy-20060713-0" "thaumaturgy-20060707-0" "thaumaturgy-20060706-1" "thaumaturgy-20060705-1" "thaumaturgy-20060629-0" "thaumaturgy-20060628-0" "thaumaturgy-20060625-0" "thaumaturgy-20060624-1" "thaumaturgy-20060620-0" "thaumaturgy-20060618-0" "thaumaturgy-20060617-0" "thaumaturgy-20060608-0" "thaumaturgy-20060607-2" "thaumaturgy-20060601-0" )
  CATEGORY="utility"
 ATTRIBUTE="noheal solo sorcery"
    SOURCE="sorcery-$VERSION.tar.bz2"
  HOMEPAGE="http://sorcerer.silverice.org/"
       URL="http://sorcerer.silverice.org/download/sorcery/"
  disable  archive
#            "openntpd:::to keep system time accurate using network time servers"
       REQ=( "bash bzip2 ccache coreutils curl dialog diffutils file findutils gcc grep grimoire gzip init-functions less make mktemp p7zip patch rpmunpack sed tar which"
             "sdelta3:::for downloading source upgrade patches"
             "strace:::for tracking installed software on architecture that are not alpha, ia32, and x86_64"  )
#            "aexpl-db:::for scanning unpacked sources for suspicious files"
   EXCLUDE="$SOURCE_DIR
            /etc/sorcery/local.config
            /home
            /proc
            /root
            /tmp
            /var/cache
            /var/lock
            /var/run
            /var/spool
            /var/state
            /var/tmp"
   PROTECT="/dev
            /etc/sorcery/config
            /etc/sorcery/dialogrc
            /etc/sorcery/log/history
            /etc/sorcery/log/snap
            /usr/libexec/sorcery/augur
            /usr/libexec/sorcery/cast
            /usr/libexec/sorcery/dispel
            /usr/libexec/sorcery/immune
            /usr/libexec/sorcery/leech
            /usr/libexec/sorcery/sentinel
            /usr/libexec/sorcery/share
            /usr/libexec/sorcery/sorcery
            /usr/sbin/augur
            /usr/sbin/cast
            /usr/sbin/dispel
            /usr/sbin/immune
            /usr/sbin/leech
            /usr/sbin/sorcery"
  ESTIMATE="20"
      DESC="sorcery contains source management tools.
augur    -  provides detailed information about the box
cast     -  installs spells
dispel   -  removes installed spells
heal     -  checks and repairs installed spells
leech    -  downloads sources for spells
sorcery  -  menu driven source manager"

build() {
  [  -x   install  ]   &&
  prepare_install      &&
  ./install  $VERSION  &&
  install  -m 0700  $SCRIPT_DIR/init.d/immune  /etc/init.d
}


post_install() {

  install_sentinel()  {
    local           SENTINEL=/usr/libexec/sorcery/sentinel
    local                     ARCH=$( uname -m )
    if    [    -x  $SENTINEL-$ARCH  ]
    then  cmp  -s  $SENTINEL-$ARCH  $SENTINEL  ||
          cp       $SENTINEL-$ARCH  $SENTINEL
    fi
  }


  linux_headers_check()  {
    if    !  [  -f  /usr/include/asm-generic/errno.h  ];  then
      echo        "Attempting to install some missing linux headers"
      leech  -w   glibc
      cd          $(  untar  $SOURCE_CACHE/glibc/*/linux-*.tar*  )/linux*  &&
      make        include/linux/version.h  &&
      make        include/asm  &&
      cp     -rL  include/{asm,asm-generic,linux}  /usr/include
    fi
  }


  rebuild_ldd_logs()  {
    if    [  -n  "$LDD_LOGS"  ]  &&
          grep  -q  "/lib/ld-linux.so.2\|/lib64/ld-linux-x86-64.so.2"  $LDD_LOGS/bash;  then
      (  .  /etc/sorcery/config
         echo  "Rebuilding ldd logs.  Please be patient."
         mkdir  -p  ${LDD_LOGS}.new
         show_installed  |
         while  read
         do     show_ldd_of  "$REPLY"  >  ${LDD_LOGS}.new/$REPLY
         done
         mv       ${LDD_LOGS}      ${LDD_LOGS}.old
         mv       ${LDD_LOGS}.new  ${LDD_LOGS}
         rm  -fr  ${LDD_LOGS}.old
      )
    fi
  }


  remove_necropolis()  {
    if    [   -d   ${NECROPOLIS_CACHE:=/var/cache/necropolis}  ]
    then  rm  -fr  ${NECROPOLIS_CACHE}
          echo    "${NECROPILIS_CACHE} was removed."
          echo    "${NECROPOLIS_CACHE} is no longer used."
    fi
    if    [   -d   ${MORGUE_CACHE:=/var/cache/morgue}  ]
    then  rm  -fr  ${MORGUE_CACHE}
          echo    "${NECROPILIS_CACHE} was removed."
          echo    "${MORGUE_CACHE} is no longer used."
    fi

    local  REZ=$EVENT_LOGS/Resurrection
    local  RES=$EVENT_LOGS/Restore

    if    [  -d  $REZ          ];  then
      mkdir  -p          $RES
      mv         $REZ/*  $RES
      rmdir      $REZ  2>/dev/null
    fi
  }


  [  -d  /lib.old  ]  ||  backup_lib
  install_sentinel
  linux_headers_check
  rebuild_ldd_logs
  remove_necropolis
  sleep  1
  /usr/sbin/immune
  sleep  1
}
