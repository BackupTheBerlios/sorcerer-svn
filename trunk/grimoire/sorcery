   VERSION=( "celerity-20051122-1" "celerity-20051119-1" "celerity-20051117-0" "celerity-20051111-0" "celerity-20051109-0" "celerity-20051107-1" "celerity-20051104-0" "celerity-20051103-0" "celerity-20051102-0" "celerity-20051030-3" "celerity-20051026-0" "celerity-20051024-0" "celerity-20051022-0" )
  CATEGORY="utility"
 ATTRIBUTE="core noheal solo sorcery"
    SOURCE="sorcery-$VERSION.tar.bz2"
  HOMEPAGE="http://sorcerer.aakin.net"
       URL="http://sorcerer.aakin.net/download/sorcery"
  disable  archive
  disable  necropolis
     AVOID="mhash ncurses openssl pkgconfig zlib"
       REQ=( "bash bzip2 ccache coreutils curl dialog diffutils file findutils gcc grep grimoire gzip init-functions less make mktemp p7zip patch rpmunpack screen sed tar"
             "aexpl-db:::for scanning unpacked sources for suspicious files"
             "openntpd:::to keep system time accurate using network time servers"
             "sdelta3:::for downloading source upgrade patches"
             "strace:::for tracking installed software on architecture that are not alpha, ia32, and x86_64"  )
   EXCLUDE="/home
            /proc
            /root
            /tmp
            /usr/src
            /var/cache
            /var/lock
            /var/run
            /var/spool
            /var/state
            /var/tmp"
   PROTECT="/dev
            /etc/sorcery/local.config
            /usr/libexec/sentinel
            /usr/libexec/sentinel-alpha
            /usr/libexec/sentinel-i586
            /usr/libexec/sentinel-i686
            /usr/libexec/sentinel-x86_64
            /var/log/sorcery/history
            /var/log/sorcery/snap"
      DESC="sorcery contains source management tools.
augur    -  provides detailed information about the box
cast     -  installs spells
dispel   -  removes installed spells
heal     -  checks and repairs installed spells
leech    -  downloads sources for spells
sorcery  -  menu driven source manager"

build() {
 sym_sentinel_check()  {
  if    [  -e  $SENTINEL  ]  &&
   [  -h  $SENTINEL  ]
  then  echo  "$SENTINEL must not be a symbolic link!"
   echo  "Please correct this first and then recast $BSPELL"
   false
  fi
 }


 sym_sentinel_check  &&
 [  -x   install  ]  &&
 prepare_install     &&
 ./install  $VERSION
}

post_install() {

 clean_provide_logs()  {
  export  IFS="$STANDARD_IFS"
  grep  -r  ""     $PROVIDE_LOGS  |
  basenames                       |
  tr  ':'  ' '                    |
  while  read  LEFT  RIGHT;  do
   if    [  "$LEFT"  ==       "$RIGHT"  ]
   then  rm  -f   $PROVIDE_LOGS/$RIGHT
   fi
  done
  grep   -rl  ","  $PROVIDE_LOGS  |  xargs  -l64   rm  -f
 }


 clean_opt_logs()  {
  find  $OPT_ON_LOGS  $OPT_OFF_LOGS  -follow  -type f  -empty  |
  xargs  -l64  rm  -f
 }


 switch_delta() {
  if    enabled  "xdelta"  ${FEATURE[*]};  then
   sed  -i  "s:xdelta:sdelta:"  $OPT_ON_LOGS/sorcery  $LOCAL_CONFIG
   unlock_cast
   cast  sdelta
  fi
 }

 switch_var_tmp() {
  if      [ -h           /var/tmp                ];  then
    if    [ "$( readlink /var/tmp )" ==   "/tmp" ]  ||
          [ "$( readlink /var/tmp )" == "../tmp" ]
    then
      rm     -f   /var/tmp
      rm     -rf  "/usr/src/sorcery.failed"  \
                  "/var/cache/leech"         \
                  "/var/cache/uncompressed"  &
    fi
  fi
  mkdir  -p       /var/tmp
  chmod  1777     /var/tmp
 }

 init_bg_compress()  {
  if       [  -n  "$COMPRESS_LINKS"  ]  &&
   !  [  -d  "$COMPRESS_LINKS"  ];  then
   mkdir     -p  "$COMPRESS_LINKS"
   find  $SOURCE_CACHE      \
   $CCACHE_CACHE      \
   $ARCHIVE_CACHE     \
   $NECROPOLIS_CACHE  \
   -follow  -type f  -name \*.tar  |
   xargs  -l32  --replace={}  ln  -s  {}  $COMPRESS_LINKS
  fi
 }

  fix_provide_logs()  {
    find   $PROVIDE_LOGS  -type f  |
    grep        " "                |  xargs  --no-run-if-empty  -l16  rm  -f
    grep   -rl  " "  $PROVIDE_LOGS |  xargs  --no-run-if-empty  -l64  rm  -f
  }


  fix_service_selection()  {

    on_service()  {
      grep  -rs  "SERVICES="  $CONFIG_LOGS  |
      sed   "s,/sorcery:SERVICES=, ,
             s,/sorcery.old:SERVICES=, ,"   |
      basenames  |  tr  -d '"'
    }

    show_svs()  {
      grep  -rs  "^service "  $GRIMOIRE/$1.d/xinetd.d  |
      cut   -d ' '  -f2
    }

    if  !  [  -d  ${XINETD_ON_LOGS:=$LOG_DIR/xinetd.on}    ]  ||
        !  [  -d  ${XINETD_OFF_LOGS:=$LOG_DIR/xinetd.off}  ]
    then
      mkdir   -p  ${XINETD_OFF_LOGS}  ${XINETD_ON_LOGS}

      on_service  |
      while  read    SPL      SVS;  do
        for          S  in   $SVS
        do   echo  "$S"  >>  $XINETD_ON_LOGS/$SPL
        done
      done

      on_service  |
      while  read  SPL  SVS;  do
        show_svs  $SPL  |
        while  read          S
        do     grep  -qsx  "$S"       $XINETD_ON_LOGS/$SPL  ||
               echo        "$S"  >>  $XINETD_OFF_LOGS/$SPL
        done
      done
    fi
  }


  fix_state()  {
    if    [  -d     /var/state/sorcery  ]  &&
        ! [  -h     /var/state/sorcery  ]
    then
      grep   -q    "/var/state/sorcery"                  /etc/fstab  &&
      sed    -i  "s:/var/state/sorcery:/root/.sorcery:"  /etc/fstab
      umount        /var/state/sorcery
      rm     -fr    /var/state/sorcery
    fi
  }


  reduce_etc()  {
    if    [  -d    $ETC_LOGS/sorcery/default-previous  ]
    then  rm  -fr  $ETC_LOGS/*/default-previous
    fi
  }  


  ARCH=$( uname -m )

  if    [  -x  $SENTINEL-$ARCH  ]
  then  cp     $SENTINEL-$ARCH  $SENTINEL
  fi

  [  -d  /lib.old  ]  ||  backup_lib

  switch_var_tmp
  clean_provide_logs
  clean_opt_logs
  switch_delta
  generate_index
  fix_service_selection
  fix_provide_logs
  reduce_etc
  fix_state
  immune
}
