   VERSION=( "celerity-20050513-0" "celerity-20050407-0" "celerity-20050323-0" "celerity-20050312-0" "celerity-20050311-0" "celerity-20050308-0" "celerity-20050306-0" "celerity-20050305-0" "celerity-20050304-0" "celerity-20050302-0" "celerity-20050223-0" )
  CATEGORY="utility"
 ATTRIBUTE="core noheal solo sorcery"
    SOURCE="sorcery-$VERSION.tar.bz2"
  HOMEPAGE="http://sorcerer.wox.org"
       URL="http://sorcerer.wox.org/download/sorcery
             ftp://distro.ibiblio.org/pub/linux/distributions/sorcerer/sorcery"
  disable  archive
  disable  necropolis
     AVOID="mhash ncurses openssl pkgconfig zlib"
       REQ=( "bzip2 ccache coreutils curl dialog diffutils file findutils gcc grep grimoire gzip make p7zip patch rpmunpack screen sdelta sed tar"
             "aexpl-db:::for scanning unpacked sources for suspicious files"
             "strace:::for tracking installed software on architecture that are not alpha, ia32, and x86_64"  )
   EXCLUDE="/home
            /proc
            /root
            /usr/src
            /var/cache
            /var/lock
            /var/run
            /var/spool
            /var/state
            /var/tmp"
   PROTECT="/dev
            /etc/sorcery/local.config
            /usr/libexec/sentinel
            /usr/libexec/sentinel-i586
            /usr/libexec/sentinel-i686
            /usr/libexec/sentinel-alpha
            /var/log/sorcery/history
            /var/log/sorcery/snap"
      DESC="sorcery contains source management tools.
augur    -  provides detailed information about the box
cast     -  installs spells
dispel   -  removes installed spells
heal     -  checks and repairs installed spells
leech    -  downloads sources for spells
sorcery  -  menu driven source manager"

build() {
 sym_sentinel_check()  {
  if    [  -e  $SENTINEL  ]  &&
   [  -h  $SENTINEL  ]
  then  echo  "$SENTINEL must not be a symbolic link!"
   echo  "Please correct this first and then recast $BSPELL"
   false
  fi
 }


 sym_sentinel_check  &&
 [  -x   install  ]  &&
 prepare_install     &&
 ./install  $VERSION
}

post_install() {
 default_post_install
 clean_provide_logs()  {
  export  IFS="$STANDARD_IFS"
  grep  -r  ""     $PROVIDE_LOGS  |
  basenames                       |
  tr  ':'  ' '                    |
  while  read  LEFT  RIGHT;  do
   if    [  "$LEFT"  ==       "$RIGHT"  ]
   then  rm  -f   $PROVIDE_LOGS/$RIGHT
   fi
  done
  grep   -rl  ","  $PROVIDE_LOGS  |  xargs  -l64   rm  -f
 }


 clean_opt_logs()  {
  find  $OPT_ON_LOGS  $OPT_OFF_LOGS  -follow  -type f  -empty  |
  xargs  -l64  rm  -f
 }


 switch_delta() {
  if    enabled  "xdelta"  ${FEATURE[*]};  then
   sed  -i  "s:xdelta:sdelta:"  $OPT_ON_LOGS/sorcery  $LOCAL_CONFIG
   unlock_cast
   cast  sdelta
  fi
 }


 init_bg_compress()  {
  if       [  -n  "$COMPRESS_LINKS"  ]  &&
   !  [  -d  "$COMPRESS_LINKS"  ];  then
   mkdir     -p  "$COMPRESS_LINKS"
   find  $SOURCE_CACHE      \
   $CCACHE_CACHE      \
   $ARCHIVE_CACHE     \
   $NECROPOLIS_CACHE  \
   -follow  -type f  -name \*.tar  |
   xargs  -l32  --replace={}  ln  -s  {}  $COMPRESS_LINKS
  fi
 }


 ARCH=$( uname -m )

 if    [  -x  $SENTINEL-$ARCH  ]
 then  cp     $SENTINEL-$ARCH  $SENTINEL
 fi

 [  -d  /lib.old  ]  ||  backup_lib

 init_bg_compress
 clean_provide_logs
 clean_opt_logs
 switch_delta
 generate_index
 immune
}

