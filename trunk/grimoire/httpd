    stable 2.2.14 2.2.13 2.2.12 2.2.11 2.2.10 2.2.9 2.2.8
  unstable 2.3.5
    secure 2.2.10
      opts --with-apr=/usr/bin --with-apr-util=/usr/bin
   require Python apr-util
  optional openssl    --enable-ssl       --disable-ssl     for https enabled server
  optional expat      ''                 ''                for fast non-validating stream-oriented XML parsing 
  optional db         --with-berkeley-db --without-berkeley-db for berkeley database support
  optional gdbm       --with-gdbm        --without-gdbm    for gdbm database support
  optional mysql      --with-mysql       --without-mysql   for mysql database support
  optional openldap   '--with-ldap --enable-ldap -enable-auth-ldap' '' to enable LDAP support
  optional postgresql --with-pgsql       --without-pgsql   for postgresql database support
  optional sqlite     --with-sqlite3     --without-sqlite3 for sqlite database support
  category network/web
 attribute console server
       url $APACHE_URL
    source httpd/httpd-$VERSION.tar.gz
  homepage http://httpd.apache.org
   protect /etc/httpd
   protect /usr/share/httpd/htdocs
   protect /usr/share/httpd/error
  eprovide web-server
 freshmeat apache
  estimate 2000
      desc 'httpd is a popular HTTP server.'

configure(){
query_dialog(){
 qd_help(){
  if [ -n "$4" ]; then
   dialog --backtitle "$BACKT" --stdout --timeout "$PROMPT_DELAY" \
          --msgbox "$( long_desc "$4" )" 0 0
  fi
  query_dialog "$@"
 }
              
 local ASK BACKT RESPONSE DEFAULT FTS FAS

 if   [ -n "$SPELL" ]
 then BACKT="Spell:  $SPELL"
 fi

 ASK="$( echo "$1" |
         sed "s:\\\e\[.m::g
              s:\\\e\[..m::g" )"

 case "$2" in
  y|Y) DEFAULT=Yes ;;
  n|N) DEFAULT=No  ;;
 esac

 if [ -n "$3" ]; then

   FTS="as optional requirement for this spell"
   FAS="as optional requirement for all spells"

   RESPONSE=$(
    dialog --backtitle "$BACKT" --stdout --timeout "$PROMPT_DELAY" \
           --default-item "$DEFAULT" --help-button --no-cancel     \
           --item-help --menu "$ASK" 0 0 0 \
           Yes    "" "Yes $FTS" \
           No     "" "No  $FTS" \
           Always "" "Yes $FAS" \
           Never  "" "No  $FAS" )
   case $RESPONSE in
    Always|Never) STRONG="true"  ;;
               *) STRONG="false" ;;
   esac
  else

   RESPONSE=$(
    dialog --stdout --timeout "$PROMPT_DELAY"  \
           --default-item "$DEFAULT" --item-help \
           --no-cancel --menu "$ASK" 0 0 0 \
           Yes "" "Yes Please" \
           No  "" "No  Thanks" )
 fi
 clear
 case ${RESPONSE:=$2} in
  No|Never|n|N|f|F|m|M) false        ;;
    Yes|Always|y|Y|j|J) true         ;;
                *HELP*) qd_help "$@" ;;
                     *) true         ;;
 esac
}


query(){ query_dialog "$@"; }

 [ -f                                $SPELL_CONFIG ] ||
 touch                               $SPELL_CONFIG
 if !  grep -q "APACHE_SSL"          $SPELL_CONFIG; then
  if   query   "do you want to perform semi-auto httpd ssl configuration?" n
  then echo    "APACHE_SSL=true"  >> $SPELL_CONFIG
  else echo    "APACHE_SSL=false" >> $SPELL_CONFIG
  fi
 fi
}

build(){
 finish_install(){
  mkdir -p /usr/share/httpd/cgi-bin.ssl
  mkdir -p /usr/share/httpd/htdocs.ssl
  mkdir -p /usr/share/httpd/logs
  mkdir -p /var/lib/httpd/run
 }

 fix_ssl_conf(){

  cd docs/conf

  SR="@@ServerRoot@@"
  CONF="/etc/httpd"
  CGI="/usr/share/httpd/cgi-bin.ssl"
  HTDOCS="/usr/share/httpd/htdocs.ssl"
  cp ssl-std.conf ssl-std.conf.b4
  sed  "s:$SR/conf:/etc/httpd:
  s:$SR/cgi-bin:/$CGI:
  s:$SR/htdocs:$HTDOCS:
  s:logs/:/var/log/httpd:" \
  ssl-std.conf.b4  >  ssl-std.conf
  cd ../..
 }

 fix_openssl_PEM_F_DEF_CALLBACK(){
  grep  -rl "PEM_F_DEF_CALLBACK" * |
  xargs --max-lines=32             \
  sed   -i  "s:PEM_F_DEF_CALLBACK:PEM_F_PEM_DEF_CALLBACK:g"
 }

# Not using Sorcerer layout because subversion then will
# not compile with httpd installed complaining that it
# it can not find Sorcerer layout.
# cat $SCRIPT_DIR/layout     >>                 config.layout
# cat $SCRIPT_DIR/layout.apr >>      srclib/apr/config.layout
# cat $SCRIPT_DIR/layout.apr >> srclib/apr-util/config.layout

 fix_ssl_conf
 # fix_openssl_PEM_F_DEF_CALLBACK

#--enable-layout=Sorcerer \
#--with-included-apr      \
 AC="
 --enable-layout=RedHat   \
 --enable-so              \
 --enable-modules=all     \
 --enable-cache           \
 --enable-cgi             \
 --enable-deflate         \
 --enable-mime-magic      \
 --enable-proxy           \
 --enable-mods-shared=all \
 --with-mpm=worker        \
 $OPTS"

 save_apr(){
  [ -f /usr/bin/apr-1-config ] && mv /usr/bin/apr-1-config /usr/bin/apr-1-config.old
  [ -f /usr/bin/apu-1-config ] && mv /usr/bin/apu-1-config /usr/bin/apu-1-config.old
  true
 }

 restore_apr(){
  [ -f /usr/bin/apr-1-config.old ] && mv /usr/bin/apr-1-config.old /usr/bin/apr-1-config
  [ -f /usr/bin/apu-1-config.old ] && mv /usr/bin/apu-1-config.old /usr/bin/apu-1-config
  true
 }

 # export  LAYOUT="Sorcerer"


 ./buildconf     &&
 ./configure $AC &&
 make            &&
 prepare_install &&
 make    install &&
  finish_install
}

post_install(){
 self_signed_cert(){
  local SSL=SSLCertificate
  local KEY=server.key
  local CSR=server.csr
  local PEM=server.pem
  local CRT=server.crt
  local PAS=file:server.pas
  local CON=/etc/httpd
  local   O=openssl

  $O genrsa -des3         -out $KEY -passout $PAS 1024 2>&1 &&
  $O req  -new  -key $KEY -out $CSR -passin  $PAS      2>&1 &&
  $O rsa        -in  $KEY -out $PEM -passin  $PAS      2>&1 &&
  $O x509 -req  -in  $CSR -out $CRT -passin  $PAS \
          -days 1461 -signkey $KEY 2>&1 &&
  install -vDm 600 server.crt $CON/ssl.crt/server.crt &&
  install -vDm 600 server.pem $CON/ssl.key/server.pem &&
  sed     -i "s:^#$SSL:$SSL:"   $CON/ssl.conf
 }

 generate_certificates(){
  if ! grep -q "configured"      $SPELL_CONFIG; then
   if  grep -q "APACHE_SSL=true" $SPELL_CONFIG; then
    echo           $"Password must be between 4 and 8191 characters"
    read -t 600 -p $"Please enter a password for the server key: "
    if (( ${#REPLY} > 3 )); then
     touch                  server.pas
     chmod 600              server.pas
     echo "$REPLY"        > server.pas
     echo "configured=1" >> $SPELL_CONFIG
     self_signed_cert
    fi
   fi
  fi
 }

 recast(){
  PRO="$(  get_provider  "$1"   )"
  if    [ -n             "$PRO" ] &&
         spell_installed "$PRO"   &&
       ! spell_held      "$PRO"
  then
    [ -f       "$CAST_QUEUE/$PRO" ] ||
    echo com > "$CAST_QUEUE/$PRO"
  fi
 }

 default_post_install
 generate_certificates
 recast php
 recast mod_perl
}
