# Someone, perhaps Jan, should adjust this spell
# so that it is DESTDIR compliant.
# I am uncertain if anyone is still using it
# or if patches were mainlined into vanilla kernel

# report problems with this spell to Jan Merka
#
# Every kernel version has to be tested against the swsusp patch
# Do not change the version blindly
# For which kernel version are the suspend patches intended
# This can slightly lag behind the $VERSION (usually in the minor revision
# number)
  SUSP_VER=( 3.1.1.1 )
   S4K_VER=( 2.6.34 )

    stable 2.6.34.1 2.6.33.2 2.6.32 2.6.31 2.6.29.4
   require initramfs lilo tuxonice-userui
  optional laptop-mode-tools '' '' for conserving battery power on laptops
  optional module-init-tools '' '' for tools for modular kernel  
  optional hibernate-script  '' '' for a set of scripts controlling suspend
  category kernel
 attribute console
    source $KERNEL_URL pub/linux/kernel/v${VERSION:0:3}/linux-$VERSION.tar.bz2
    source http://www.tuxonice.net/downloads/all/tuxonice-${SUSP_VER}-for-${S4K_VER}.patch.bz2
#REPOSITORY=( ""
#             "git clone --depth 1 git://git.kernel.org/pub/scm/linux/kernel/git/nigelc/tuxonice-2.6.27.git linux-$VERSION"
#             "git pull" )
## Do NOT add *.bz2 or *.gz extension!
#    source linux-$VERSION.tar
  homepage http://www.tuxonice.net
   protect /boot
   protect /lib/modules
  eprovide linux-kernel
  estimate 4200
      desc '2.6.x stable kernels with hibernation.
This version is patched to provide software suspend,
aka suspend2 or tuxonice.'

# Replace the patcher() function from /usr/libexec/sorcery/cast
# Patcher is run at the end of default_pre_build()
patcher() {
 declare -i SCX=1
 while [[ -n      ${SOURCE[$SCX]} ]]; do
  if   decompress ${SOURCE[$SCX]} | grep  -q '^--- '
  then decompress ${SOURCE[$SCX]} | patch -p1
  fi;  (( SCX++ ))
 done
 return 0
}

configure(){
 local CUR="$CONFIG_LOGS/$SPELL/linux-config"
 local OLD="$CONFIG_LOGS/$SPELL/linux-config.old"


 copy(){ if [[ -f $1 ]]; then cp "$1" "$2"; chmod 600 "$2"; fi; }

 if ! [[ -f $CUR ]]; then
  if ! sources_cached "$SPELL"; then
   echo "Sources must be download before configuration."
   leech $SPELL
  fi
  pre_build           &&
  optimize            &&
  copy "$OLD" .config &&
  make menuconfig     &&
  cp         .config $CUR
  if   [[ -n   $BUILD_DIR ]] &&
       [[ -d   $BUILD_DIR ]]
  then rm -fr "$BUILD_DIR"
  fi

  clear
  echo "Linux kernel configuration complete."
  cd /tmp
 fi
}

build(){
 backup_modules(){
  if [ -d  /lib/modules/$RELEASE ]; then
  rm   -rf /lib/modules/$RELEASE.old
  cp   -a  /lib/modules/$RELEASE \
           /lib/modules/$RELEASE.old
  fi
 }


 store_config(){ cp .config $CONFIG_LOGS/$SPELL/linux-config; }

 install_kernel(){
  SM=System.map
  BV=$RELEASE
  BZ=$( find . -type f -name bzImage )

  mkdir -p                 $DESTDIR/boot/$BV
  cp        $BZ            $DESTDIR/boot/$BV/linux
  chmod 600                $DESTDIR/boot/$BV/linux
  cp            System.map $DESTDIR/boot/$BV
  rm    -f                 $DESTDIR/boot/System.map
  ln    -s  $BV/System.map $DESTDIR/boot/System.map
 }

 install_header(){
  mkdir   -vm 755 -p                                      $DESTDIR/usr/include/{asm,linux}
  install -vm 644 include/generated/asm-offsets.h         $DESTDIR/usr/include/asm
  install -vm 644 include/generated/{autoconf,compile}.h  $DESTDIR/usr/include/linux
  true
 }

 restore_linux_configs(){
  local CUR="$CONFIG_LOGS/$SPELL/linux-config"
  local OLD="$CONFIG_LOGS/$SPELL/linux-config.old"

  if   [[ -f  $CUR ]]; then cp $CUR .config; chmod 600 .config
  elif [[ -f  $OLD ]]; then cp $OLD .config; chmod 600 .config
  fi
 }


 make_modules(){
  if   grep -q "CONFIG_MODULES=y" .config
  then make  modules && backup_modules
  fi
 }

 gzip_modules(){
  local KO="$DESTDIR/lib/modules/$RELEASE/kernel/"
  find $KO -type f -size +4096c | xargs -r --max-lines=64 gzip -v1
  find $KO -type f              | sed   -n '/\.gz$/p' |
  while read; do mv -v "$REPLY" "${REPLY%\.gz}"; done
 }

 strip_modules(){
  find $DESTDIR/lib/modules/$RELEASE/kernel -type f -name \*.ko |
  xargs --max-lines=256 strip --strip-unneeded
 }

 make_modules_install(){
  if grep -q "CONFIG_MODULES=y" .config; then 
   make modules_install  INSTALL_MOD_PATH=$DESTDIR && strip_modules
   # gzip_modules
  fi
 }

 get_release_version(){
   # If either of CONFIG_LOCAL_VERSION or CONFIG_LOCAL_VERSION_AUTO
   # is set, then the build process will append a string to $VERSION.
   # Therefore, $RELEASE must be used so the bzImage and modules are
   # installed under the same release versions
   # Note: include/config/kernel.relase exists only AFTER 'make bzImage' 
   RELEASE=$( cat include/config/kernel.release )
 }

 compile_and_install(){
  restore_linux_configs
  yes "" | make oldconfig
  store_config
  make   bzImage        &&
  get_release_version   &&
  make_modules          &&
  make_modules_install  &&
  make firmware_install INSTALL_MOD_PATH=$DESTDIR &&
  install_kernel        &&
  install_header
 }

 rm -fr        /usr/src/linux &&
 mv $BUILD_DIR /usr/src/linux &&
 cd            /usr/src/linux &&
 compile_and_install
}


post_install(){
 update_etc_lilo_conf

 if   [[ -x /usr/bin/mail  ]]; then MAILER=/usr/bin/mail
 elif [[ -x /usr/bin/mailx ]]; then MAILER=/usr/bin/mailx
 fi

 if   [[ -n $MAILER   ]] &&
      [[ -n $SORCERER ]]
 then
  echo    -e "New linux kernel installed.\nReboot the box, please." |
  $MAILER -s "Reboot reminder from sorcery." $SORCERER
 fi

 grep -lr   '^/lib/modules/' $INSTALL_LOGS |
 sed        "s:.*[/]::;/^$/d;/^$SPELL$/d"  |
 pipe_queue "$CAST_QUEUE" com

 rm -rf /boot/fast
 true
}
