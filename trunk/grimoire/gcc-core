# Failed to compile with gcc 4.4.2:
# cyrus-sasl, faac, sdlmame, firefox

    stable 4.4.3
   require binutils cloog-ppl mpfr
# requiring coreutils creates recursive requirement loop
#  require binutils cloog-ppl coreutils mpfr
      opts --with-ppl --with-cloog
  category development/compiler
 attribute console library solo
#   source ftp://gcc.gnu.org/pub/gcc/releases/gcc-$VERSION/gcc-$VERSION.tar.bz2
    source $GNU_URL gcc/gcc-$VERSION/gcc-core-$VERSION.tar.bz2
    source $GNU_URL gcc/gcc-$VERSION/gcc-objc-$VERSION.tar.bz2
  homepage http://gcc.gnu.org
  estimate 13000
 conflicts gcc-objc
      desc 'GNU compiler collection'

build(){

 finish_install(){
  rm -f  $DESTDIR/usr/info/dir
  mkdir -p            $DESTDIR/lib
  ln -fs /usr/bin/cpp $DESTDIR/lib/cpp
  ln -fs gcc          $DESTDIR/usr/bin/cc
 }

 export   CFLAGS="${CFLAGS/-fomit-frame-pointer/}"
 export CXXFLAGS="${CXXFLAGS/-fomit-frame-pointer/}"
 export CCACHE_DISABLE=1
 export PATH="$( echo "$PATH" | sed "s/[^:]*ccache://" )"

 case $HOSTTYPE in
  x86_64) OPTS+=' --disable-multilib' ;;
 esac

 case $MACHTYPE in
  *-uclibc) OPTS+=" --disable-__cxa_atexit --host=$HOSTTYPE-linux-uclibc --build=$HOSTTYPE-linux-uclibc --target=$HOSTTYPE-linux-uclibc" ;;
  *-gnu)    OPTS+=" --enable-__cxa_atexit --enable-clocale=gnu" ;;
 esac

   LCF="LIBCFLAGS=$CFLAGS"
  LCXF="LIBCXXFLAGS=$CXXFLAGS"
    BF="BOOT_CFLAGS=$CFLAGS"
  LJCF="LIBGCJ_CFLAGS=$CFLAGS"
 LJCXF="LIBGCJ_CXXFLAGS=$CXXFLAGS"
  LJJF="LIBGCJ_JAVAFLAGS=$CFLAGS"
   LDF="LDFLAGS=$LDFLAGS"

 OPTS+="
  --prefix=/usr
  --enable-shared
  --infodir=/usr/info
  --mandir=/usr/man
  --datadir=/usr/share
  --enable-long-long
  --enable-threads
  --enable-tls
  --with-system-zlib
  --disable-bootstrap
  --enable-languages=c,objc"

 if [ -d /boot/isolinux ]
 then OPTS+=" --enable-libstdcxx-pch=no"
 fi

 mkdir BUILD
 cd    BUILD
 ../configure $OPTS             &&
 make "$BF"                     \
      "$LCF"  "$LCXF"  "$LDF"   \
      "$LJCF" "$LJCXF"          &&
 make  install DESTDIR=$DESTDIR &&
 finish_install
}


post_install(){
 get_provider libtool | pipe_queue $CAST_QUEUE com

 if   [[ -d ${CCACHE_CACHE:=/var/cache/ccache} ]]
 then rm -f ${CCACHE_CACHE}/*
 fi

 show_installed | grep -x gcc | pipe_queue $DISPEL_QUEUE

 cast_if_needed(){
  if ! spell_installed $1 &&
       grep -lr $2 $ELF_LOGS |
       grep -v  gcc          |
       grep -q .
  then echo $1 | pipe_queue "$CAST_QUEUE" com
  fi
 }

 cast_if_needed gcc-g++  /libstdc++.so
#cast_if_needed gcc-objc /libobjc.so
 cast_if_needed gcc-java /libgcj.so
 cast_if_needed gcc-fortran /libgfortran.so

 if   spell_installed gcc
 then echo gcc | pipe_queue "$DISPEL_QUEUE"
 fi
}
