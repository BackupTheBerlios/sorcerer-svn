   VERSION=( "1.4.2" "1.4.1" "1.4.0" "1.3.1" "1.1.3" "1.1.2" "1.1.1" "1.1.0" "1.2.2" "1.2.1" "1.2.0" )
  UVERSION=( "0.9.28.3" "0.9.28.1" )
# 1.5.0 is unstable
    IGNORE="pre\|rc"
  CATEGORY="utility/shell"
 ATTRIBUTE="console"
       URL=( "http://www.busybox.net/downloads/"
             "http://www.uclibc.org/downloads/" )
case  $VERSION  in
  1.3.1)
    SOURCE=( "busybox-$VERSION.tar.bz2"
             "uClibc-$UVERSION.tar.bz2"
             "fixes-$VERSION/busybox-$VERSION.shadow.patch" )
      URL[2]="${URL[0]}"  ;;
      *)
    SOURCE=( "busybox-$VERSION.tar.bz2"
             "uClibc-$UVERSION.tar.bz2" )  ;;
esac
  HOMEPAGE="http://www.busybox.net"
       REQ=""
 FRESHMEAT="busybox"
  ESTIMATE="3280"
      DESC="busybox is a tiny rescue shell configured for use with the Install/Rescue CD.
busybox combines tiny versions of many common
UNIX utilities into a single small executable.
It provides minimalist replacements for most
of the utilities you usually find in GNU
fileutils, shellutils, etc."


build()  {
  local_install_uClibc()  {
    local       DEST=$PWD/uClibc-install
    mkdir  -p  $DEST

    local DT="default TARGET_"
    local DC="default CONFIG_"
    local  G="GENERIC_"

# libraries do not have to have rpath in them
# because uClibc is not actually being installed

#   local WR="-Wl,-rpath"

    cd  uClibc-$UVERSION

    case  $HOSTTYPE  in
      x86_64)  sed  -i  "s:${DT}i386:${DT}$HOSTTYPE:"  \
                    extra/Configs/Config.in
               ULC="/usr/x86-64-linux-uclibc"  ;;
#              CPU_LDFLAGS="$WR,$ULC/lib $WR,$ULC/usr/lib $LDFLAGS"  ;;
       i*86)   ULC="/usr/i386-linux-uclibc"  ;;
#              CPU_LDFLAGS="$WR,$ULC/lib $WR,$ULC/usr/lib $LDFLAGS"  ;;
    esac

    CPU_LDFLAGS="$LDFLAGS"

    # because it invokes ld directly rather than through gcc.
    CPU_LDFLAGS="$(  echo  "$CPU_LDFLAGS"  |
                     tr    ',' ' ' |
                     sed   "s/-Wl//g"  )"

    # the following line fixes what appears to be a typo error
    # discovered in uClibc version 0.9.28
    sed  -i  "s:CPU_LDFLAGS-y:CPU_LDFLAGS:"  Rules.mak

    make defconfig  &&
    if      [ "$HOSTTYPE" == "x86_64"  ]
    then  make  "CPU_LDFLAGS=$CPU_LDFLAGS"
# "CPU_CFLAGS=$CFLAGS"
    else  make  "CPU_LDFLAGS=$CPU_LDFLAGS"
    fi  &&
    make    install  PREFIX=$DEST  &&
    cd  ..
}

linux_avail() {
  if  !  [  -d  /usr/src/linux/include  ];  then
    echo  "uClibc used by busybox for static linking"
    echo  "will fail compilation unless a linux src"
    echo  "is available at /usr/src/linux"
    false
  fi
}

on_iso()  {
  if  !  [  -d  /isolinux  ];  then
    echo  "Please install busybox only on intended Install Rescue images."
    false
  fi
}

  case  $VERSION  in
    1.3.1)  patch  -p1  <  $SOURCE_CACHE/busybox/1.3.1/${SOURCE[2]##*/}  ;;
  esac
  
  on_iso                &&
  linux_avail           &&
  local_install_uClibc  &&
  uClibc_okay=1

  uClibc="--sysroot=$( find $PWD/uClibc-install/usr/*-linux-uclibc -maxdepth 0 -type d )"
  export  CPPFLAGS="$uClibc"
  export   LDFLAGS="$uClibc"
  cp  $SCRIPT_DIR/config  .config

  case  $HOSTTYPE  in
    x86_64)  export  CFLAGS="$uClibc -Os -march=k8"    ;;
         *)  export  CFLAGS="$uClibc -Os -march=i586"  ;;
  esac

  [  "$uClibc_okay"  == "1"  ]      &&
  yes   ""  |  make  oldconfig      &&
  make  "CFLAGS=$CFLAGS"            \
        KBUILD_VERBOSE=1            &&
  prepare_install                   &&
  install  -m 0755  busybox  /bin
#  &&
#  mkdir    -p                /bbin  &&
#  cd                         /bbin  &&
#  busybox  --help |
#  grep "^	" |
#  grep ","        |
#  tr   -d ' \t'   |
#  tr   ',' '\n'   |
#  grep '.'        |
#  while  read;  do
#    rm  -f           "$REPLY"
#    ln  /bin/busybox "$REPLY"
#  done
}
