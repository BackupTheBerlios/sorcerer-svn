#!/bin/bash
### BEGIN INIT INFO
# Provides: initramfs
# Required-Start:
# Required-Stop: $local_fs udev
# Default-Start:
# Default-Stop: 0 6
# Short-Description: initramfs creates boot filesystems
### END INIT INFO

# Copyright 2007 2008 by Kyle Sallee, all rights reserved.
# for use with Sorcerer only

GZIP=cat

. /lib/lsb/init-functions

NAME=initramfs
T='	'

update_lilo(){
 lm(){
  grep -q    large-memory  $1 ||
  sed  -i '1ilarge-memory' $1
 }

 lm /etc/lilo.conf.head
 lm /etc/lilo.conf

 find /boot -maxdepth 2 -mindepth 2 -type f -name linux -printf '%h/initrf\t%h/linux\n' |
 while read IRF IMG; do
  grep -q "$IRF" /etc/lilo.conf ||
  sed  -i "s:$IMG$:$IMG\n${T}initrd$T$T=$T$IRF:" /etc/lilo.conf
 done
}

gcpio(){
 INC="\,/lib/modules/$1$,p
      \,/lib/modules/$1/,p"
 OUT='\,^/lib/modules/,d'
 OLD="/boot/$1/initrf"
 NEW="/tmp/initrf.$$$RANDOM.new"
 OPS='-o -H newc --quiet'

 fail(){ rm -f $NEW; return 1; }

 echo -n > $NEW
 chmod 600 $NEW

 sed "$INC;$OUT" |
 if ! cpio $OPS;      then fail; fi |
 if ! $GZIP > $NEW;   then fail; fi
 if ! [ -s    $NEW ]; then fail; fi

 rm -f   $OLD
 mv $NEW $OLD
}


run_lilo(){ sync; /sbin/lilo -P ignore; }
mkinitrf(){ echo "$EVERY" | gcpio "$1"; }

every(){
 local KBD KM L64

 exists(){ while read; do [[ -e $REPLY ]] && echo "$REPLY"; done; }

 if [ -d /usr/share/kbd/keymaps ]; then
  KM=/usr/share/kbd/keymaps
  KBD='1i/usr/share/kbd;1i/usr/share/kbd/keymaps'
 fi

 if [ -d /lib64 ]; then L64=/lib64; fi

 find /bin /dev /etc /lib $L64 /sbin $KM |
 sed "\
\,^/dev/pts/,d
\,^/dev/.udev,d
\,^/dev/shm/,d
\,^/etc/[^/]*.old,d
\,^/etc/sorcery/,d
\,^/etc/selinux/,d
\,^/etc/asciidoc/,d
\,^/etc/avahi/,d
\,^/etc/chipcard,d
\,^/etc/courier/,d
\,^/etc/cups/,d
\,^/etc/elvis.default/stubs/,d
\,^/etc/fonts/,d
\,^/etc/gconf/,d
\,^/etc/gdm/,d
\,^/etc/gtk/,d
\,^/etc/httpd/,d
\,^/etc/init.d/log.d/,d
\,^/etc/kde,d
\,^/etc/mono/,d
\,^/etc/mplayer/,d
\,^/etc/mtab,d
\,^/etc/openldap/,d
\,^/etc/ppp/,d
\,^/etc/sane.d/,d
\,^/etc/sound/,d
\,^/etc/squid/,d
\,^/etc/ssh/,d
\,^/etc/ssl/,d
\,^/etc/xdg/,d
\,^/etc/bootblaze,d
\,^/etc/xml,d
\,^/lib.*\.la$,d
\,^/lib.*lib.*\.a$,d
\,^/bin/7zCon.sfx$,d
\,^/bin/bashbug$,d
\,^/bin/login$,d
\,^/bin/su$,d
\,^/sbin/sln$,d
\,^/sbin/init$,d
1i/init
1i/media
1i/media/root
1i/proc
1i/selinux
1i/sys
1i/usr
1i/usr/lib
1i/usr/lib/libgcc_s.so.1
1i/usr/lib/libgcc_s.so
1i/usr/share
$KBD
1i/usr/share/terminfo
1i/usr/share/terminfo/l
1i/usr/share/terminfo/l/linux" | exists
}

initrf_update(){
 rm -f /boot/initrf.gz /boot/*/initrf.gz
 grep    'initrf\.gz'   /etc/lilo.conf &&
 sed -i '/initrf\.gz/d' /etc/lilo.conf

 [     -d      /media/root ] ||
 mkdir -pm 755 /media/root

 EVERY="$( every )"

 update_lilo

 find /boot -maxdepth 2 -mindepth 2 -type f -name linux -printf '%h\n' |
 cut -d / -f3 | while read; do mkinitrf $REPLY; done

 run_lilo
}

initrf_present(){
 find /boot -maxdepth 2 -mindepth 2 -type f -name linux -printf '%h\n' |
 while read; do [ -f "$REPLY/initrf" ] || return 1; done
}

initrf_current(){
 IRFL=/var/log/initramfs.log
 DIRS='/bin /etc/bash.d /etc/init.d /etc/lvm'
 DIRS+=' /etc/modules.d /etc/networks.d /etc/udev /lib /sbin'
 [ -d    /lib64 ] &&
 DIRS+=' /lib64'

 FILES='/etc/fstab /etc/hostname /etc/inittab'
 FILES+=' /etc/lilo.conf /etc/lilo.conf.head'
 FILES+=' /etc/modprobe.conf /etc/passwd /etc/shadow'

 OMIT='\,/etc/init.d/log,d'

 IRF=$( find /boot -type f -name initrf -printf '%T@\t%p\n' | sort -g | head -n1 | cut -f2 )
 if [ -z "$IRF" ]; then return 1; fi
 OLD="$( find $DIRS $FILES -type f -newer $IRF | sed '\,/log.d/,d' )"
 if [ -n "$OLD" ]; then
  echo   "$OLD" > $IRFL
  touch /boot/writeable 2>/dev/null &&
  rm -f /boot/writeable             &&
  return 1
  return 0
 else rm -f $IRFL
 fi
}

begin(){
 if   initrf_present &&
      initrf_current
 then return
 elif log_warning_msg "$NAME updating"; initrf_update
 then log_success_msg "$NAME updated"
 else log_failure_msg "$NAME failed"
  if   [ -n "$1" ]
  then sulogin -t 300 &>/dev/console 0</dev/console
  fi
 fi
}

main(){
 log_warning_msg "$NAME checking"; begin "$1"
 log_success_msg "$NAME checked"
}

export LC_ALL=C
case $1 in
 stop) main s ;;
    *) main ;;
esac
