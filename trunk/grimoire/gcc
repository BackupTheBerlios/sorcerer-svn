# On next update of gcc recompile and test coreutils and procps
# without the USE_GCC to see if uptime, ps, and top segmentation fault
# when run.
   VERSION=( "4.2.1" "4.2.0" "4.1.2" "4.1.1" "4.1.0" )
    IGNORE="ada\|core\|g++\|g77\|java\|objc\|testsuite\|fortran\|200"
  CATEGORY="development/compiler"
 ATTRIBUTE="console library solo"
    SOURCE="gcc/gcc-$VERSION/gcc-$VERSION.tar.bz2"
       URL="$GNU_URL"
       REQ=( "automake binutils coreutils libtool"
             "mpfr:::for C and Fortran library for multiple-pression computations" )
  HOMEPAGE="http://gcc.gnu.org"
  disable lib64 reduce
case $HOSTTYPE in
 x86_64)  RPATH="/opt/gcc/current/lib64"  ;;
      *)  RPATH="/opt/gcc/current/lib"    ;;
esac
  ESTIMATE="12800"
      DESC="gcc is the GNU compiler collection.
gcc - GNU Compiler Collection.
The GNU Compiler Collection is a suite of compilers
that compile C, C++, Objective C, Fortran, Java,
and Ada for a wide variety of architectures."

configure() {

select_compilers()  {

  TITLE="Additional Compiler Selection Menu"
  HELP="Key:  [X] = build, [ ] = exclude.  You only need what you know."

  GCC_LANGUAGES=$(
    dialog                        \
    --backtitle  "$BACKTITLE"     \
    --title      "$TITLE"         \
    --timeout    "$PROMPT_DELAY"  \
    --stdout                      \
    --separate-output             \
    --no-cancel                   \
    --checklist  "$HELP"          \
    18 55 10                      \
    "fortran"    ""    "off"      \
    "java"       ""    "off"      \
    "objc"       ""    "off"      |
    tr           '\n'  ','        |
    sed          's:,$::'         )

#              "ada"       ""  "off"  \
#              "f77"       ""  "off"  \
#              awk '{gsub("^[ \t]*",""); gsub("\n",","); printf("%s,",$0);}'

}

save_compilers()  {
  if    [  -n  "$GCC_LANGUAGES"  ]
  then           GCC_LANGUAGES="${GCC_LANGUAGES},c++"
  else           GCC_LANGUAGES="c++"
  fi
  echo          "GCC_LANGUAGES=\"$GCC_LANGUAGES\""  >>  $SPELL_CONFIG
}


if    [  -z  "$GCC_LANGUAGES"  ];  then
  BACKTITLE="Sorcery GCC Compiler Languages Configuration Menu"
  select_compilers  &&
  save_compilers
fi
}


build() {

finish_install()  {
  cp     -av   $DESTDIR/*                  /
  rm     -f                                /opt/gcc/current
  ln     -s    $VERSION                    /opt/gcc/current
  ln     -sf   /opt/gcc/$VERSION/bin/cpp   /lib/cpp
  ln     -sf   gcc                         /opt/gcc/$VERSION/bin/cc
  rm     -f                                /usr/bin/cc

  if    [   -h  /usr/info/dir  ]
  then  rm  -f  /usr/info/dir
  fi

  SEDIT="s:-L/usr/src/sorcery[^ ]*::g
  s:${VERSION//./\\.}:current:g"

  #   sed  -i  "$SEDIT"  /opt/gcc/$VERSION/lib/lib*.la  2>/dev/null
  find  /opt/gcc/$VERSION  -type f  -name \*.la  |
  xargs -L64  sed  -i  "$SEDIT"

  STRSTREAM=/opt/gcc/$VERSION/include/c++/$VERSION/backward/strstream

  if        [  -f             ${STRSTREAM}    ]  &&
        !   [  -f             ${STRSTREAM}.h  ]
  then  ln     -s  strstream  ${STRSTREAM}.h
  fi

  true
}

x86_64_fix() {
  # This fix has to placed _after_ the first make
  case $HOSTTYPE in
   x86_64) case  $VERSION  in
            3.4.4) sed -i "s:\.\./include:\.\./\.\./include:"      
                   x86_64-pc-linux-gnu/libiberty/Makefile
                   ;;
           esac
           ;;
  esac
}


fix_la()  {
  grep   -l             "/opt/gcc/${VERSION[1]}"  {,/usr}/lib{64,}/*.la  2>/dev/null  |
  xargs  -r  sed  -i  "s:/opt/gcc/${VERSION[1]}/:/opt/gcc/current/:g"
}


ENABLE_LANGS="--enable-languages=${GCC_LANGUAGES:=c++}"

export    CFLAGS="${CFLAGS/-fomit-frame-pointer/}"
export  CXXFLAGS="${CXXFLAGS/-fomit-frame-pointer/}"
export  CCACHE_DISABLE=1
export  PATH="$( echo "$PATH" | sed "s/[^:]*ccache://" )"

  LCF="LIBCFLAGS=$CFLAGS"
 LCXF="LIBCXXFLAGS=$CXXFLAGS"
   BF="BOOT_CFLAGS=$CFLAGS"
 LJCF="LIBGCJ_CFLAGS=$CFLAGS"
LJCXF="LIBGCJ_CXXFLAGS=$CXXFLAGS"
 LJJF="LIBGCJ_JAVAFLAGS=$CFLAGS"
  LDF="LDFLAGS=$LDFLAGS"

case  $VERSION  in
  4.2.1)  patch  -p1  <  $SCRIPT_DIR/gcc-4.2.1-no-fixinc.sh.patch  ;;
  3.4*)   patch  -p1  <  $SCRIPT_DIR/gcc-3.3.2.patch  ;;
  3.3.1)  patch  -p1  <  $SCRIPT_DIR/gcc-3.3.1.patch  ;;
  3.3.2)  patch  -p1  <  $SCRIPT_DIR/gcc-3.3.2.patch  ;;
  3.3.3)  patch  -p1  <  $SCRIPT_DIR/gcc-3.3.2.patch  ;;
  3.3)    patch  -p1  <  $SCRIPT_DIR/gcc-3.3.patch    ;;
  3.2.3)  patch  -p1  <  $SCRIPT_DIR/gcc-3.2.1.patch  ;;
  3.2.2)  patch  -p1  <  $SCRIPT_DIR/gcc-3.2.1.patch  ;;
  3.2.1)  patch  -p1  <  $SCRIPT_DIR/gcc-3.2.1.patch  ;;
esac

# 3.2.2 now supports the DESTDIR Makefile variable
# That variable is for packagers.

case  $HOSTTYPE  in
 x86_64)  OPTS="$OPTS  --disable-multilib"  ;;
esac


OPTS="$OPTS
  --host=$BUILD
  --prefix=/opt/gcc/$VERSION
  --enable-__cxa_atexit
  --enable-clocale=gnu
  --enable-shared
  --infodir=/usr/info
  --mandir=/usr/man
  --datadir=/usr/share
  --enable-long-long
  --enable-threads=posix
  --enable-tls
  --with-system-zlib
  $ENABLE_LANGS"             

DESTDIR=$BUILD_DIR/.dest

mkdir   BUILD
cd      BUILD
../configure  $OPTS                &&
make    bootstrap-lean             \
        "$BF"                      \
        "$LCF"  "$LCXF"  "$LDF"    \
        "$LJCF" "$LJCXF"           && 
x86_64_fix                         &&
make    install  DESTDIR=$DESTDIR  \
        "$BF"                      \
        "$LCF"  "$LCXF"  "$LDF"    \
        "$LJCF" "$LJCXF"           && 
prepare_install                    &&
 finish_install                    &&
    fix_la
}


update_gcc_in_ld_so_conf()  {
  sed   -i   "\,/opt/gcc/,d"      /etc/ld.so.conf
  echo          /opt/gcc/*/lib    \
                /opt/gcc/*/lib64  |
  tr    ' '  '\n'                 |
  sort  -g   -r                   |
  grep  -v   "/current/\|*"  >>   /etc/ld.so.conf
}


post_install() {
  update_gcc_in_ld_so_conf
  echo  "libtool"  |  pipe_queue  "$CAST_QUEUE"  "com"
  rm    -f  ${CCACHE_CACHE:-/var/cache/ccache}/*
  true
}
