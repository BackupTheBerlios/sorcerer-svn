   VERSION=( "2.6.11" "2.6.10" "2.6.7" "2.6.6" "2.6.5" )
      SAFE=( "2.6.11" )
  CATEGORY="kernel"
 ATTRIBUTE="core solo new"
    SOURCE=( "pub/linux/kernel/v${VERSION:0:3}/linux-$VERSION.tar.bz2"
             "grsecurity-2.1.3-${VERSION:0:6}-200503091157.patch" )
       URL=( "$KERNEL_URL"
             "http://www.grsecurity.net"  )
  HOMEPAGE="http://www.grsecurity.net"
       REQ=( "" "module-init-tools:::for tools for modular kernel" )
  EPROVIDE="linux-kernel"
  ESTIMATE="2386"
 FRESHMEAT="grsecurity"
      DESC="linux-grsecurity provides a grsecurity patched linux kernel."


backup_modules()  {

  if    [  -d  /lib/modules/$VERSION      ];  then
    rm   -rf   /lib/modules/$VERSION.old
    mv         /lib/modules/$VERSION      \
               /lib/modules/$VERSION.old
  fi

}


store_config()  {  cp  .config  $CONFIG_LOGS/$BSPELL/linux-config;  }


install_kernel()  {

  SM="System.map"
  BV="${VERSION}"
  BZ=$(  find  .  -name  bzImage  )

  rm     -rf                  /boot/$BV
  mkdir  -p                   /boot/$BV
  cp          $BZ             /boot/$BV/linux
  cp              System.map  /boot/$BV
  rm     -f                   /boot/System.map
  ln     -s   $BV/System.map  /boot/System.map

}


run_make_menuconfig()  {

  wiz_kill

  CONFIG_KERNEL="true"
  while  $CONFIG_KERNEL; do
    make  menuconfig
    if    query  "Repeat menuconfig?" n
    then  CONFIG_KERNEL=true
    else  CONFIG_KERNEL=false
    fi
  done
}


symlink_headers()  {

                                       [  -e  /usr/include/asm  ]  ||
  ln  -s  /usr/src/linux/include/asm-i386     /usr/include/asm

                                       [  -e  /usr/include/asm-generic  ]  ||
  ln  -s  /usr/src/linux/include/asm-generic  /usr/include/asm-generic

                                       [  -e  /usr/include/linux  ]  ||
  ln  -s  /usr/src/linux/include/linux        /usr/include/linux

}


restore_linux_configs()  {

  CURRENT="$CONFIG_LOGS/$BSPELL/linux-config"
      OLD="$CONFIG_LOGS/$BSPELL/linux-config.old"
    LINUX="/usr/src/linux-$VERSION/.config"

  symlink_headers

  if    [  -f   $CURRENT  ];  then  cp  $CURRENT  $LINUX
  elif  [  -f   $OLD      ];  then  cp  $OLD      $LINUX;  run_make_menuconfig
  else  run_make_menuconfig
  fi

}


install_headers()  {

  install_header_dir()  {
    if    [   -h   /usr/include/$1  ]
    then  rm  -f   /usr/include/$1
    elif  [   -d   /usr/include/$1  ]
    then  rm  -rf  /usr/include/$1
    fi

    mkdir  -p   /usr/include/$1
    cp     -R        include/$1/*   \
                /usr/include/$1
  }

  install_header_dir  asm
  install_header_dir  asm-generic
  install_header_dir  linux
  true

}


remove_extraversion()  {

  sed  -i  "s:EXTRAVERSION = .*:EXTRAVERSION =:"  Makefile

}


compile_and_install()  {
  yes  ""  |  make  oldconfig
  store_config            &&
  make   bzImage          &&
  make   modules          &&
  backup_modules          &&
  prepare_install         &&
  make   modules_install  &&
  install_kernel          &&
  install_headers
}


apply_grsecurity_patch()  {
  cat         $(  guess_filename  ${SOURCE[1]}  )  |  patch  -p1
	sed  -i  "s:EXTRAVERSION = .*:EXTRAVERSION =:"  Makefile
	echo "Applied ${SOURCE[1]}"
}

lilo_image_entry()  {

	cat  <<-  EOF

	image			=	/boot/$VERSION-gr/linux
	label		=	$VERSION-gr
	read-only
	restricted

	EOF

}


update_lilo()  {


	if    !  [  -f  /etc/lilo.conf  ]
	then  return
	fi

	if    !  grep  -q  -w  "$VERSION-gr"  /etc/lilo.conf
	then

		IFS_OLD=$IFS
		export  IFS="$ENTER_IFS"

		rm     -rf  /etc/lilo.conf.old
		touch       /etc/lilo.conf.old
		chmod  600  /etc/lilo.conf.old

		rm     -rf  /etc/lilo.conf.new
		touch       /etc/lilo.conf.new
		chmod  600  /etc/lilo.conf.new

		cp  /etc/lilo.conf  /etc/lilo.conf.old

		(( IMAGE_COUNT=0  ))

		for  LINE  in  `cat /etc/lilo.conf`;  do

			if   echo  "$LINE"  |  grep  -q -w "image\|other";  then
				if    (( IMAGE_COUNT  == 0  ))
				then  lilo_image_entry  >>  /etc/lilo.conf.new
				fi
				((  IMAGE_COUNT++  ))
			fi

			if    ((  IMAGE_COUNT == 14  ))
			then  break
			fi

			echo  "$LINE"  >>  /etc/lilo.conf.new

		done

		if    ((  IMAGE_COUNT ==  0  ))
		then  lilo_image_entry  >>  /etc/lilo.conf.new
		fi

		cp  /etc/lilo.conf.new  /etc/lilo.conf
		rm  /etc/lilo.conf.new

		export  IFS=$IFS_OLD

	fi

	/sbin/lilo

}


update_yaboot()  {

	if    !  [  -f  /etc/yaboot.conf  ]
	then  return
	fi

	if    !  grep  -q  -w "$VERSION-gr"  /etc/yaboot.conf
	then

		IFS_OLD=$IFS
		export  IFS="$ENTER_IFS"

		rm     -rf  /etc/yaboot.conf.old
		touch       /etc/yaboot.conf.old
		chmod  600  /etc/yaboot.conf.old

		rm     -rf  /etc/yaboot.conf.new
		touch       /etc/yaboot.conf.new
		chmod  600  /etc/yaboot.conf.new

		cp  /etc/yaboot.conf  /etc/lilo.conf.old

		(( IMAGE_COUNT=0  ))

		for  LINE  in  `cat /etc/yaboot.conf`;  do

			if   echo  "$LINE"  |  grep  -q -w  "image\|other";  then

				if    (( IMAGE_COUNT  == 0  ))
				then  lilo_image_entry  >>  /etc/yaboot.conf.new
				fi
				((  IMAGE_COUNT++  ))
			fi

			if    ((  IMAGE_COUNT == 14  ))
			then  break
			fi

			echo  "$LINE"  >>  /etc/yaboot.conf.new

		done

		if    ((  IMAGE_COUNT ==  0  ))
		then  lilo_image_entry  >>  /etc/yaboot.conf.new
		fi

		cp  /etc/yaboot.conf.new  /etc/yaboot.conf

		export  IFS=$IFS_OLD

	fi

	/usr/sbin/ybin

}

######################################################33
build() {
	cd  /usr/src/linux-$VERSION
	apply_grsecurity_patch
	restore_linux_configs  &&
	activate_voyeur        &&
	compile_and_install    &> $C_FIFO
}

pre_build() {
	default_pre_build
	mkdir  -p  /usr/src
	cd         /usr/src
	rm     -rf            linux-$VERSION
	unpack     $SOURCE
	rm     -f                             linux
	chown  -R  root:root  linux-$VERSION
	ln     -s             linux-$VERSION  linux
	cd                    linux-$VERSION
}

post_install() {
	default_post_install

	case  $BUILD  in
		powerpc-linux-gnu)  update_yaboot  ;;
		*)  update_lilo    ;;
	esac


	RECAST=$(  show_installed  linux-26-module  )
	if    [  -n  "$RECAST"  ]
	then  unlock_cast;  cast  -c  $RECAST
	fi

	backup_lib

	if    [  -x  /usr/bin/mail   ]
	then  MAILER=/usr/bin/mail
	elif  [  -x  /usr/bin/mailx  ]
	then  MAILER=/usr/bin/mailx
	fi

	if    [  -n  "$MAILER"    ]  &&
		[  -n  "$SORCERER"  ]
	then
		(
		echo  "New linux kernel installed."
		echo  "Remember to reboot the box, please."
		)  |  $MAILER  -s  "Reboot reminder from sorcery."  $SORCERER
	fi
}

