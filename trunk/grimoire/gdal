# Static libraries must be enabled or the build fails with
# g++: gdalinfo.o: No such file or directory
# odd, 1.7.2 the download url has gdal-1.7.2.tar.gz.md5
# but not the actual gdal-1.7.2.tar.gz

# actual 1.9.1 tarball missing, but gdal-1.9.1.tar.gz.md5 present
# The md5sum for the version 1.9.2 tarball exists,
# however the tarball does not exist on the download server.

with info    good 20130806
with info    last 20121008
with version stable 1.9.2
with also --with-jpeg=/usr
case $VERSION in
 1.9.1)
with also    --with-gif=no ;;
esac
with base    curl geos giflib hdf5 jasper libiodbc libpng pixman proj sqlite tiff
#with base    curl geos giflib hdf5 jasper libpng pixman proj sqlite tiff unixODBC
with elect   openjpeg
with elect   postgresql ''             '' for postgresql support
with elect   xerces-c   --with-xerces  '' to include Xerces C++ XML Parser support for GML
with switch  --with-threads '' to support multi thread operation
#     with also --enable-static=yes
with also    --disable-static
with role    utility/gis
with trait   console library makej multilib-dual
with source  stable http://download.osgeo.org/gdal/gdal-$VERSION.tar.gz
with info    home http://www.gdal.org/
with info    cite 'translator library for raster geospatial data formats
gdal also comes with a variaty of useful command line utilities
for data translation and processing:
    * gdalinfo - report information about a file.
    * gdal_translate - Copy a raster file, with control of output format.
    * gdaladdo - Add overviews to a file.
    * gdalwarp - Warp an image into a new coordinate system.
    * gdaltindex - Build a MapServer raster tileindex.
    * gdal_contour - Contours from DEM.
    * rgb2pct.py - Convert a 24bit RGB image to 8bit paletted.
    * pct2rgb.py - Convert an 8bit paletted image to 24bit RGB.
    * gdal_merge.py - Build a quick mosaic from a set of images.
    * gdal_rasterize - Rasterize vectors into raster file.
    * gdal-config - Get options required to build software using GDAL.'

build(){
 if   [[ $HOSTTYPE == x86_64 ]] && ! [[ $CFLAGS =~ -m32 ]]
 then export LDFLAGS+=' -L/usr/lib64'
 fi
 default_build
}
