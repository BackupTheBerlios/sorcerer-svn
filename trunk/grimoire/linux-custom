    stable custom
  category kernel
 attribute console
case $VERSION in
 custom) attribute broke ;;
   *rc*) source $KERNEL_URL pub/linux/kernel/v${VERSION:0:3}/testing/linux-$VERSION.tar.bz2 ;;
      *) source $KERNEL_URL pub/linux/kernel/v${VERSION:0:3}/linux-$VERSION.tar.bz2 ;;
esac
  homepage http://www.kernel.org
   protect /boot
   protect /lib/modules
  eprovide linux-kernel
      desc "compile and install a linux kernel using custom .config
The SA is responsible for creating the .config
The file $CONFIG_LOGS/$SPELL/linux-config
should contain the config file
otherwise the source for $SPELL must be downloaded
prior to casting $SPELL in order to create the config file
using make menuconfig.

Warning:
Only system administrators with prior successful
experience at creating .config files for linux kernel configuration
should cast this spell.
A mistake with configuration can create a box that is unbootable.

Warning:
The SA must set the version for this spell using
# augur progress $SPELL \$VERSION
prior to leeching and prior to casting this spell"

configure(){
 local CUR="$CONFIG_LOGS/$SPELL/linux-config"
 local OLD="$CONFIG_LOGS/$SPELL/linux-config.old"
 local USE

 use_what(){
    if [ -f "$CUR" ]; then USE=$CUR
  elif [ -f "$OLD" ]; then USE=$OLD
                      else USE="still need .config"
    fi
 }

 msg(){ dialog --title "$SPELL" --stdout --timeout 60 --msgbox "$1" 0 0; }
 must_provide(){ msg "Providing a .config file for linux-custom is mandatory."; }

 missing_config(){
  if   ! [ -f $OLD ] && ! [ -f $CUR ]
  then must_provide; true
  else false
  fi
 }

 fselect(){
  local WHERE
    if [ -d  /etc/$SPELL ]
  then WHERE=/etc/$SPELL
  elif [ -d  /usr/src/linux ]
  then WHERE=/usr/src/linux
  else WHERE=/
  fi

  dialog --title "$SPELL .config file selection menu" --stdout \
         --timeout 60 --fselect "$WHERE" 0 0
 }

 conf_import(){
  local REPLY

  REPLY="$( fselect )"
   if [ -f "$REPLY" ] && grep -q "CONFIG_" $REPLY; then
    cp "$REPLY" "$CUR"
    store_in_etc
    msg "$REPLY successfully imported"
   else
    msg "$REPLY does not appear to be a linux configuration file"
  fi
 }

 conf_menuconfig(){

  store_in_etc(){
   mkdir -pm 755 /etc/$SPELL
   if [ -f "$CUR" ]
   then cp "$CUR" "/etc/$SPELL/linux-$VERSION-$( date +%Y%m%d%H%M%S )"
   fi
  }

  rm_build_dir(){
   if   [[ -n   $BUILD_DIR ]] &&
        [[ -d   $BUILD_DIR ]]
   then rm -fr "$BUILD_DIR"
   fi
  }

  copy(){ if [[ -f $1 ]]; then cp "$1" "$2"; chmod 600 "$2"; fi; }

  use_what
  if ! sources_cached "$SPELL"; then
   msg "Sources must be download before configuration."; 
   leech $SPELL
   return
  fi

  pre_build           &&
  optimize            &&
  copy "$USE" .config &&
  make menuconfig     &&
  cp   .config $CUR   &&
  store_in_etc        &&
  rm_build_dir        &&
  msg "Linux kernel configuration complete." &&
  cd /tmp
 }

 conf_menu(){
  use_what
  dialog --title "$SPELL configuration menu" --stdout \
         --ok-label $"Select" --cancel-label $"Done" \
         --timeout 60 --menu "Using: $USE" 0 0 0 \
         "Import" "an existing .config" \
         "Make"   "menuconfig"
 }

 conf_menu_loop(){
  local  REPLY
  while  REPLY="$( conf_menu )"; do
   case $REPLY in
    Import) conf_import ;;
    Make)   conf_menuconfig ;;
   esac
  done
 }

 while conf_menu_loop; missing_config; do :; done
}

build(){
 backup_modules(){
  if [ -d  /lib/modules/$VERSION ]; then
  rm   -rf /lib/modules/$VERSION.old
  cp   -a  /lib/modules/$VERSION \
           /lib/modules/$VERSION.old
  fi
 }


 store_config(){ cp .config $CONFIG_LOGS/$SPELL/linux-config; }

 install_kernel(){
  SM=System.map
  BV=$VERSION
  BZ=$( find . -type f -name bzImage )

  rm    -rf                $DESTDIR/boot/$BV
  mkdir -p                 $DESTDIR/boot/$BV
  cp        $BZ            $DESTDIR/boot/$BV/linux
  chmod 600                $DESTDIR/boot/$BV/linux
  cp            System.map $DESTDIR/boot/$BV
  rm    -f                 $DESTDIR/boot/System.map
  ln    -s  $BV/System.map $DESTDIR/boot/System.map
 }

 install_header(){
  mkdir   -vm 755 -p                                     $DESTDIR/usr/include/{asm,linux}
  install -vm 644 include/generated/asm-offsets.h        $DESTDIR/usr/include/asm
  install -vm 644 include/generated/{autoconf,compile}.h $DESTDIR/usr/include/linux
  true
 }

 restore_linux_configs(){
  local CUR="$CONFIG_LOGS/$SPELL/linux-config"
  local OLD="$CONFIG_LOGS/$SPELL/linux-config.old"

  if   [[ -f  $CUR ]]; then cp $CUR .config; chmod 600 .config
  elif [[ -f  $OLD ]]; then cp $OLD .config; chmod 600 .config
  fi
 }


 make_modules(){
  if   grep -q "CONFIG_MODULES=y" .config
  then make  modules && backup_modules
  fi
 }


 gzip_modules(){
  local KO="$DESTDIR/lib/modules/$VERSION/kernel/"
  find $KO -type f -size +4096c | xargs -r --max-lines=64 gzip -v1
  find $KO -type f              | sed   -n '/\.gz$/p' |
  while read; do mv -v "$REPLY" "${REPLY%\.gz}"; done
 }


 make_modules_install(){
  if grep -q "CONFIG_MODULES=y" .config; then 
   mkdir -p  /lib/modules
   chmod 700 /lib/modules
   make modules_install INSTALL_MOD_PATH=$DESTDIR
   # gzip_modules
  fi
 }


 compile_and_install(){
  restore_linux_configs
  yes "" | make oldconfig
  store_config
  make   bzImage        &&
  make_modules          &&
  make_modules_install  &&
  make firmware_install INSTALL_MOD_PATH=$DESTDIR &&
  install_kernel        &&
  install_header
 }

 rm -fr            /usr/src/linux &&
 mv     $BUILD_DIR /usr/src/linux &&
 cd                /usr/src/linux &&
 compile_and_install
}


post_install(){
 update_etc_lilo_conf

 if   [[ -x /usr/bin/mail  ]]; then MAILER=/usr/bin/mail
 elif [[ -x /usr/bin/mailx ]]; then MAILER=/usr/bin/mailx
 fi

 grep -lr   '^/lib/modules/' $INSTALL_LOGS |
 sed        "s:.*[/]::;/^$/d;/^$SPELL$/d"  |
 pipe_queue "$CAST_QUEUE" com

 rm -fr /boot/fast
 true
}
