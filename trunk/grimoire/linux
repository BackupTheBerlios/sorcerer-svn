    stable 2.6.36 2.6.35.7
   require initramfs lilo module-init-tools
  category kernel
 attribute console
case $VERSION in
 *rc*) source $KERNEL_URL pub/linux/kernel/v${VERSION:0:3}/testing/linux-$VERSION.tar.bz2 ;;
    *) source $KERNEL_URL pub/linux/kernel/v${VERSION:0:3}/linux-$VERSION.tar.bz2 ;;
esac
  homepage http://www.kernel.org
   protect /boot
   protect /lib/modules
  eprovide linux-kernel
  estimate 14000
      desc '2.6.36.x stable linux kernels
linux is a clone of the Unix kernel,
written from scratch by Linus Torvalds
with assistance from a loosely-knit
team of hackers across the Net.
It aims towards POSIX and Single
UNIX Specification compliance.
It has all the features you would
expect in a modern fully-fledged
Unix kernel, including true multitasking,
virtual memory, shared libraries,
demand loading, shared copy-on-write
executables, proper memory management,
and TCP/IP networking.'

[ -f   $GRIMOIRE/linux.d/trim ] &&
while read        CONF      SIZE  DESC
do   switch OMIT_$CONF "" "$SIZE $DESC"
done < $GRIMOIRE/linux.d/trim


# Unsetting CONFIG_NETDEV_1000
# makes no difference to the size nor number
# of the installed kernel modules?
# as compared to merely unsetting CONFIG_NETDEV_10000
# Why is that?

# Stuff that I might make optional...

# CRYPTO Bolted down by something, AF_RXRPC, bolted downn by AFS
# CONFIG_CRYPTO=y		600K	cryptographic API


# NETDEV_1000 bolted down by the following
# drivers/scsi/bnx2i/Kconfig:   select NETDEV_1000
# drivers/staging/et131x/Kconfig:       depends on NETDEV_1000 && PCI
# drivers/staging/slicoss/Kconfig:      depends on PCI && X86 && NETDEV_1000
# definitely being held down by: CONFIG_SCSI_BNX2_ISCSI


# CONFIG_INPUT_TABLET=y		100K	Tablet drivers
# CONFIG_MFD_SUPPORT=y		150K	Multifunction devices found mostly on embedded platforms
# CONFIG_REGULATOR=y		130K	Generic Voltage and Current regulator support
# CONFIG_INPUT_TOUCHSCREEN=y	250K	Touchscreen drivers
# CONFIG_WATCHDOG=y		400K	dead man switch which sometimes be used to reboot in critical situations 

# CONFIG_ATM_DRIVERS=y		360K	Asynchronous Transfer Mode device drivers
# CONFIG_WAN=y			400K	Wide Area Networks such as X.25, Frame Releay and leased lines
# CONFIG_NET_ETHERNET=y 	????K	IEEE 802.3 ISO 802-2 LAN 10 Mpbs and 100 Mbps LAN drivers
# CONFIG_NETDEV_1000=y	 	????K	IEEE 802.3 or ISO 8802-2 1000 Mpbs LAN drivers
# CONFIG_NETDEV_10000=y 	????K	10 gigabit Ethernet drivers
# CONFIG_WLAN=y			3300K	pre 802.11 and 802.11 wireless device drivers
# CONFIG_INFINIBAND=m		1000K	Core supoort for InfiniBand (IB) drivers and protocols
# CONFIG_ISDN=y			2300K	Integrated Services Digital Network or DNIS
# CONFIG_NETFILTER=y		1200K	framework for filtering and mangling network packets

# CONFIG_BTRFS_FS=m		550K	b tree reversible file system
# CONFIG_XFS_FS=m		550K	journaling file system
# CONFIG_NETWORK_FILESYSTEMS=y	1000K	NFS NFSD CODA CIFS AFS 9P file systems
# CONFIG_OCFS2_FS=m		1000K	extent based shared disk cluster file system


# CONFIG_PCMCIA=m		1600K	16 bit PCMCIA and 32 bit CardBus cards used on laptops
# CONFIG_SND=m			5000K	Advanced Linux Sound Architecture drivers
# CONFIG_RADIO_ADAPTERS=y	300K	AM/FM radio adapters
## CONFIG_IR_CORE		450K	Infrared remote controller drivers for video capture drivers adpaters
# CONFIG_VIDEO_CAPTURE_DRIVERS=y 4300K	webcams, analog TV, hybrid analog/digital TV, and FM radio
# CONFIG_DVB_CAPTURE_DRIVERS=y	2300K	DVB/ATSC Digital TV adapters



build(){

 geode(){
  if    grep -q Geode /proc/cpuinfo; then
   if   grep flags    /proc/cpuinfo | grep -wq 3dnow
   then echo GEODE_LX
   else echo MGEODGX1
   fi
  else false
  fi
 }

 amd(){
  if    grep "model name" /proc/cpuinfo | grep -q AMD; then
     if grep "flags"      /proc/cpuinfo | grep -qw "lm";       then echo K8
   elif grep "flags"      /proc/cpuinfo | grep -qw "3dnowext"; then echo K7
                                                               else echo K6
     fi
  else false
  fi
 }

 intel(){
# pentium MMX and pentium II has MMX, but pentium pro does not
# pentium III has SSE, but Pentium II does not.
# CONFIG_M686 is Pentium Pro the default

  if    grep "model name" /proc/cpuinfo | grep -q "Intel\|Celeron\|Pentium"; then
   if   grep "model name" /proc/cpuinfo | grep -q "Core\|Xeon"    &&
        grep "cpu family" /proc/cpuinfo | grep -q "6";            then echo CORE2
   elif grep "model name" /proc/cpuinfo | grep -q "Pentium\|Xeon" &&
        grep "cpu family" /proc/cpuinfo | grep -q "15";           then echo PENTIUM4
   elif grep "model name" /proc/cpuinfo | grep -q "Pentium(R) M"; then echo PENTIUMM
   elif grep "model name" /proc/cpuinfo | grep -q "Pentium III";  then echo PENTIUMIII
   elif grep "flags"      /proc/cpuinfo | grep -qw "sse";         then echo PENTIUMIII
   elif grep "model name" /proc/cpuinfo | grep -q "Pentium II";   then echo PENTIUMII
   elif grep "flags"      /proc/cpuinfo | grep -qw "mmx";         then echo PENTIUMII
   fi
   else false
  fi
 }


 get_cpu_ia32(){
  geode ||
  amd   ||
  intel
 }

 get_cpu_x86_64(){
  if   grep "model name" /proc/cpuinfo | grep -q "AMD";   then echo K8
  elif grep "model name" /proc/cpuinfo | grep -q "Atom";  then echo ATOM
  elif grep "model name" /proc/cpuinfo | "Core\|Xeon" &&
       grep "cpu family" /proc/cpuinfo | grep -q "6";     then echo CORE2
  elif grep "model name" /proc/cpuinfo | grep -q "Intel"; then echo PSC
  else false
  fi
 }


 adjust_config(){
  if [ -n "$2" ]; then
   sed -i "s:$1=y:# $1 is not set:" .config
   sed -i "s:# CONFIG_M$2 is not set:CONFIG_M$2=y:" .config
  fi
 }


 get_cpu(){
  case $HOSTYPE in
   x86_64) adjust_config "CONFIG_GENERIC_CPU" $( get_cpu_x86_64 ) ;;
        *) adjust_config "CONFIG_M686"        $( get_cpu_ia32   ) ;;
  esac
 }



 backup_modules(){
  if [ -d  /lib/modules/$VERSION ]; then
  rm   -rf /lib/modules/$VERSION.old
  cp   -a  /lib/modules/$VERSION \
           /lib/modules/$VERSION.old
  fi
 }

 install_kernel(){
  SM="System.map"
  BV="${VERSION}"
  BZ=$( find . -type f -name bzImage )

  rm    -rf               $DESTDIR/boot/$BV
  mkdir -p                $DESTDIR/boot/$BV
  cp       $BZ            $DESTDIR/boot/$BV/linux
  chmod 600               $DESTDIR/boot/$BV/linux
  cp           System.map $DESTDIR/boot/$BV
  rm    -f                $DESTDIR/boot/System.map
  ln    -s $BV/System.map $DESTDIR/boot/System.map
 }

 install_header(){
  mkdir   -vm 755 -p                                     $DESTDIR/usr/include/{asm,linux}
  install -vm 644 include/generated/asm-offsets.h        $DESTDIR/usr/include/asm
  install -vm 644 include/generated/{autoconf,compile}.h $DESTDIR/usr/include/linux
  true
 }

 restore_linux_configs(){

  local NAME CZ
  case $HOSTTYPE in
   x86_64) NAME=x86_64 ;;
        *) if   [ -f /boot/isolinux/config.gz ]
           then   CZ=/boot/isolinux/config.gz
           else   CZ=/proc/config.gz
           fi
           if gzip -cd $CZ | grep -q CONFIG_SMP=y
           then NAME="ia32-smp"
           else NAME="ia32-up"
           fi ;;
  esac

  if   [ -f            $SCRIPT_DIR/$NAME ]
  then install -vm 600 $SCRIPT_DIR/$NAME    .config
  else install -vm 600 $SCRIPT_DIR/ia32-smp .config
  fi

  [ -d /boot/isolinux ] || get_cpu
 }

 trim_config(){
  for OMIT in $OPTS; do
   case $OMIT in
    OMIT_NETDEV_1000)
            sed -i "s:CONFIG_SCSI_BNX2_ISCSI=m:# CONFIG_SCSI_BNX2_ISCSI is not set:" .config
            sed -i "s:${OMIT/OMIT_/CONFIG_}=.*:# ${OMIT/OMIT_/CONFIG_} is not set:" .config  ;;
    OMIT_*) sed -i "s:${OMIT/OMIT_/CONFIG_}=.*:# ${OMIT/OMIT_/CONFIG_} is not set:" .config  ;;
   esac
  done
 }

 gzip_modules(){
  if ! [ -d /boot/isolinux ]; then
   local KO="$DESTDIR/lib/modules/$VERSION/kernel/"
 # find $KO -type f -size +4096c | xargs -r --max-lines=64 gzip -v1
   find $KO -type f -size +4096c | xargs -r --max-lines=64 gzip -v9
   find $KO -type f              | sed   -n '/\.gz$/p' |
   while read; do mv -v "$REPLY" "${REPLY%\.gz}"; done
  fi
 }

 strip_modules(){
  find $DESTDIR/lib/modules/$VERSION/kernel -type f -name \*.ko |
  xargs --max-lines=256 strip --strip-unneeded
 }

 compile_and_install(){
  restore_linux_configs
  trim_config
  yes "" | make oldconfig
  make modules &&
  make bzImage &&
  make modules_install  INSTALL_MOD_PATH=$DESTDIR && strip_modules &&
  make firmware_install INSTALL_MOD_PATH=$DESTDIR &&
  install_kernel &&
  install_header &&
  gzip_modules   &&
  rm -fr /lib/modules/$VERSION
 }

 rm -fr        /usr/src/linux &&
 mv $BUILD_DIR /usr/src/linux &&
 cd            /usr/src/linux &&
 compile_and_install
}


post_install(){
 update_etc_lilo_conf

 if   [[ -x /usr/bin/mail  ]]; then MAILER=/usr/bin/mail
 elif [[ -x /usr/bin/mailx ]]; then MAILER=/usr/bin/mailx
 fi

 if   [[ -n $MAILER   ]] &&
      [[ -n $SORCERER ]]
 then
  echo    -e "New linux kernel installed.\nReboot the box, please." |
  $MAILER -s "Reboot reminder from sorcery." $SORCERER
 fi

 grep -lr   '^/lib/modules/' $INSTALL_LOGS |
 sed        "s:.*[/]::;/^$/d;/^$SPELL$/d"  |
 pipe_queue "$CAST_QUEUE" com

 rm -rf /boot/fast
 true
}
