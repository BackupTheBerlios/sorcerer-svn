   VERSION=( "2.6.16.2" "2.6.16.1" "2.6.16" "2.6.15.6" "2.6.15.5" "2.6.15.4" "2.6.15.3" "2.6.15.2" "2.6.15.1" "2.6.15" )
      SAFE=( "2.6.16.2" "2.6.16.1" "2.6.16" "2.6.15.6" "2.6.15.5" "2.6.15.4" "2.6.15.3" "2.6.15.2" "2.6.15.1" "2.6.15" )
  CATEGORY="kernel"
 ATTRIBUTE="solo"
    SOURCE="pub/linux/kernel/v${VERSION:0:3}/linux-$VERSION.tar.bz2"
       URL="$KERNEL_URL"
  HOMEPAGE="http://www.kernel.org"
       REQ=( "lilo"
             "laptop-mode-tools:::for conserving battery power on laptops"
             "module-init-tools:::for tools for modular kernel" )
   PROTECT="/boot
            /lib/modules"
  EPROVIDE="linux-kernel"
  disable  archive necropolis
  ESTIMATE="2500"
      DESC="linux provides 2.6.x stable kernels.
linux is a clone of the Unix kernel,
written from scratch by Linus Torvalds
with assistance from a loosely-knit
team of hackers across the Net.
It aims towards POSIX and Single
UNIX Specification compliance.
It has all the features you would
expect in a modern fully-fledged
Unix kernel, including true multitasking,
virtual memory, shared libraries,
demand loading, shared copy-on-write
executables, proper memory management,
and TCP/IP networking."


# pre_build() {
#   default_pre_build                      &&
#   mkdir  -p              /usr/src        &&
#   cd                     /usr/src        &&
#   rm     -rf             linux-$VERSION  &&
#   mv         $BUILD_DIR  /usr/src        &&
#   chown  -R  root:root   linux-$VERSION  &&
#   chmod  -R  go-w        linux-$VERSION  &&
#   rm     -fr                             /usr/src/linux  &&
#   ln     -s              linux-$VERSION  /usr/src/linux
# }


apply_linux_patch() {
 case $VERSION in
   2.6.12|2.6.12.1)
     patch -p1 < $SCRIPT_DIR/qla_patch          ;;
 esac
}


build() {
  backup_modules()  {
    if  [  -d   /lib/modules/$VERSION      ];  then
    rm     -rf  /lib/modules/$VERSION.old
    cp     -a   /lib/modules/$VERSION      \
                /lib/modules/$VERSION.old
    fi
  }


  store_config()  {  cp  .config  $CONFIG_LOGS/$BSPELL/linux-config;  }

  install_kernel()  {
    SM="System.map"
    BV="${VERSION}"
    BZ=$(  find  .  -name  bzImage  )

    rm     -rf                  /boot/$BV
    mkdir  -p                   /boot/$BV
    cp          $BZ             /boot/$BV/linux
    cp              System.map  /boot/$BV
    rm     -f                   /boot/System.map
    ln     -s   $BV/System.map  /boot/System.map
  }

  run_make_menuconfig()  {
    wiz_kill
    CONFIG_KERNEL="true"
    while  $CONFIG_KERNEL; do
      make  menuconfig
      if    query  "Repeat menuconfig?" n
      then  CONFIG_KERNEL=true
      else  CONFIG_KERNEL=false
      fi
    done
  }


  symlink_headers()  {
    case  $( arch )  in
      x86_64)  ASM="asm-x86_64"  ;;
           *)  ASM="asm-i386"    ;;
    esac
                                         [  -e  /usr/include/asm  ]  ||
    ln  -s  /usr/src/linux/include/$ASM         /usr/include/asm

                                         [  -e  /usr/include/asm-generic  ]  ||
    ln  -s  /usr/src/linux/include/asm-generic  /usr/include/asm-generic

                                         [  -e  /usr/include/linux  ]  ||
    ln  -s  /usr/src/linux/include/linux        /usr/include/linux
  }


  restore_linux_configs()  {
    local  CUR="$CONFIG_LOGS/$BSPELL/linux-config"
    local  OLD="$CONFIG_LOGS/$BSPELL/linux-config.old"

    symlink_headers

    if    [  -f   $CUR  ];  then  cp  $CUR  .config
    elif  [  -f   $OLD  ];  then  cp  $OLD  .config
          run_make_menuconfig
    else  run_make_menuconfig
    fi
  }


  install_headers()  {
    install_header_dir()  {
      if    [   -h   /usr/include/$1  ];  then  rm  -f   /usr/include/$1
      elif  [   -d   /usr/include/$1  ];  then  rm  -rf  /usr/include/$1
      fi

      mkdir  -p   /usr/include/$1
      cp     -R        include/$1/*   \
                  /usr/include/$1
    }

    install_header_dir  asm
    install_header_dir  asm-generic
    install_header_dir  linux
    true
  }

  make_modules()  {
    if    grep  -q  "CONFIG_MODULES=y"  .config
    then  make   modules  &&  backup_modules
    fi
  }

  make_modules_install() {
    if    grep  -q  "CONFIG_MODULES=y"  .config
    then  make   modules_install
    fi
    rm  -f                  /lib/modules/$VERSION/{build,source}
    ln  -s  /usr/src/linux  /lib/modules/$VERSION/build
    ln  -s  /usr/src/linux  /lib/modules/$VERSION/source
  }

  compile_and_install()  {
    yes  ""  |  make  oldconfig
    store_config         &&
    make   bzImage       &&
    make_modules         &&
    prepare_install      &&
    make_modules_install &&
    install_kernel       &&
    install_headers      &&
    rm      -fr             /usr/src/linux  $BUILD_DIR/.ccache
    cp      -a  $BUILD_DIR  /usr/src/linux
  }

  rm      -fr             /usr/src/linux  &&
  ln      -s  $BUILD_DIR  /usr/src/linux  &&
  cd                      /usr/src/linux  &&
  apply_linux_patch      &&
  restore_linux_configs  &&
  activate_voyeur        &&
  compile_and_install    &> $C_FIFO
}


post_install() {

  update_etc_lilo_conf
  backup_lib

  if    [  -x  /usr/bin/mail   ];  then  MAILER=/usr/bin/mail
  elif  [  -x  /usr/bin/mailx  ];  then  MAILER=/usr/bin/mailx
  fi

  if    [  -n  "$MAILER"    ]  &&
        [  -n  "$SORCERER"  ]
  then
    echo  -e  "New linux kernel installed.\nReboot the box, please."  |
    $MAILER  -s  "Reboot reminder from sorcery."  $SORCERER
  fi

}
