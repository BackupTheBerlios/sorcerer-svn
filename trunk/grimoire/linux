# Please do not update the version for linux
# before creating new tested complete
# linux-modular.d/{i586,x86_64}.config

[[ -n $VERSION ]] ||
    stable 2.6.32.3 2.6.32.2 2.6.32 2.6.31.6 2.6.30.4
    legacy 2.6.30.4
   require lilo
case $SPELL in
 linux-modular) : ;;
             *)
  optional module-init-tools '' '' for tools for modular kernel
 ;;
esac
  category kernel
 attribute console
       url $KERNEL_URL
case $VERSION in
 *rc*) source pub/linux/kernel/v${VERSION:0:3}/testing/linux-$VERSION.tar.bz2 ;;
    *) source pub/linux/kernel/v${VERSION:0:3}/linux-$VERSION.tar.bz2 ;;
esac
  homepage http://www.kernel.org
   protect /boot
   protect /lib/modules
  eprovide linux-kernel
  disable  libtool_fix
  estimate 2600
      desc 'linux provides 2.6.x stable kernels.
linux is a clone of the Unix kernel,
written from scratch by Linus Torvalds
with assistance from a loosely-knit
team of hackers across the Net.
It aims towards POSIX and Single
UNIX Specification compliance.
It has all the features you would
expect in a modern fully-fledged
Unix kernel, including true multitasking,
virtual memory, shared libraries,
demand loading, shared copy-on-write
executables, proper memory management,
and TCP/IP networking.'


## apply_linux_patch must not be nested within build()
apply_linux_patch() { :; }

configure(){
 local CUR="$CONFIG_LOGS/$SPELL/linux-config"
 local OLD="$CONFIG_LOGS/$SPELL/linux-config.old"


 copy(){ if [[ -f $1 ]]; then cp "$1" "$2"; chmod 600 "$2"; fi; }

 if ! [[ -f $CUR ]]; then
  if ! sources_cached "$SPELL"; then
   echo "Sources must be download before configuration."
   leech $SPELL
  fi
  pre_build           &&
  optimize            &&
  apply_linux_patch   &&
  copy "$OLD" .config &&
  make menuconfig     &&
  cp         .config $CUR
  if   [[ -n   $BUILD_DIR ]] &&
       [[ -d   $BUILD_DIR ]]
  then rm -fr "$BUILD_DIR"
  fi
  clear
  echo "Linux kernel configuration complete."
  cd /tmp
 fi
}

build(){
 backup_modules(){
  if [ -d  /lib/modules/$VERSION ]; then
  rm   -rf /lib/modules/$VERSION.old
  cp   -a  /lib/modules/$VERSION \
           /lib/modules/$VERSION.old
  fi
 }


 store_config(){ cp .config $CONFIG_LOGS/$SPELL/linux-config; }

 install_kernel(){
  SM=System.map
  BV=$VERSION
  BZ=$( find . -type f -name bzImage )

  rm    -rf                /boot/$BV
  mkdir -p                 /boot/$BV
  cp        $BZ            /boot/$BV/linux
  chmod 600                /boot/$BV/linux
  cp            System.map /boot/$BV
  rm    -f                 /boot/System.map
  ln    -s  $BV/System.map /boot/System.map
 }

 install_header(){
  mkdir   -vpm 755                           /usr/include/asm
  install -vm  644 include/asm/asm-offsets.h /usr/include/asm
  mkdir   -vpm 755                           /usr/include/linux
  install -vm  644 include/linux/autoconf.h  /usr/include/linux
  install -vm  644 include/linux/compile.h   /usr/include/linux
  true
 }

 restore_linux_configs(){
  local CUR="$CONFIG_LOGS/$SPELL/linux-config"
  local OLD="$CONFIG_LOGS/$SPELL/linux-config.old"

  if   [[ -f  $CUR ]]; then cp $CUR .config; chmod 600 .config
  elif [[ -f  $OLD ]]; then cp $OLD .config; chmod 600 .config
  fi
 }


 make_modules(){
  if   grep -q "CONFIG_MODULES=y" .config
  then make  modules && backup_modules
  fi
 }


 gzip_modules(){
  local KO="/lib/modules/$VERSION/kernel/"
  find $KO -type f -size +4096c | xargs -r --max-lines=64 gzip -v1
  find $KO -type f              | sed   -n '/\.gz$/p' |
  while read; do mv -v "$REPLY" "${REPLY%\.gz}"; done
 }


 make_modules_install(){
  if grep -q "CONFIG_MODULES=y" .config; then 
   mkdir -p  /lib/modules
   chmod 700 /lib/modules
   make modules_install
   # gzip_modules
  fi
 }


 compile_and_install(){
  apply_linux_patch
  restore_linux_configs
  yes "" | make oldconfig
  store_config
  make   bzImage        &&
  make_modules          &&
  prepare_install       &&
  make_modules_install  &&
  make firmware_install &&
  install_kernel        &&
  install_header
 }

 rm -fr            /usr/src/linux &&
 mv     $BUILD_DIR /usr/src/linux &&
 cd                /usr/src/linux &&
 compile_and_install
}


post_install(){
 update_etc_lilo_conf

# show_installed initramfs    |
# sed -n      '/^initramfs/p' | pipe_queue "$CAST_QUEUE" com

 if   [[ -x /usr/bin/mail  ]]; then MAILER=/usr/bin/mail
 elif [[ -x /usr/bin/mailx ]]; then MAILER=/usr/bin/mailx
 fi

 if   [[ -n $MAILER   ]] &&
      [[ -n $SORCERER ]]
 then
  echo    -e "New linux kernel installed.\nReboot the box, please." |
  $MAILER -s "Reboot reminder from sorcery." $SORCERER
 fi

 grep -lr   '^/lib/modules/' $INSTALL_LOGS |
 sed        "s:.*[/]::;/^$/d;/^$SPELL$/d"  |
 pipe_queue "$CAST_QUEUE" com

 rm -rf /boot/fast
 true
}


current(){
 if   ! [[ -f      /usr/include/linux/autoconf.h ]]
 then cp /usr/src/linux/include/linux/autoconf.h \
                   /usr/include/linux/autoconf.h
      true
 fi
}
