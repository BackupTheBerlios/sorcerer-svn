   VERSION=( 2.6.23.9 2.6.23.8 2.6.22.13 2.6.22.12 2.6.22.9 2.6.22.7 )
      SAFE=( 2.6.23.9 2.6.23.8 2.6.22.13 2.6.22.12 2.6.22.9 2.6.22.7 )
  CATEGORY='kernel'
 ATTRIBUTE='archive_off console'
    SOURCE="pub/linux/kernel/v${VERSION:0:3}/linux-$VERSION.tar.bz2"
       URL="$KERNEL_URL"
  HOMEPAGE='http://www.kernel.org'
# glibc added to requirement for linux spell to temporarily
# adjust ordering of spell so glibc is cast first when both are queued
#      REQ=( 'glibc lilo'
       REQ=( 'lilo'
             'laptop-mode-tools:::for conserving battery power on laptops'
             'module-init-tools:::for tools for modular kernel' )
## initramfs still being tested
#            'initramfs:::to create an initramfs image'
   PROTECT='/boot
            /lib/modules'
  EPROVIDE='linux-kernel'
  disable  libtool_fix
  ESTIMATE='2600'
      DESC='linux provides 2.6.x stable kernels.
linux is a clone of the Unix kernel,
written from scratch by Linus Torvalds
with assistance from a loosely-knit
team of hackers across the Net.
It aims towards POSIX and Single
UNIX Specification compliance.
It has all the features you would
expect in a modern fully-fledged
Unix kernel, including true multitasking,
virtual memory, shared libraries,
demand loading, shared copy-on-write
executables, proper memory management,
and TCP/IP networking.'


# pre_build() {
#   default_pre_build                      &&
#   mkdir  -p              /usr/src        &&
#   cd                     /usr/src        &&
#   rm     -rf             linux-$VERSION  &&
#   mv         $BUILD_DIR  /usr/src        &&
#   chown  -R  root:root   linux-$VERSION  &&
#   chmod  -R  go-w        linux-$VERSION  &&
#   rm     -fr                             /usr/src/linux  &&
#   ln     -s              linux-$VERSION  /usr/src/linux
# }


## apply_linux_patch must not be nested within build()
apply_linux_patch() {
 case $VERSION in
   2.6.12|2.6.12.1)
     patch -p1 < $SCRIPT_DIR/qla_patch          ;;
 esac
}

configure()  {
  local  CUR="$CONFIG_LOGS/$SPELL/linux-config"
  local  OLD="$CONFIG_LOGS/$SPELL/linux-config.old"


  copy()  {  if  [[ -f $1 ]]; then cp "$1" "$2"; fi;  }

  if      !  [  -f  $CUR  ];  then
    if    !  sources_cached  "$SPELL";  then
      echo  "Sources must be download before configuration."
      leech  -w  $SPELL
    fi
    pre_build                    &&
    optimize                     &&
    apply_linux_patch            &&
    copy       "$OLD"   .config  &&
    make       menuconfig        &&
    cp         .config  $CUR
    if    [   -n   "$BUILD_DIR"  ]  &&
          [   -d   "$BUILD_DIR"  ]
    then  rm  -fr  "$BUILD_DIR"
    fi
    clear
    echo  "Linux kernel configuration complete."
    cd    /tmp
  fi
}

build() {
  backup_modules()  {
    if  [  -d   /lib/modules/$VERSION      ];  then
    rm     -rf  /lib/modules/$VERSION.old
    cp     -a   /lib/modules/$VERSION      \
                /lib/modules/$VERSION.old
    fi
  }


  store_config()  {  cp  .config  $CONFIG_LOGS/$SPELL/linux-config;  }

  install_kernel()  {
    SM="System.map"
    BV="${VERSION}"
    BZ=$(  find  .  -name  bzImage  )

    rm     -rf                  /boot/$BV
    mkdir  -p                   /boot/$BV
    cp          $BZ             /boot/$BV/linux
    cp              System.map  /boot/$BV
    rm     -f                   /boot/System.map
    ln     -s   $BV/System.map  /boot/System.map
  }

  install_header()  {
    mkdir   -m 0755  -p                         /usr/include/asm
    install -m 0644  include/asm/asm-offsets.h  /usr/include/asm
    mkdir   -m 0755  -p                         /usr/include/linux
    install -m 0644  include/linux/autoconf.h   /usr/include/linux
    install -m 0644  include/linux/compile.h    /usr/include/linux
    true
  }

  restore_linux_configs()  {
    local  CUR="$CONFIG_LOGS/$SPELL/linux-config"
    local  OLD="$CONFIG_LOGS/$SPELL/linux-config.old"

    if    [  -f   $CUR  ];  then  cp  $CUR  .config
    elif  [  -f   $OLD  ];  then  cp  $OLD  .config
    fi
  }


  make_modules()  {
    if    grep  -q  "CONFIG_MODULES=y"  .config
    then  make   modules  &&  backup_modules
    fi
  }

  make_modules_install() {
    if    grep  -q  "CONFIG_MODULES=y"  .config
    then  make   modules_install
    fi
  }


  compile_and_install()  {
    apply_linux_patch
    restore_linux_configs
    yes  ""  |  make  oldconfig
    store_config
    make   bzImage       &&
    make_modules         &&
    prepare_install      &&
    make_modules_install &&
    install_kernel       &&
    install_header
  }

  # chown  -R root:root  $BUILD_DIR      &&
  # chmod  -R go-w       $BUILD_DIR      &&
  rm  -fr              /usr/src/linux  &&
  mv       $BUILD_DIR  /usr/src/linux  &&
  cd                   /usr/src/linux  &&
  compile_and_install
}


post_install() {
  create_initramfs()  {
    [  -d  /media/initramfs  ]  ||  mkdir  -p  /media/initramfs
    [  -d  /media/root       ]  ||  mkdir  -p  /media/root

    if    [  -d                     /lib64  ]
    then  find  /bin /dev /etc /lib /lib64 /sbin  -not -type d
    else  find  /bin /dev /etc /lib        /sbin  -not -type d
    fi  |
    sed   "\,^/etc/sorcery/,d
           \,^/etc/gconf/,d
           \,^/etc/fonts/,d
           \,^/lib.*\.la$,d
           \,^/lib.*lib.*\.a$,d
           1i/media/initramfs
           1i/media/root
           1i/proc
           1i/sys"  |
    cpio  -o -H newc              |
    gzip  -9  > /boot/initramfs
  }

  update_etc_lilo_conf
  backup_lib

  case  $OPTS  in
    initramfs)  create_initramfs  ;;
  esac

  if    [  -x  /usr/bin/mail   ];  then  MAILER=/usr/bin/mail
  elif  [  -x  /usr/bin/mailx  ];  then  MAILER=/usr/bin/mailx
  fi

  if    [  -n  "$MAILER"    ]  &&
        [  -n  "$SORCERER"  ]
  then
    echo  -e  "New linux kernel installed.\nReboot the box, please."  |
    $MAILER  -s  "Reboot reminder from sorcery."  $SORCERER
  fi

                 MODULES="$( show_installed linux-26-module )"
  if    [  -n  "$MODULES"  ];  then
    echo       "$MODULES"  |  pipe_queue  "$CAST_QUEUE"  "com"
  fi

  true
}


current()  {
  if    !  [  -f      /usr/include/linux/autoconf.h  ]
  then  cp  /usr/src/linux/include/linux/autoconf.h  \
                      /usr/include/linux/autoconf.h
        true
  fi
}
