# NVIDIA-Linux-* might not be compatible with linux versions
# 3.3.x and 3.4.x according to Evert.

# linux sneakily invokes subversion during compilation
# however there is no apparent reason why.

# 3.3.1 has too many bugs with it, does not compile on IA32.

# 3.6.x 3.5.x and 3.4.x fail final linking on Athlon-XP
# eboot.(c.text+0x14d2): undefined reference to `_mmx_memcpy'
# staying with the linux 3.2.x branch for now.

with version stable	3.2.35		3.2.34		3.2.33		3.2.32		3.2.31		3.2.30		3.2.29		3.2.28		3.2.27		3.2.26		3.2.25
with version 3.7.x	3.7.1		3.7.0
with version 3.6.x	3.6.11		3.6.10		3.6.9		3.6.8		3.6.7		3.6.6		3.6.5		3.6.4		3.6.3		3.6.2		3.6.1		3.6
with version 3.5.x	3.5.7		3.5.6		3.5.5		3.5.4		3.5.3		3.5.2		3.5.1		3.5
with version 3.4.x	3.4.24		3.4.23		3.4.22		3.4.21		3.4.20		3.4.19		3.4.18		3.4.17		3.4.16		3.4.15		3.4.14		3.4.13		3.4.12		3.4.11		3.4.10		3.4.9		3.4.8		3.4.7		3.4.6		3.4.5		3.4.4		3.4.3		3.4.2		3.4.1		3.4
with version 3.3.x	3.3.8		3.3.7		3.3.6		3.3.5		3.3.4		3.3.3		3.3.2		3.3.1		3.3
with version 3.2.x	3.2.35		3.2.34		3.2.33		3.2.32		3.2.31		3.2.30		3.2.29		3.2.28		3.2.27		3.2.26		3.2.25		3.2.24		3.2.23		3.2.22		3.2.21		3.2.20		3.2.19		3.2.18		3.2.17		3.2.16		3.2.15		3.2.14		3.2.13		3.2.11		3.2.10		3.2.9		3.2.8		3.2.7		3.2.6		3.2.5		3.2.4		3.2.3		3.2.2		3.2.1		3.2
with version "git 3.2.y"	3.2.34	3.2.33	3.2.32		3.2.31		3.2.30		3.2.29		3.2.28		3.2.27		3.2.26		3.2.25		3.2.24		3.2.23		3.2.22		3.2.21		3.2.20		3.2.19		3.2.18		3.2.17		3.2.16		3.2.15		3.2.14		3.2.13		3.2.11		3.2.10		3.2.9		3.2.8		3.2.7		3.2.6		3.2.5		3.2.4		3.2.3		3.2.2		3.2.1		3.2
with version 3.1.x	3.1.10		3.1.9		3.1.6		3.1.4		3.1.3		3.1.2		3.1.1		3.1
with version 3.0.x	3.0.57		3.0.56		3.0.55		3.0.54		3.0.53		3.0.52		3.0.51		3.0.50		3.0.49		3.0.47		3.0.46		3.0.45		3.0.44		3.0.43		3.0.42		3.0.41		3.0.40		3.0.39		30.0.38		3.0.37		3.0.36		3.0.35		3.0.34		3.0.33		3.0.32		3.0.31		3.0.30		3.0.29		3.0.28		3.0.27		3.0.26		3.0.25		3.0.24		3.0.17		3.0.9		3.0.8		3.0.4		3.0.3		3.0.2		3.0.1		3.0
with version 2.6.39.x	2.6.39.4	2.6.39.3	2.6.39.2	2.6.39.1
with version 2.6.38.x	2.6.38.8	2.6.38.6	2.6.38.5	2.6.38.4	2.6.38.3
with version 2.6.37.x     2.6.37.6	2.6.37.4	2.6.37.3	2.6.36.3
with version 2.6.36.x	2.6.36.4	2.6.36.3	2.6.36.2	2.6.36.1
with version 2.6.35.x	2.6.35.14	2.6.35.13	2.6.35.12	2.6.35.11	2.6.35.10
with version 2.6.34.x	2.6.34.13	2.6.34.12	2.6.34.11	2.6.34.10	2.6.34.9	2.6.34.8
with version 2.6.32.x	2.6.32.60	2.6.32.59	2.6.32.41	2.6.32.40	2.6.32.28	2.6.32.24
with version 2.6.30.x	2.6.30.10	2.6.30.9	2.6.30.8
with version 2.6.27.x	2.6.27.62	2.6.27.59	2.6.27.58	2.6.27.57	2.6.27.54
with base    initramfs module-init-tools
with elect   linux-firmware
with role    kernel
with trait   console litelink makej solo
# given solo trait in order to cast faster on smp using parallel make.

with source  stable	$KERNEL_URL pub/linux/kernel/v${VERSION:0:1}.x/linux-$VERSION.tar.xz
with source  3.7.x	$KERNEL_URL pub/linux/kernel/v${VERSION:0:1}.x/linux-$VERSION.tar.xz
with source  3.6.x	$KERNEL_URL pub/linux/kernel/v${VERSION:0:1}.x/linux-$VERSION.tar.xz
with source  3.5.x	$KERNEL_URL pub/linux/kernel/v${VERSION:0:1}.x/linux-$VERSION.tar.xz
with source  3.4.x	$KERNEL_URL pub/linux/kernel/v${VERSION:0:1}.x/linux-$VERSION.tar.xz
with source  3.3.x	$KERNEL_URL pub/linux/kernel/v${VERSION:0:1}.x/linux-$VERSION.tar.xz
with source  3.2.x	$KERNEL_URL pub/linux/kernel/v${VERSION:0:1}.x/linux-$VERSION.tar.xz
with source  "git 3.2.y"	linux-v$VERSION.tar v$VERSION git://git.kernel.org/pub/scm/linux/kernel/git/bwh/linux-3.2.y.git
with source  3.1.x	$KERNEL_URL pub/linux/kernel/v${VERSION:0:1}.x/linux-$VERSION.tar.xz
with source  3.0.x	$KERNEL_URL pub/linux/kernel/v${VERSION:0:1}.x/linux-$VERSION.tar.xz
with source  2.6.39.x	$KERNEL_URL pub/linux/kernel/v${VERSION:0:1}.x/linux-$VERSION.tar.xz
with source  2.6.38.x	$KERNEL_URL pub/linux/kernel/v${VERSION:0:1}.x/linux-$VERSION.tar.xz
with source  2.6.37.x	$KERNEL_URL pub/linux/kernel/v${VERSION:0:1}.x/linux-$VERSION.tar.xz
with source  2.6.36.x	$KERNEL_URL pub/linux/kernel/v${VERSION:0:1}.x/linux-$VERSION.tar.xz
with source  2.6.35.x	$KERNEL_URL pub/linux/kernel/v${VERSION:0:1}.x/linux-$VERSION.tar.xz
with source  2.6.34.x	$KERNEL_URL pub/linux/kernel/v${VERSION:0:1}.x/linux-$VERSION.tar.xz
with source  2.6.33.x	$KERNEL_URL pub/linux/kernel/v${VERSION:0:1}.x/linux-$VERSION.tar.xz
with source  2.6.32.x	$KERNEL_URL pub/linux/kernel/v${VERSION:0:1}.x/linux-$VERSION.tar.xz
with source  2.6.30.x	$KERNEL_URL pub/linux/kernel/v${VERSION:0:1}.x/linux-$VERSION.tar.xz
with source  2.6.27.x	$KERNEL_URL pub/linux/kernel/v${VERSION:0:1}.x/linux-$VERSION.tar.xz
with info    last 20120728
with info    home http://www.kernel.org/
with protect /boot
with protect /lib/modules
with hold    linux-kernel
with info    cite 'stable linux kernels
linux is a clone of the Unix kernel,
written from scratch by Linus Torvalds
with assistance from a loosely-knit
team of hackers across the Net.
It aims towards POSIX and Single
UNIX Specification compliance.
It has all the features you would
expect in a modern fully-fledged
Unix kernel, including true multitasking,
virtual memory, shared libraries,
demand loading, shared copy-on-write
executables, proper memory management,
and TCP/IP networking.'

# [ -f   $GRIMOIRE/linux.d/trim ] &&
# while read               CONF      SIZE  DESC
# do    with switch  OMIT_$CONF "" "$SIZE $DESC"
# done < $GRIMOIRE/linux.d/trim


build(){

 geode(){
  if    grep -q Geode /proc/cpuinfo; then
   if   grep flags    /proc/cpuinfo | grep -wq 3dnow
   then echo GEODE_LX
   else echo MGEODGX1
   fi
  else false
  fi
 }

 amd(){
  if    grep "model name" /proc/cpuinfo | grep -q AMD; then
     if grep "flags"      /proc/cpuinfo | grep -qw "lm";       then echo K8
   elif grep "flags"      /proc/cpuinfo | grep -qw "3dnowext"; then echo K7
                                                               else echo K6
     fi
  else false
  fi
 }

 intel(){
# pentium MMX and pentium II has MMX, but pentium pro does not
# pentium III has SSE, but Pentium II does not.
# CONFIG_M686 is Pentium Pro the default

  if    grep "model name" /proc/cpuinfo | grep -q "Intel\|Celeron\|Pentium"; then
   if   grep "model name" /proc/cpuinfo | grep -q "Core\|Xeon"    &&
        grep "cpu family" /proc/cpuinfo | grep -q "6";            then echo CORE2
   elif grep "model name" /proc/cpuinfo | grep -q "Pentium\|Xeon" &&
        grep "cpu family" /proc/cpuinfo | grep -q "15";           then echo PENTIUM4
   elif grep "model name" /proc/cpuinfo | grep -q "Pentium(R) M"; then echo PENTIUMM
   elif grep "model name" /proc/cpuinfo | grep -q "Pentium III";  then echo PENTIUMIII
   elif grep "flags"      /proc/cpuinfo | grep -qw "sse";         then echo PENTIUMIII
   elif grep "model name" /proc/cpuinfo | grep -q "Pentium II";   then echo PENTIUMII
   elif grep "flags"      /proc/cpuinfo | grep -qw "mmx";         then echo PENTIUMII
   fi
   else false
  fi
 }


 get_cpu_ia32(){
  geode ||
  amd   ||
  intel
 }

 get_cpu_x86_64(){
  if   grep "model name" /proc/cpuinfo | grep -q "AMD";   then echo K8
  elif grep "model name" /proc/cpuinfo | grep -q "Atom";  then echo ATOM
  elif grep "model name" /proc/cpuinfo | "Core\|Xeon" &&
       grep "cpu family" /proc/cpuinfo | grep -q "6";     then echo CORE2
  elif grep "model name" /proc/cpuinfo | grep -q "Intel"; then echo PSC
  else false
  fi
 }


 adjust_config(){
  if [ -n "$2" ]; then
   sed -i "s:$1=y:# $1 is not set:" .config
   sed -i "s:# CONFIG_M$2 is not set:CONFIG_M$2=y:" .config
  fi
 }


 get_cpu(){
  case $HOSTYPE in
   x86_64) adjust_config "CONFIG_GENERIC_CPU" $( get_cpu_x86_64 ) ;;
        *) adjust_config "CONFIG_M686"        $( get_cpu_ia32   ) ;;
  esac
 }


 install_kernel(){
  SM="System.map"
  BV="${KVERSION}"
  BZ=$( find . -type f -name bzImage )

  mkdir  -pvm 755            $DESTDIR/boot/$BV
  install -vm 600 $BZ        $DESTDIR/boot/$BV/linux
  chmod 600                  $DESTDIR/boot/$BV/linux
  install -vm 600 System.map $DESTDIR/boot/$BV
  rm    -f                   $DESTDIR/boot/System.map
  ln    -s $BV/System.map    $DESTDIR/boot/System.map
 }

 install_kernel_um(){
  BV="${KVERSION}"
  strip linux
  mkdir  -pvm 755       $DESTDIR/boot/$BV          $DESTDIR/usr/bin
  install -vm 755 linux $DESTDIR/boot/$BV/linux.um
  ln      -v            $DESTDIR/boot/$BV/linux.um $DESTDIR/usr/bin/
 }

 install_header(){
  mkdir   -vm 755 -p                                     $DESTDIR/usr/include/{asm,linux}
  install -vm 644 include/generated/asm-offsets.h        $DESTDIR/usr/include/asm
  install -vm 644 include/generated/{autoconf,compile}.h $DESTDIR/usr/include/linux
  true
 }

 restore_linux_configs(){

  local NAME
  case $HOSTTYPE in
   x86_64) NAME=x86_64 ;;
        *) if   [ -f /root/linux-smp ]; then NAME="ia32-smp"
           elif [ -f /root/linux-up  ]; then NAME="ia32-up"
           elif gzip -cd /proc/config.gz | grep CONFIG_SMP=y
           then NAME="ia32-smp"
           else NAME="ia32-up"
           fi ;;
  esac

  if   [ -f            $SCRIPT_DIR/$PROGRESS/$NAME ]
  then install -vm 600 $SCRIPT_DIR/$PROGRESS/$NAME    .config
  else install -vm 600 $SCRIPT_DIR/$PROGRESS/ia32-smp .config
  fi

  [ -n "${FEATURE[base]}" ] || get_cpu
 }

 restore_linux_configs_um(){
  local NAME
  case $HOSTTYPE in
   x86_64) NAME=x86_64-um ;;
        *) NAME=ia32-um   ;;
  esac

  if   [ -f            $SCRIPT_DIR/$PROGRESS/$NAME ]
  then install -vm 600 $SCRIPT_DIR/$PROGRESS/$NAME .config
  else false
  fi
 }

 trim_config(){
  for OMIT in $OPTS; do
   case $OMIT in
    OMIT_NETDEV_1000)
            sed -i "s:CONFIG_SCSI_BNX2_ISCSI=m:# CONFIG_SCSI_BNX2_ISCSI is not set:" .config
            sed -i "s:${OMIT/OMIT_/CONFIG_}=.*:# ${OMIT/OMIT_/CONFIG_} is not set:" .config  ;;
    OMIT_*) sed -i "s:${OMIT/OMIT_/CONFIG_}=.*:# ${OMIT/OMIT_/CONFIG_} is not set:" .config  ;;
   esac
  done
 }

 gzip_modules(){
  if ! spell_installed sorcerer-installer; then
   local KO="$DESTDIR/lib/modules/$KVERSION$1/kernel/"
   find $KO -type f -size +4096c | xargs -r -P $( nproc ) --max-lines=64 gzip -v9
   find $KO -type f              | sed   -n '/\.gz$/p' |
   while read; do mv -v "$REPLY" "${REPLY%\.gz}"; done
  fi
 }

 strip_modules(){
  find $DESTDIR/lib/modules/$KVERSION$1/kernel -type f -name \*.ko |
  xargs --max-lines=256 strip --strip-unneeded
 }

 install_documentation(){
  find        Documentation -type f | xargs    --max-lines=256 chmod 644
  find        Documentation -type d | xargs -r --max-lines=256 chmod 755
  mkdir  -pvm 755           $DESTDIR/usr/src/linux/
  install -vm 644 README    $DESTDIR/usr/src/linux/
  mv      -v  Documentation $DESTDIR/usr/src/linux/
  rm     -fr                $DESTDIR/usr/src/linux/Documentation/DocBook
  find $DESTDIR -type f -name \*.c     | xargs -r --max-lines=64 rm -f
  find $DESTDIR -type f -name Makefile | xargs -r --max-lines=64 rm -f
 }

 compile_and_install(){
  restore_linux_configs
  # trim_config
  yes "" | make oldconfig
  make modules &&
  make bzImage &&
  make modules_install  INSTALL_MOD_PATH=$DESTDIR && strip_modules &&
  make firmware_install INSTALL_MOD_PATH=$DESTDIR &&
  install_kernel &&
  install_header &&
  install_documentation &&
  gzip_modules
 }

 compile_and_install_um(){ (
  if   ! restore_linux_configs_um
  then rm -fr $BUILD_DIR; return
  fi

  unset CFLAGS CXXFLAGS LDFLAGS
  sed -i "s:EXTRAVERSION =.*:EXTRAVERSION = .um:" Makefile
  yes "" |
  make ARCH=um oldconfig
  make ARCH=um modules &&
  make ARCH=um         &&
  make ARCH=um modules_install INSTALL_MOD_PATH=$DESTDIR &&
  strip_modules .um &&
  install_kernel_um &&
  gzip_modules  .um &&
  rm -fr $BUILD_DIR
  return 0
 ) }

 kversion(){
  fm() { sed "s:^$1 =::p;d" /usr/src/linux/Makefile; }
  local r
  r=$( fm VERSION      ); [ -z "$r" ] || KVERSION="${r// /}"
  r=$( fm PATCHLEVEL   ); [ -z "$r" ] || KVERSION+=".${r// /}"
  r=$( fm SUBLEVEL     ); [ -z "$r" ] || KVERSION+=".${r// /}"
  r=$( fm EXTRAVERSION ); [ -z "$r" ] || KVERSION+=".${r// /}"
 }

 export   CFLAGS="${CFLAGS//-fstack-protector-all/}"
 export   CFLAGS="${CFLAGS//-fstack-protector/}"
 export CXXFLAGS="${CXXFLAGS//-fstack-protector-all/}"
 export CXXFLAGS="${CXXFLAGS//-fstack-protector/}"

 rm -fr            /usr/src/linux &&
 mv     $BUILD_DIR /usr/src/linux &&
 kversion                         &&
#compile_and_install_um           &&
 cd                /usr/src/linux &&
 compile_and_install
}


post_install(){
 if   [[ -x /usr/bin/mail  ]]; then MAILER=/usr/bin/mail
 elif [[ -x /usr/bin/mailx ]]; then MAILER=/usr/bin/mailx
 fi

 if   [[ -n $MAILER   ]] &&
      [[ -n $SORCERER ]]
 then
  echo    -e "New linux kernel installed.\nReboot the box, please." |
  $MAILER -s "Reboot reminder from sorcery." $SORCERER
 fi

 grep -lr   '^/lib/modules/' $INSTALL_LOGS |
 sed        "s:.*[/]::;/^$/d;/^$SPELL$/d"  |
 pipe_queue "$MOIL_QUEUE"
 true
}
