# Copyright Kyle Sallee 2011 through 2013
# All rights reserved.
# For use with the distribution sorcerer only!
# Additional notes are at the bottom of the spell.

with info    last   20131128
with version stable 20131128
with base    init-functions
with role    administration/boot
with trait   console solo
with info    home http://sorcerer.silverice.org
with info    cite 'cgroup setup utility

The cgroup spell provides 3 init-scripts:
/etc/init.d/cgroup;
/etc/init.d/cgroup-init-rootfs;
/etc/init.d/cgroup-init-root.

# /etc/init.d/cgroup start
mounts a private control group on /sys/fs/cgroup/
It runs during sysinit and runlevel.

# /etc/init.d/cgroup-init-rootfs configure
Allows creation and configuration of persistent control groups.
The control groups available from the rootfs;
partition resources among root file systems.
Resources are: processors delegation; processor cycles; and memory.

Root file system hostnames becomes control group names.
Configuration must be done only from /+/base/
or the root file delegated the task of booting.
Content of file /etc/origin on the rootfs provides
the hostname of the progenitor root file system.

Partitioning resource utilization provides performance boons.
Resources are not unlimited.
Resource utilization is not limited by default.
Limiting resource utilization to a control group
grants increased availability of that resource type
to control groups outside of the limited hierarchy.

Almost no attention is granted to control groups
hierarchies within root file systems.
Instead resource utilization controls
for entire root file systems are set.
If   http.muffinmaker.org/cpu.shares contains a higher value
than work.muffinmaker.org/cpu.shares
then the performance balance favors the http server.
If   work.muffinmaker.org/cpuset.cpus provides fewer processors
than http.muffinmaker.org/cpuset.cpus
then the performance balance also favors the http server

The original intention of control groups
was to limit resource utilization within a single root file system.
Control groups are still utilized that way.
SAs that feel disdain towards micromanagement
of resource utilization within a root file system;
entirely disregard the following information.

# /etc/init.d/cgroup-init-root configure
allows creation and configuration of persistent control groups
used by processes within a root file systems.

Control groups for services exist as:
/sys/fs/cgroup/{fast,norm,slow,idle}/sys/$SERVICE/
Control groups for user owned processes exist as:
/sys/fs/cgroup/{fast,norm,slow,idle}/user/$USER/

Processes within the "fast" "norm" "slow" "idle"
control group hierarchies compete for processing cycles
only when processing cycles become a scarce commodity.
Processes in the "fast" control group hierarchy receive the most.
Processes in the "idle" control group hierarchy receive the least.
If processing power is available in abundance
then processes within the idle control group hierarchy run at full speed.

The kdm, gdm, xdm, and X processes
are assigned to the fast control group hierarchy.
This ensures that the X server
can not be starved for processing cycles
while competing with aggressive processes.
An aggressive process could be a program
running with the assistance of the wine API.
win32 programs tend not to relinquish idle cycles.
The control group hierarchy ensures
frames per second in X do not drop
when running megalomaniac processes.

Sorcery tools join the slow control group hierarchy.
The slow control group receives no more than 1/64th
available processing power while competing with norm and fast.
Therefore, updates and installation of software projects
proceed without measurable primary role performance loss.

Users are allowed to migrate owned processes
to different task files when those user owned task files exist.
/sys/fs/cgroup/{fast,norm,slow,idle}/user/$USER/tasks
The above line indicates expected task file names.

Migration into the fast control group hierarchy
is denied while the /sys/fs/cgroup/fast/$USER/
control group does not exist.
Therefore, the system administrator must run:
# /etc/init.d/cgroup-init-root configure
and create the persistent control groups
for users granted the privilege
of unfair resource consumption.

Separate root file systems should be delegated
for role related services such as httpd and email.
However, if a root file system shares roles
then performance as a server or workstation
can be adjusted by changing the values within
/sys/fs/cgroup/norm/{sys,user}/cpu.shares
With each at 1024 the competing loads are balanced
evenly between the roles of server and workstation.
Granting 2408 to /sys/fs/cgroup/norm/sys/cpu.shares
shifts the balance towards a server.
Granting 2408 to /sys/fs/cgroup/norm/user/cpu.shares
shifts the balance towards a workstation.

Consider a computer with 3 root file systems:
/+/base/; /+/work/; /+/test/.
The test root file system is only used for testing updates.
Better to know that the effectiveness in the role of workstation
will not be compromised following an update.
Therefore, /+/test/ is updated first.
However, completion of the update is not urgent,
because the computer is currently being used as a workstation.
Therefore, resource limits of 1 processor and 2G of RAM
and no more than 1/64th cpu.shares might be set
the root file system by creating a persistent control group for it.

Now that the resource limits for /+/test/ are set
the bulk of the available resources can be utilized
by the /+/work/ and the /+/base/ root file systems.
Or limits can also be applied to the /+/base/ root file system.

Not explicitly granting resource limits
allows processes on root file systems
to complete for resources as group
in a fair yet unlimited fashion.

A fair yet unlimited fashion implies two aspects.
First, "first come first served" is honored.
Second, equality is granted only when the resource is scarce.

Processes on a workstation or web server root file system
might consume 90% RAM not being using for the block cache.
The percentage can change when processes
from another root file system request memory.
The root file system with an overzealous utilization of RAM
may have RAM content written to swap space.
Then the RAM is re-tasked to address space
allocated to processes within another root file system.

Creation of persistent control groups
and prudent setting of resource consumption
rarely creates "less than ideal" resource utilization.
"Less than ideal" resource utilization more often happens
as a result of a process utilizing excessive resources
because it is not running within a control group
that limits resource consumption.
Megalomaniac processes are rare.

Both the simple  rootfs           control group implementation
and  the complex root file system control group implementation
exist concurrently.
Automatic configuration for control groups within root file systems is provided.
Automatic configuration for control groups within the rootfs    is not provided.
This control group implementation is designed
to be suitable for all types of deployment.'

build(){
 local d="$DESTDIR" s="$SCRIPT_DIR"

 icg(){
  install -vm 700 -d "$d/$1"
  find               "$s/$1" -mindepth 1 -printf "%P\n" |
  tar     -C         "$s/$1" --exclude-vcs --no-recursion -cPT - |
  tar     -C         "$d/$1" -pxf -
  find               "$d/$1" -type f | xargs -r -L=64 chmod 644
  find               "$d/$1" -type d | xargs -r -L=64 chmod 755
  chmod       700    "$d"$1
 }

 install -vm 755 -d "$d"/{etc,lib/cgroup,sbin,usr/{bin,share/bash-completion/completions}}/
 install -vm 755 -t "$d"/sbin/       "$s"/sbin/*
 install -vm 755 -t "$d"/usr/bin/    "$s"/bin/*
 install -vm 755 -t "$d"/lib/cgroup/ "$s"/lib/cgroup/*
 install -vm 755 -t "$d"/usr/share/bash-completion/completions/ \
                                     "$s"/bash-completion/*
 icg /etc
}
