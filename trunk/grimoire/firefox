# Seems to be linking with nspr and nss although it is instructed not to?


# some of the system libraries commented out because they random crashes
# which ones I am not certain about.
# --with-system-jpeg --with-system-nspr --with-system-nss --enable-system-sqlite


# firefox 3.5.5 must be compiled and linked with it's own xulrunner instead of system installed?

# When glitz is enabled:
# make[5]: *** No rule to make target `../../../dist/lib/libmozglitz.a', needed by `libthebes.a'.  Stop.
# glitz support incomplete?
# In version 3.5 compiling with --enable-glitz made no obvious difference.

    stable 3.6.13 3.6.12 3.6.11
   require GConf bzip2 hicolor-icon-theme libnotify startup-notification sqlite zip
#  require GConf-dbus bzip2 hicolor-icon-theme libnotify startup-notification sqlite zip
  optional gnome-vfs  '' --disable-gnomevfs for gnomevfs support
  optional libgnomeui '' --disable-gnomeui  for libgnomeui support
#   switch --enable-glitz --disable-glitz 'enable glitz for use with cairo'
  category network/web
 attribute client library solo x11
#   source http://ftp.mozilla.org/pub/mozilla.org/firefox/releases/$VERSION/source/firefox-$VERSION.source.tar.bz2
    source http://releases.mozilla.org/pub/mozilla.org/firefox/releases/$VERSION/source/firefox-$VERSION.source.tar.bz2
  homepage http://www.mozilla.com/en-US/firefox/firefox.html
#      opts --with-system-jpeg
      opts --with-system-zlib
      opts --with-system-bz2
      opts --enable-startup-notification
      opts --disable-static
      opts --enable-system-cairo
      opts --enable-system-lcms
      opts --enable-application=browser
#     opts --with-system-libxul
#     opts --with-libxul-sdk=/usr
#     opts --disable-libxul
#     opts --disable-xul
#      opts --with-system-nspr
#      opts --with-system-nss
      opts --without-system-nss
      opts --without-system-nspr
      opts --enable-strip
      opts --enable-default-toolkit=cairo-gtk2
      opts --disable-mochitest
      opts --disable-tests
      opts --enable-official-branding
#      opts --enable-system-sqlite

## --with-system-png requires png with apng support and currently the patch does not apply
#     opts --with-system-png

# Avoid failed cast when iwlib.h is not installed (provided by wireless-tools)
# Why does firefox need wireless anyway? 
# Furthermore, necko-wifi may not me supported on Linux anyway if I understand
# things correctly (J. Merka, 03/01/10).
      opts --disable-necko-wifi

# Enable official branding should be fine because we are not 
# distributing the builds. This option names the browser Firefox instead
# of Minefield but launches a EULA on the first start:
#      opts --enable-official-branding
#      opts --with-distribution-id='sorcerer'
# These two should be safe for Sorcerer
      opts --disable-updater
      opts --disable-installer

           #--with-system-png
           #--enable-cpp-rtti
#            'jdk:::for building the javaXPCOM components' )
# compilation with javaXPCOM component support is not working
# eprovide mozilla
  estimate 29000
      desc 'web brower based upon mozilla gecko HTML rendering engine'

build(){

 symlink_icons(){
  install -vdm 755 $DESTDIR/usr/share/applications
  install -vm  644 $SCRIPT_DIR/applications.d/firefox.desktop $DESTDIR/usr/share/applications
  mkdir -p $DESTDIR/usr/share/icons/hicolor/{16x16,32x32,48x48}/apps
  ln -fs /usr/lib/firefox-$VERSION/chrome/icons/default/default16.png \
         $DESTDIR/usr/share/icons/hicolor/16x16/apps/firefox.png
  ln -fs /usr/lib/firefox-$VERSION/chrome/icons/default/default32.png \
         $DESTDIR/usr/share/icons/hicolor/32x32/apps/firefox.png
  ln -fs /usr/lib/firefox-$VERSION/chrome/icons/default/default48.png \
         $DESTDIR/usr/share/icons/hicolor/48x48/apps/firefox.png
  true
 }

export LDFLAGS+=" -Wl,-rpath,/usr/lib/firefox-$VERSION"

sed -i 's:/bin/pwd:pwd:g;s:/bin/ls:ls:g' build/unix/mozilla.in

local LIBDIR=/usr/lib
if   [[ $HOSTTYPE == x86_64 ]] && ! [[ $CFLAGS =~ -m32 ]]
then LIBDIR+=64
fi

./configure \
--prefix=/usr \
--sysconfdir=/etc \
--localstatedir=/var \
--libdir=$LIBDIR \
--enable-optimize="$CFLAGS" \
$OPTS &&
make  &&
make install "DESTDIR=$DESTDIR" &&
mkdir -p $DESTDIR/usr/lib &&
ln -fs firefox-$VERSION $DESTDIR/$LIBDIR/mozilla &&
rm -fr $LIBDIR/mozilla &&
symlink_icons
}

post_install(){
 default_post_install
 grep -lr "^/usr/lib/mozilla/plugins/\|^/usr/lib64/mozilla/plugins/" $INSTALL_LOGS |
 basenames |
 pipe_queue "$CAST_QUEUE" com
 true
}
