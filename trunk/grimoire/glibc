# /usr/src/sorcery/glibc/glibc-2.7/install/usr/include/linux/capability.h:73: 
# error: expected specifier-qualifier-list before '__le32'
# Looks like we will not be using linux 2.6.25.4
# LVERSION=( 2.6.25.4 2.6.24.3 2.6.24.2 2.6.22.9 2.6.22.1 )
  LVERSION=(          2.6.24.3 2.6.24.2 2.6.22.9 2.6.22.1 )
  stable 2.7 2.6.1 2.6 2.5 2.4 2.3.6 2.3.5 2.3.4
  secure 2.7 2.6.1 2.6 2.5 2.4 2.3.6 2.3.5 2.3.4

    IGNORE='ref\|2001\|^2\.[4-5]\|libidn\|linuxthreads\|ports'
  CATEGORY='development'
 ATTRIBUTE='library solo'

case $VERSION in
  2.7*)
 BVERSION=( 1.0.2 )
   SOURCE=( "glibc/glibc-$VERSION.tar.bz2"
            "glibc/glibc-libidn-$VERSION.tar.bz2"
            "pub/linux/kernel/v${LVERSION:0:3}/linux-$LVERSION.tar.bz2" )
#           "crypt_blowfish-$BVERSION.tar.gz" )
       URL="$GNU_URL"
    URL[2]="$KERNEL_URL"
    URL[3]="http://www.openwall.com/crypt/
             ftp://ftp.openwall.com/pub/projects/crypt/"  ;;
  2.6*)
   SOURCE=( "glibc/glibc-$VERSION.tar.bz2"
            "glibc/glibc-libidn-$VERSION.tar.bz2"
            "pub/linux/kernel/v${LVERSION:0:3}/linux-$LVERSION.tar.bz2" )
       URL="$GNU_URL"
    URL[2]="$KERNEL_URL"  ;;
  2.3.6)
   SOURCE=( "glibc/glibc-$VERSION.tar.bz2"
            "glibc/glibc-linuxthreads-$VERSION.tar.bz2"
            "glibc/glibc-libidn-$VERSION.tar.bz2"
            "pub/linux/kernel/v${LVERSION:0:3}/linux-$LVERSION.tar.bz2" )
       URL="$GNU_URL"
    URL[3]="$KERNEL_URL"  ;;
  2.3.5)
   SOURCE=( "glibc/glibc-$VERSION.tar.bz2"
            "glibc/glibc-linuxthreads-$VERSION.tar.bz2"
            "glibc/glibc-libidn-$VERSION.tar.bz2"
            "pub/linux/kernel/v${LVERSION:0:3}/linux-$LVERSION.tar.bz2" )
       URL="$GNU_URL"
    URL[3]="$KERNEL_URL"
    USE_GCC="gcc-v3.4" ;;
  2.5)
   SOURCE=( "glibc/glibc-$VERSION.tar.bz2"
            "glibc/glibc-libidn-$VERSION.tar.bz2"
            "pub/linux/kernel/v${LVERSION:0:3}/linux-$LVERSION.tar.bz2" )
       URL="$GNU_URL"
    URL[2]="$KERNEL_URL"  ;;
esac

  HOMEPAGE='http://www.gnu.org/software/libc'
       REQ='perl libselinux'
#             'libselinux:--with-selinux:--without-selinux:for selinux support' )


   EXCLUDE='/etc/ld.so.cache
            /etc/ld.so.conf
            /etc/localtime'
   PROTECT='/etc/hostname
            /etc/hosts
            /etc/host.conf
            /etc/hosts
            /etc/hosts.allow
            /etc/hosts.deny
            /etc/hosts.equiv
            /etc/hosts.lpd
            /etc/networks
            /etc/nsswitch.conf
            /etc/resolv.conf
            /lib/ld-linux.so.2
            /lib64/ld-linux-x86-64.so.2
            /sbin/ldconfig'
disable lib64
case $HOSTTYPE in
 x86_64) RPATH='/usr/lib64/gconv' ;;
      *) RPATH='/usr/lib/gconv'   ;;
esac
  ESTIMATE='19500'
      DESC='glibc is a C library for use with GNU/Hurd and GNU/Linux.
glibc - Library for use with GNU/Hurd and GNU/Linux.
GNU C Library is one of the most important components
of the GNU Hurd and most modern Linux distributions.
It is used by almost all C programs and provides the
most essential program interface.

gd libpng and zlib are optional requirements for
building memusagestat, a program to generate graphic
from memory profiling data.'


build(){

 del_library_cache(){
  ldconfig
  rm -fr ${LIBRARY_CACHE:-/lib.old}
  ldconfig
  true
 }


 install_glibc(){
  install -vm 600 ../nscd/nscd.conf $IR/etc/
  mkdir   -vp                       $IR/var/db
  mkdir   -vm 700                   $IR/var/db/nscd

  cd    $IR
  rm -f $IR/etc/{localtime,ld.so.*}

  elf_of glibc > $ELF_LOGS/glibc

  prepare_install

  LD_LIBRARY_PATH="$LLP" LD_PRELOAD="$LPO" $LD_SO /bin/cp -av * /

  del_library_cache
  true
 }


 quick_test(){
  echo "Performing a quick test to see if the new glibc works."
  if   LD_LIBRARY_PATH="$LLP" $LD_SO /bin/true
  then echo "glibc is ready to install."
  else echo "glibc is not working as expected."
       echo "Compilation aborted before installing new glibc."
       false
  fi
 }


 supported_locales(){
  mkdir -p                      $IR/usr/share/i18n
  cp    ../localedata/SUPPORTED $IR/usr/share/i18n
 }


 blowfish_patch(){
  patch -p1 < $SCRIPT_DIR/glibc-$VERSION-crypt_blowfish-$BVERSION.patch
  mv crypt/sysdeps/unix/crypt.h          crypt/sysdeps/unix/gnu-crypt.h
  cp crypt_blowfish-$BVERSION/*.{h,c,S}  crypt/sysdeps/unix/
 }


 LPO="$LD_PRELOAD"
unset  LD_PRELOAD LTDL_LIBRARY_PATH LD_LIBRARY_PATH LD_RUN_PATH

export   CFLAGS="-O2 $( echo "${CFLAGS// /$LF}" | grep march )"
export CXXFLAGS="$CFLAGS"
export LDFLAGS='-Wl,-s -Wl,-O1'
export LC_ALL=C

echo "Linux header version $LVERSION"

            IR=$PWD/install
mkdir  -p  $IR/etc
touch      $IR/etc/ld.so.conf
if   [ $HOSTTYPE == x86_64 ]
then LD_SO="$IR/lib64/ld-linux-x86-64.so.2"; LLP="$IR/lib64:$IR/usr/lib64"
else LD_SO="$IR/lib/ld-linux.so.2"         ; LLP="$IR/lib:$IR/usr/lib"
fi


mkdir -p                                  $IR/usr/include/sys
cd        linux-$LVERSION
make      include/linux/version.h
make      include/asm
cp    -rL include/{asm,asm-generic,linux} $IR/usr/include
cd    ..
rm    -fr linux-$LVERSION   /usr/include/{asm,asm-generic,linux}
cp    -a  $IR/usr/include/* /usr/include

# ^^ linux headers installed before glibc begins compilation.

if   [ -f /usr/include/sys/capability.h ]
then cp   /usr/include/sys/capability.h   $IR/usr/include/sys 
fi

case $VERSION in
 2.7*) patch -p1 < $SCRIPT_DIR/glibc-2.7.patch
       patch -p1 < $SCRIPT_DIR/glibc-2.7-i586-memcpy_chk.patch
       # blowfish_patch
       mv  glibc-libidn-* libidn
       KVER=$( uname -r | cut -d '.' -f-3 | tr -d '.' )
       (( KVER >= 2624 )) &&
       OPTS+=' --enable-kernel=2.6.24' ;;
 2.6*) mv  glibc-libidn-* libidn
       KVER=$( uname -r | cut -d '.' -f-3 | tr -d '.' )
       (( KVER >= 2615 )) &&
       OPTS+=' --enable-kernel=2.6.15' ;;
 2.4)  mv  glibc-libidn-2.4 libidn  ;;
 2.5)  mv  glibc-libidn-*   libidn
       KVER=$( uname -r | cut -d '.' -f-3 | tr -d '.' )
       (( KVER >= 2615 )) &&
       OPTS+=' --enable-kernel=2.6.15' ;;
esac

HEADERS="--with-headers=$BUILD_DIR/install/usr/include"

mkdir build
cd    build
../configure      \
--host=$BUILD     \
--build=$BUILD    \
--prefix=/usr     \
--disable-profile \
--with-tls        \
--with-elf        \
--without-gd      \
--without-cvs     \
--enable-shared   \
--enable-add-ons  \
$HEADERS          \
$OPTS             && # make all tests install install_root=$IR &&
make all install install_root=$IR &&
supported_locales &&
quick_test        &&
install_glibc
}


post_install(){
 default_post_install
          get_provider  nss_ldap |
 pipe     show_installed         |
 LC_ALL=C sort                   |
          uniq -d                |
          pipe_queue $CAST_QUEUE com
 /sbin/init u
}
