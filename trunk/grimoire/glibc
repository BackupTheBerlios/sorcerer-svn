# Do not update glibc stable to a newer version
# without releasing new I/R images.

with info    good 20131206
with info    last 20130812
# rpc support required for firefox
with version   stable 2.17 2.13
with version unstable 2.18
with version testing  2.18
case $VERSION in
 2.18*)
with also --enable-obsolete-rpc ;;
 2.17*)
with also --enable-obsolete-rpc ;;
#with switch  --enable-obsolete-rpc --disable-obsolete-rpc 'enable when NFS will be used' ;;
esac
with role    development
with trait   library makej multilib-dual solo
with base    perl linux-headers
with also    --without-selinux
with source    stable $GNU_URL glibc/glibc-$VERSION.tar.xz
with source  unstable $GNU_URL glibc/glibc-$VERSION.tar.xz
with source   testing $GNU_URL glibc/glibc-$VERSION.tar.xz
with info    home http://www.gnu.org/software/libc/
with info    docs http://www.gnu.org/software/libc/manual/
with omit    /etc/ld.so.cache
with omit    /etc/ld.so.conf
with omit    /etc/localtime
with protect /etc/hostname
with protect /etc/hosts
with protect /etc/host.conf
with protect /etc/hosts
with protect /etc/hosts.allow
with protect /etc/hosts.deny
with protect /etc/hosts.equiv
with protect /etc/hosts.lpd
with protect /etc/networks
with protect /etc/nsswitch.conf
with protect /etc/resolv.conf
with protect /lib/ld-linux.so.2
with protect /lib64/ld-linux-x86-64.so.2
with protect /sbin/ldconfig
case $HOSTTYPE in
 x86_64) RPATH='/usr/lib64/gconv' ;;
      *) RPATH='/usr/lib/gconv'   ;;
esac
with info    cite 'GNU implementation of a C library'

build(){ (
 local arch setarch

 install_glibc(){
  install -vm 600 -t "$DESTDIR"/etc/         ../nscd/nscd.conf
  install -vm 755 -d "$DESTDIR"/var/db
  install -vm 700 -d "$DESTDIR"/var/db/nscd

  cd    "$DESTDIR"
  rm -f "$DESTDIR"/etc/{localtime,ld.so.*}

  true
 }

 quick_test(){
  if ! [[ $CC =~ -m32 ]]; then
   echo "Performing a quick test to see if the new glibc works."
   if   LD_LIBRARY_PATH="$LLP" $LD_SO /bin/true
   then echo "glibc is ready to install."
   else echo "glibc is not working as expected."
        echo "Compilation aborted before installing new glibc."
        false
   fi
  fi
 }

 supported_locales(){
  install -vm 755 -d  "$DESTDIR"/usr/share/i18n/
  install -vm 644 -t  "$DESTDIR"/usr/share/i18n/ ../localedata/SUPPORTED
 }

 if   [ $HOSTTYPE == x86_64 ] && ! [[ $CFLAGS =~ -m32 ]]
 then LD_SO="$DESTDIR/lib64/ld-linux-x86-64.so.2"; LLP="$DESTDIR/lib64:$DESTDIR/usr/lib64"
 else LD_SO="$DESTDIR/lib/ld-linux.so.2"         ; LLP="$DESTDIR/lib:$DESTDIR/usr/lib"
 fi

 if [[ $HOSTTYPE == x86_64 ]] && [[ $CFLAGS =~ -m32 ]]; then
  export CC="gcc -m32"
  with also    --host=${MACHTYPE/x86_64/i686}
  arch=i686; setarch=setarch
# else
#  arch=$HOSTTYPE
 fi

 if   [ -n "${FEATURE[base]}" ]
 then with also --enable-multi-arch
 fi

 unset LTDL_LIBRARY_PATH LD_LIBRARY_PATH LD_RUN_PATH

   CFLAGS="-O2 $( echo "${CFLAGS// /$LF}" | grep march )"
#CXXFLAGS="$CFLAGS"
  LDFLAGS='-Wl,-s -Wl,-O1'
   LC_ALL=C

#export CFLAGS CXXFLAGS LDFLAGS LC_ALL
 export CFLAGS LDFLAGS LC_ALL
 unset  CXXFLAGS

 install -vm 755 -d "$DESTDIR"/usr/include/sys/
 install -vm 755 -d "$DESTDIR"/etc/
 touch              "$DESTDIR"/etc/ld.so.conf

 if   [ -f /usr/bin/uname ]
 then with also --enable-kernel=$( uname -r )
 fi

 sed -i 's:/bin/pwd:pwd:g' configure

 mkdir build
 cd    build
 $setarch $arch \
 ../configure       \
  --prefix=/usr     \
  --disable-profile \
  --with-tls        \
  --with-elf        \
  --without-gd      \
  --without-cvs     \
  --enable-shared   \
  --enable-add-ons  \
  --enable-stackguard-randomization \
  --with-headers=/usr/include \
  $OPTS &&
 $setarch $arch make     all &&
 $setarch $arch make install install_root="$DESTDIR" &&
 quick_test        &&
 supported_locales &&
 install_glibc
) }

post_install(){
          get_provider nss_ldap  |
 pipe     show_installed         |
 LC_ALL=C sort                   |
          uniq -d                |
          pipe_queue $MOIL_QUEUE

 /etc/init.d/locale-archive reload

 if ! [[ $VERSION == 2.13 ]]; then
  echo tzdata | pipe_queue "$LOAD_QUEUE"
  echo tzdata | pipe_queue "$MOIL_QUEUE"
 fi

 true
}

current(){
 case $VERSION in
  2.17) grep Required-Start /etc/init.d/var_run_nscd | grep -q var_run ;;
 esac
}
