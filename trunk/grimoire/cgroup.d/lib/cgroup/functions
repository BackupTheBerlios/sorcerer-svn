# Copyright Kyle Sallee 2011.
# All rights reserved.
# For use with the distribution sorcerer only!

cgroup_find(){
if [ -n "$CG" ]; then return 0; fi
 local DEV JUNK TYPE
 while read DEV CG TYPE JUNK; do
  if   [[ $DEV == cgroup      ]] && [[ $TYPE == cgroup ]]; then return 0
  elif [[ $DEV == cgroup_root ]] && [[ $TYPE == tmpfs  ]]; then return 0
  fi
 done < /proc/mounts
 unset CG
 false
}

cgroup_join(){
# $1 = name of control group
# $2 = cpuset

 local CG
 if     [ -n "$1" ] && cgroup_find; then
  if    [ -d "$1" ] || mkdir -pm 700 "$CG/$1"; then
   if   [ -n "$2" ] && [ -f "$CG/$1/cpuset.cpus" ]
   then echo "$2" >         "$CG/$1/cpuset.cpus"
   fi
   echo $BASHPID  >         "$CG/$1/tasks"
  else false
  fi
  else false
 fi
}

cgroup_exit(){
# If possible
# then depart cgroup by moving tasks
# into higher level cgroup task file
# $1 = cgroup to depart from

 local CG R U="${1%/*}"

 if   [ -n     "$1"       ] && cgroup_find &&
      [ -f "$CG/$1/tasks" ] &&
      [ -w "$CG/$U/tasks" ]
 then while read R; do echo "$R" > $CG/$U/tasks; done < "$CG/$1/tasks"
 else false
 fi
}

cgroup_pids(){
# returns PIDs from specified cgroup's task file
# $1 = cgroup
# $2 = cgroup
# $3 = cgroup
# ...
# $REPLY = the PIDs

 local CG R
 REPLY=

 if cgroup_find; then
  while   [ -n "$1" ]; do
   if     [ -r "$CG/$1/tasks" ]; then
    while read R; do
     if   [ -z  "$REPLY" ]
     then REPLY="$R"
     else REPLY="$REPLY $R"
     fi
    done < "$CG/$1/tasks"
   fi
   shift 1
  done
 fi

 [ -n "$REPLY" ]
}

cgroup_kill(){
# sends signal to all processes in specified control group
# $1 = control group
# $2 = signal

 local CG R
 if   [ -n     "$1"       ] && cgroup_find &&
      [ -r "$CG/$1/tasks" ]
 then while read R; do kill $2 $R; done < "$CG/$1/tasks"
 else false
 fi
}

cgroup_oust(){
# removes specified control group
# $1 = control group
# $2 = control group
# $3 = control group
# ...

 local CG
 if cgroup_find; then
  while [ -n "$1" ]; do
   if   [ -r "$CG/$1/tasks" ]
   then rmdir --ignore-fail-on-non-empty "$CG/$1"
   fi
   shift 1
  done
 else false
 fi
}
