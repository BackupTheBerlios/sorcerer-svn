#!/bin/bash

# Copyright Kyle Sallee 2011, 2012, 2013
# All rights reserved.
# For use with the distribution sorcerer only!

### BEGIN INIT INFO
# Default-Mode: 500
# Required-Start: cgroup
# Default-Start:
# S
# Short-Description: initializes limits for rootfs cgroup
# Long-Description: Used to allocate/partition resources among
#	different root file systems.
#	Can be used to configure and limit the
#	RAM and processors granted to each root file system.
### END INIT INFO

. /lib/lsb/init-functions

ecg=/etc/cgroup.rootfs

only start configure reset
name cgroup-rootfs
deny control

reset(){
 if   [ -d /aux/new$ecg ]; then
  rm -fr             $ecg.old
  mv     $ecg $ecg.old
  cp -a  /aux/new$ecg /etc/
  echo "Current configuration moved  from $ecg         to $ecg.old"
  echo "Default configuration copied from /aux/new$ecg to $ecg"
 fi
}

init_cgroup(){
 # some cgroup files must have only one line written at a time.
 catlines(){
  while read
  do    echo "$REPLY" > "$1" || echo "Failed write was: echo \"$REPLY\" > \"$1\""
  done
 }

 local d f

 [ -d "$ecg" ] &&
 find "$ecg" -type d -printf '%P\n' | sort |
 while read d; do
  mkdir -p       "/sys/fs/cgroup/$d"
  find              "$ecg/$d" -maxdepth 1 -type f -not -empty -printf '%P\n' |
  while read f; do 
   if   [ -f     "/sys/fs/cgroup/$d/$f" ]
   then catlines "/sys/fs/cgroup/$d/$f" < "$ecg/$d/$f"
   fi
  done
 done
}

configure(){

 display(){
   BACKTITLE=$"cgroup init-script"
       TITLE=$"Defined control groups"
   dialog \
    --backtitle "$BACKTITLE" \
    --title     "$TITLE" \
    --timeout 60 \
    --msgbox   "$( find $ecg -type d -printf "%P\n" | sort )" 0 0
 }

 main_menu(){
  mm(){
   BACKTITLE=$"cgroup init-script"
       TITLE=$"configuration main menu"
        HELP=$"Please select an action."

   dialog \
    --backtitle "$BACKTITLE" \
    --title     "$TITLE" \
    --timeout 60 \
    --stdout --ok-label Select \
    --cancel-label Done \
    --menu   "$HELP" 0 0 0 \
    "Edit"    "control" \
    "Display" "control groups" \
    "Create"  "control group"
  }

  while  REPLY=$( mm ); do
   case $REPLY in
    Display) display ;;
    Edit) edit ;;
    Exit) return 0 ;;
    Create) create ;;
   esac
  done
 }

 edit(){
  controls(){ find $ecg/norm/sys/ -type f -printf '%f control\n' | sort -u; }

  control_menu(){
    BACKTITLE=$"cgroup init-script"
        TITLE=$"control selection menu"
         HELP=$"Please select a control"

   dialog \
    --backtitle "$BACKTITLE" \
    --title     "$TITLE" \
    --stdout --timeout 60 \
    --cancel-label Done \
    --menu   "$HELP" 0 0 0 \
    $( controls )
  }

  content(){
   if   [ -s "$1" ]
   then read < "$1"; echo "$REPLY"
   else echo "Unset"
   fi
  }

  cgroups(){
   echo /
   find $ecg -type d -printf '%P\n' | sed '/^$/d' | sort
  }

  vals(){
   cgroups |
   while read; do echo "$REPLY"; content "$ecg/$REPLY/$CONTROL"; done
  }

  cgroup_menu(){
    BACKTITLE=$"cgroup init-script"
        TITLE=$"control group selection menu"
         HELP=$"Please select a control group."

   export IFS="
"

   dialog \
    --backtitle "$BACKTITLE" \
    --title     "$TITLE" \
    --stdout --timeout 60 \
    --cancel-label Back \
    --menu   "$HELP" 0 0 0 \
    $( vals )
  }

  input_menu(){
    BACKTITLE=$"cgroup init-script"
        TITLE=$"value entry"
         HELP=$"Please enter an appropriate value."

   dialog \
    --backtitle "$BACKTITLE" \
    --title     "$TITLE" \
    --stdout --timeout 60 \
    --cancel-label Abort \
    --inputbox "$HELP" 0 0 "$(< $ecg/$CG/$CONTROL )"
  } 

  while  CONTROL=$( control_menu ); do
   while      CG=$( cgroup_menu  ); do
             VAL=$( input_menu   ) &&
      [ -n "$VAL" ] &&
      echo "$VAL" > $ecg/$CG/$CONTROL
   done
  done
 }

 create(){

  name_entry(){
    BACKTITLE=$"cgroup init-script"
        TITLE=$"control group name entry"
         HELP=$"Please enter the new control group name without using space.  Using slash is allowed to define a sublevel control group."

   dialog \
    --backtitle "$BACKTITLE" \
    --title     "$TITLE" \
    --timeout 60 \
    --stdout --no-cancel \
    --inputbox "$HELP" 10 45
  }

  make_it(){
    BACKTITLE=$"cgroup init-script"
        TITLE=$"new top level control group creation"

   mkdir -pm 755 $ecg/$NEW

   dialog \
    --backtitle "$BACKTITLE" \
    --title     "$TITLE" \
    --timeout 60 --stdout --no-cancel \
    --msgbox "$ecg/$NEW created" 0 0
  }

  valid(){
   [ -n "$NEW" ] &&
   [ -z "$( echo "$NEW" | tr -d '[:alnum:]/_-' )" ]
  }

  if   NEW=$( name_entry ) && valid
  then make_it
  fi
 }

 main_menu
}

start(){
 if   log_warning_msg "/sys/fs/cgroup initializing"; init_cgroup
 then log_success_msg "/sys/fs/cgroup initialized"
 else log_failure_msg "/sys/fs/cgroup failed initialization"; return 1
 fi
}
