#!/bin/bash

# Copyright Kyle Sallee 2011, 2012
# All rights reserved.
# For use with the distribution sorcerer only!

### BEGIN INIT INFO
# Default-Mode: 500
# Required-Start: sys
# Default-Start: S
# Short-Description: mount cgroup on /sys/fs/cgroup and set limits
### END INIT INFO

declare -A subsys subsys_d

. /lib/lsb/init-functions

only start configure status reset
name /sys/fs/cgroup
deny control

subsys_default(){
 if [ -z "${!subsys[*]}" ]; then
  subsys[clone_children]=1
  subsys[cpu]=1
  subsys[cpuset]=1
  subsys[cpuacct]=1
  subsys[freezer]=1
  subsys[memory]=1
 fi
}

subsys_to_optlist(){
 subsys_default
 optlist=
 if   [ -x /etc/init.d/sentinel-memory ]
 then subsys[memory]=1
 fi

 for s in ${!subsys[*]}; do
  if   [ -n "$optlist" ]
  then optlist+=",$s"
  else optlist="$s"
  fi
 done
}

reset(){
 if   [ -d /etc.ori/cgroup ]; then
  rm -fr                             /etc/cgroup.old
  mv                     /etc/cgroup /etc/cgroup.old
  cp -a  /etc.ori/cgroup /etc/
  echo "Current configuration moved  from /etc/cgroup     to /etc/cgroup.old"
  echo "Default configuration copied from /etc.ori/cgroup to /etc/cgroup"
 fi
}

init_cgroup(){
 # some cgroup files must have only one line written at a time.
 catlines(){
  while read; do
   if ! echo "$REPLY" > $1; then
    echo "Failed write was:"
    echo "echo \"$REPLY\" > $1"
   fi
  done
 }

 find /etc/cgroup -type d -not -empty -printf "/sys/fs/cgroup/%P\n" | sort | xargs --max-lines=64 mkdir -pm 755
 find /etc/cgroup -type f -not -empty -printf "%P\n" |
 while read; do
  if   [ -f     /sys/fs/cgroup/$REPLY ]
  then catlines /sys/fs/cgroup/$REPLY < /etc/cgroup/$REPLY
  fi
 done
}

configure(){

 display(){
   BACKTITLE=$"cgroup init-script"
       TITLE=$"Defined control groups"
   dialog \
    --backtitle "$BACKTITLE" \
    --title     "$TITLE" \
    --timeout 60 \
    --msgbox   "$( find /etc/cgroup -type d -printf "%P\n" | sort )" 0 0
 }

 main_menu(){
  mm(){
   BACKTITLE=$"cgroup init-script"
       TITLE=$"configuration main menu"
        HELP=$"Please select an action."

   dialog \
    --backtitle "$BACKTITLE" \
    --title     "$TITLE" \
    --timeout 60 \
    --stdout --ok-label Select \
    --cancel-label Done \
    --menu   "$HELP" 0 0 0 \
    "Edit"    "control" \
    "Display" "control groups" \
    "Create"  "control group" \
    "Subsys"  "selection"
  }

  while  REPLY=$( mm ); do
   case $REPLY in
    Display) display ;;
    Edit) edit ;;
    Exit) return 0 ;;
    Create) create ;;
    Subsys) subsys ;;
   esac
  done
 }

 subsys(){
# declare -A subsys_d
  subsys_d[blkio]=$"control disk/storage I/O when CFQ scheduler is enabled"
  subsys_d[clone_children]=$"sub cgroup inherits values from cgroup above"
  subsys_d[cpu]=$"scheduling allocation of processing power"
  subsys_d[cpuset]=$"mostly for SMP boxes and controlling task migration"
  subsys_d[cpuacct]=$"track and report processing power used by each cgroup"
  subsys_d[freezer]=$"pause and resume running of processes within a cgroup"
  subsys_d[memory]=$"limit and control RAM and swap provided to cgroup"

  subsys_checklist(){
   for s in ${!subsys_d[*]}; do
    echo "$s"
    echo "subsys" 
    if   [ -n "${subsys[$s]}" ]
    then echo on
    else echo off
    fi
    echo "${subsys_d[$s]}"
   done
  }

  subsys_menu(){
    BACKTITLE=$"cgroup init-script"
        TITLE=$"subsystem selection"
         HELP=$"[x]=enabled [ ]=disabled  Space toggles and arrows navigate"

   export IFS="
"
   dialog \
    --backtitle "$BACKTITLE" \
    --title     "$TITLE" \
    --stdout --timeout 120 \
    --no-cancel \
    --ok-label $"Done" \
    --item-help \
    --separate-output \
    --checklist "$HELP" 0 0 0 $( subsys_checklist )
  }

  subsys_default
  if ss=$( subsys_menu ); then
   subsys=()
   mkdir -pm 700               /etc/init.d/conf.d/
   touch                       /etc/init.d/conf.d/cgroup
   sed -i '/subsys/d'          /etc/init.d/conf.d/cgroup
#  echo "declare -A subsys" >> /etc/init.d/conf.d/cgroup
   for s in $ss
   do  echo "subsys[$s]=1"; subsys[$s]=1
   done                     >> /etc/init.d/conf.d/cgroup
  fi
 }

 edit(){
  controls(){ find /etc/cgroup/norm/sys/ -type f -printf '%f control\n' | sort -u; }

  control_menu(){
    BACKTITLE=$"cgroup init-script"
        TITLE=$"control selection menu"
         HELP=$"Please select a control"

   dialog \
    --backtitle "$BACKTITLE" \
    --title     "$TITLE" \
    --stdout --timeout 60 \
    --cancel-label Done \
    --menu   "$HELP" 0 0 0 \
    $( controls )
  }

  content(){
   if   [ -s "$1" ]
   then read < "$1"; echo "$REPLY"
   else echo "Unset"
   fi
  }

  cgroups(){
   echo /
   find /etc/cgroup -type d -printf '%P\n' | sed '/^$/d' | sort
  }

  vals(){
   cgroups |
   while read; do echo "$REPLY"; content "/etc/cgroup/$REPLY/$CONTROL"; done
  }

  cgroup_menu(){
    BACKTITLE=$"cgroup init-script"
        TITLE=$"control group selection menu"
         HELP=$"Please select a control group."

   export IFS="
"

   dialog \
    --backtitle "$BACKTITLE" \
    --title     "$TITLE" \
    --stdout --timeout 60 \
    --cancel-label Back \
    --menu   "$HELP" 0 0 0 \
    $( vals )
  }

  input_menu(){
    BACKTITLE=$"cgroup init-script"
        TITLE=$"value entry"
         HELP=$"Please enter an appropriate value."

   dialog \
    --backtitle "$BACKTITLE" \
    --title     "$TITLE" \
    --stdout --timeout 60 \
    --cancel-label Abort \
    --inputbox "$HELP" 0 0 "$(< /etc/cgroup/$CG/$CONTROL )"
  } 

  while  CONTROL=$( control_menu ); do
   while      CG=$( cgroup_menu  ); do
             VAL=$( input_menu   ) &&
      [ -n "$VAL" ] &&
      echo "$VAL" > /etc/cgroup/$CG/$CONTROL
   done
  done
 }

 create(){

  name_entry(){
    BACKTITLE=$"cgroup init-script"
        TITLE=$"control group name entry"
         HELP=$"Please enter the new control group name without using space.  Using slash is allowed to define a sublevel control group."

   dialog \
    --backtitle "$BACKTITLE" \
    --title     "$TITLE" \
    --timeout 60 \
    --stdout --no-cancel \
    --inputbox "$HELP" 10 45
  }

  make_it(){
    BACKTITLE=$"cgroup init-script"
        TITLE=$"new top level control group creation"

   mkdir -pm 755 /etc/cgroup/$NEW

   dialog \
    --backtitle "$BACKTITLE" \
    --title     "$TITLE" \
    --timeout 60 --stdout --no-cancel \
    --msgbox "/etc/cgroup/$NEW created" 0 0
  }

  valid(){
   [ -n "$NEW" ] &&
   [ -z "$( echo "$NEW" | tr -d '[:alnum:]/_-' )" ]
  }

  if   NEW=$( name_entry ) && valid
  then make_it
  fi
 }

 main_menu
}

status(){
 mnt(){
  if [ -f /proc/mounts ]; then
   while read DEV MNT JNK
   do [ "$NAME" = "$MNT" ] && return
   done < /proc/mounts
  fi
  return 1
 }

 if   mnt
 then log_warning_msg "$NAME is mounted"; return 0
 else log_warning_msg "$NAME is not mounted"; return 3
 fi
}

start(){

 mcg(){ subsys_to_optlist; mount -t cgroup -o $optlist cgroup /sys/fs/cgroup; }

 if   status &>/dev/null
 then log_success_msg "/sys/fs/cgroup mounted"
 elif log_warning_msg "/sys/fs/cgroup mounting"; mcg
 then log_success_msg "/sys/fs/cgroup mounted";
 else log_failure_msg "/sys/fs/cgroup mounting failed"; return 1
 fi

 if   log_warning_msg "/sys/fs/cgroup initializing"; init_cgroup
 then log_success_msg "/sys/fs/cgroup initialized"
 else log_failure_msg "/sys/fs/cgroup failed initialization"; return 1
 fi
}
