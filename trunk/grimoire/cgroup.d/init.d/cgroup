#!/bin/bash

# Copyright Kyle Sallee 2011
# All rights reserved.
# For use with the distribution sorcerer only!

### BEGIN INIT INFO
# Default-Mode: 500
# Required-Start: sys
# Default-Start: S
# Short-Description: mount cgroup on /sys/fs/cgroup and set limits
### END INIT INFO

. /lib/lsb/init-functions

only start configure status reset
name /sys/fs/cgroup
deny control

reset(){
 if   [ -d /etc.ori/cgroup ]; then
  rm -fr                             /etc/cgroup.old
  mv                     /etc/cgroup /etc/cgroup.old
  cp -a  /etc.ori/cgroup /etc/
  echo "Current configuration moved  from /etc/cgroup     to /etc/cgroup.old"
  echo "Default configuration copied from /etc.ori/cgroup to /etc/cgroup"
 fi
}

init_cgroup(){
 # some cgroup files must have only one line written at a time.
 catlines(){ while read; do echo "$REPLY" > $1; done; }

 find /etc/cgroup -type d -not -empty -printf "/sys/fs/cgroup/%P\n" | sort | xargs --max-lines=64 mkdir -pm 755
 find /etc/cgroup -type f -not -empty -printf "%P\n" |
 while read; do
  if   [ -f     /sys/fs/cgroup/$REPLY ]
  then catlines /sys/fs/cgroup/$REPLY < /etc/cgroup/$REPLY
  fi
 done
}

configure(){

 main_menu(){
  mm(){
   BACKTITLE=$"cgroup init-script"
       TITLE=$"configuration main menu"
        HELP=$"Please select an action."

   dialog \
    --backtitle "$BACKTITLE" \
    --title     "$TITLE" \
    --timeout 60 \
    --stdout --ok-label Select \
    --cancel-label Done \
    --menu   "$HELP" 0 0 0 \
    "Edit"   "a value for all top level cgroups" \
    "Create" "a top level cgroup"
  }

  while  REPLY=$( mm ); do
   case $REPLY in
    Edit) edit ;;
    Exit) return 0 ;;
    Create) create ;;
   esac
  done
 }

 edit(){
  controls(){ find /etc/cgroup/norm/sys/ -type f -printf '%f control\n' | sort -u; }

  control_menu(){
    BACKTITLE=$"cgroup init-script"
        TITLE=$"control selection menu"
         HELP=$"Please select a control"

   dialog \
    --backtitle "$BACKTITLE" \
    --title     "$TITLE" \
    --stdout --timeout 60 \
    --cancel-label Done \
    --menu   "$HELP" 0 0 0 \
    $( controls )
  }

  content(){
   if   [ -s "$1" ]
   then read < "$1"; echo "$REPLY"
   else echo "Unset"
   fi
  }

  vals(){
   find /etc/cgroup -type f -name $CONTROL -printf "%P\n" |
   cut -d / -f1 | sort -u |
   while read; do echo "$REPLY"; content "/etc/cgroup/$REPLY/$CONTROL"; done
  }

  cgroup_menu(){
    BACKTITLE=$"cgroup init-script"
        TITLE=$"control group selection menu"
         HELP=$"Please select a control group."

   export IFS="
"

   dialog \
    --backtitle "$BACKTITLE" \
    --title     "$TITLE" \
    --stdout --timeout 60 \
    --cancel-label Back \
    --menu   "$HELP" 0 0 0 \
    $( vals )
  }

  input_menu(){
    BACKTITLE=$"cgroup init-script"
        TITLE=$"value entry"
         HELP=$"Please enter an appropriate value."

   dialog \
    --backtitle "$BACKTITLE" \
    --title     "$TITLE" \
    --stdout --timeout 60 \
    --cancel-label Abort \
    --inputbox "$HELP" 0 0 "$(< /etc/cgroup/$CG/$CONTROL )"
  } 

  while  CONTROL=$( control_menu ); do
   while      CG=$( cgroup_menu  ); do
             VAL=$( input_menu   ) &&
      [ -n "$VAL" ] &&
      echo "$VAL" > /etc/cgroup/$CG/$CONTROL
   done
  done
 }

 create(){

  name_entry(){
    BACKTITLE=$"cgroup init-script"
        TITLE=$"control group name entry"
         HELP=$"Please enter the new control group name\nusing only letters and digits."

   dialog \
    --backtitle "$BACKTITLE" \
    --title     "$TITLE" \
    --timeout 60 \
    --stdout --no-cancel \
    --inputbox "$HELP" 10 45
  }

  make_it(){
    BACKTITLE=$"cgroup init-script"
        TITLE=$"new top level control group creation"

   mkdir -pm 755 /etc/cgroup/$NEW
   find /etc/cgroup/norm/sys -type f -printf "/etc/cgroup/$NEW/%f\n" |
   xargs --max-lines=64 touch

   dialog \
    --backtitle "$BACKTITLE" \
    --title     "$TITLE" \
    --timeout 60 --stdout --no-cancel \
    --msgbox "/etc/cgroup/$NEW created" 0 0
  }

  valid(){
   [ -n "$NEW" ] &&
   [ -z "$( echo "$NEW" | tr -d '[:alnum:]' )" ]
  }

  if   NEW=$( name_entry ) && valid
  then make_it
  fi
 }

 main_menu
}

status(){
 mnt(){
  if [ -f /proc/mounts ]; then
   while read DEV MNT JNK
   do [ "$NAME" = "$MNT" ] && return
   done < /proc/mounts
  fi
  return 1
 }

 if   mnt
 then log_warning_msg "$NAME is mounted"; return 0
 else log_warning_msg "$NAME is not mounted"; return 3
 fi
}

start(){

 mcg(){ mount -t cgroup -o blkio,clone_children,cpu,cpuset,freezer,memory cgroup /sys/fs/cgroup; }

 if   status &>/dev/null
 then log_success_msg "/sys/fs/cgroup mounted"
 elif log_warning_msg "/sys/fs/cgroup mounting"; mcg
 then log_success_msg "/sys/fs/cgroup mounted";
 else log_failure_msg "/sys/fs/cgroup mounting failed"; return 1
 fi

 if   log_warning_msg "/sys/fs/cgroup initializing"; init_cgroup
 then log_success_msg "/sys/fs/cgroup initialized"
 else log_failure_msg "/sys/fs/cgroup failed initialization"; return 1
 fi
}
