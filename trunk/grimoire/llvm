# Always check MesaLib when updating llvm
# cmake causes llvm to install with unusual sonames.

# must check for new releases manually
# configure only installs ar libraries and not ELF.
# Very odd.
# OpenGTL refuses to compile with llvm when llvm has assertions enabled
# -DCMAKE_BUILD_TYPE=RELEASE release builds turn off assertions support

# llvm's ocaml bindings breaks compilation however
# --enable-bindings=none circumvents the break
# by not compiling the ocaml bindings

# MesaLib version 9.1.3 does not compile with llvm version 3.3
# However llvm version 3.3 compiled and installed fine.

with info    good 20140108
with info    last 20140102
with version   stable 3.4 3.3 3.2
with version unstable 3.4
with version legacy   3.3
with base    Python cmake gcc-g++
#with base    gcc-g++ perl--Pod-Simple
with role    development/emulator
# lto compilation requires too much RAM
with trait   console library makej lto_off multilib-dual no_patcher optimize
# Must be multilib-dual while
# ./configure accepts but source disregards --libdir=/usr/lib64
with source    stable http://www.llvm.org/releases/$VERSION/llvm-$VERSION.src.tar.gz
with source    stable http://www.llvm.org/releases/$VERSION/clang-$VERSION.src.tar.gz
with source    stable http://www.llvm.org/releases/$VERSION/clang-tools-extra-$VERSION.src.tar.gz
with source  unstable http://www.llvm.org/releases/$VERSION/llvm-$VERSION.src.tar.gz
with source  unstable http://www.llvm.org/releases/$VERSION/clang-$VERSION.src.tar.gz
with source  unstable http://www.llvm.org/releases/$VERSION/clang-tools-extra-$VERSION.src.tar.gz
with source    legacy http://www.llvm.org/releases/$VERSION/llvm-$VERSION.src.tar.gz
with source    legacy http://www.llvm.org/releases/$VERSION/cfe-$VERSION.src.tar.gz
with source    legacy http://www.llvm.org/releases/$VERSION/clang-tools-extra-$VERSION.src.tar.gz
with info    home http://www.llvm.org
with info    vurl http://www.llvm.org/releases/
#with clash   ocaml
with info    cite 'low level virtual machine'

build(){
 with also    -DCMAKE_BUILD_TYPE=RELEASE
 with also    -DBUILD_SHARED_LIBS:BOOL=TRUE
 with also    -DLLVM_ENABLE_ASSERTIONS:BOOL=FALSE
 with also    -DLLVM_INCLUDE_TESTS:BOOL=FALSE 
 with also    -DLLVM_BUILD_TESTS:BOOL=FALSE
 with also    -DLLVM_INCLUDE_EXAMPLES:BOOL=FALSE
 with also    -DLLVM_BUILD_EXAMPLES:BOOL=FALSE
 with also    -DCLANG_BUILD_EXAMPLES:BOOL=FALSE
 with also    -DLLVM_ENABLE_PIC:BOOL=TRUE
 with also    -DLLVM_BINUTILS_INCDIR:PATH=/usr/include
 with also    -DCMAKE_C_FLAGS_RELEASE:STRING="$CFLAGS"
 with also    -DCMAKE_CXX_FLAGS_RELEASE:STRING="$CXXFLAGS"

 # if   [ -f /usr/bin/clang ]
 # then export CC=clang CXX=clang++
 # fi

 # with also    -DCMAKE_CXX_COMPILER:FILEPATH=/usr/bin/c++
 # with also    -DCMAKE_C_COMPILER:FILEPATH=/usr/bin/cc

 if   [  -d cfe-$VERSION.src ]
 then mv -v cfe-$VERSION.src tools/clang
 fi

 if   [  -d clang-tools-extra-$VERSION.src ]
 then mv -v clang-tools-extra-$VERSION.src tools/clang/tools/clang
 fi

 ## Too many places to properly sedit
 ## files invoke python from within and not merely python scripts
 LC_ALL=C grep -lr python * |
 xargs -r -L64 \
 sed -i 's:#!/usr/bin/env python$:#!/usr/bin/python2:
         s:#!/usr/bin/python$:#!/usr/bin/python2:
         s:#! /usr/bin/python$:#!/usr/bin/python2:'

 mkdir -pvm 755                       bin
 echo '#!/bin/bash'                 > bin/python
 echo 'exec /usr/bin/python2 "$@"' >> bin/python
 chmod 755                            bin/python

 local  RATH="$PATH"
 local  PATH="$PWD/bin:$RATH"
 export PATH

 if     [[ $HOSTTYPE == x86_64 ]] &&
      ! [[ $CFLAGS   =~ -m32   ]]
 then with also -DLLVM_LIBDIR_SUFFIX:STRING=64
      sed -i 's:/lib:/lib64:' tools/llvm-config/llvm-config.cpp
 fi
 default_build &&
 ## llvm always expects the gold plugin in $PREFIX/bin/../lib/
 if [ -f              "$DESTDIR"/usr/lib64/LLVMgold.so ]; then
  install -dvm 755    "$DESTDIR"/usr/lib/
  install  -vm 755 -t "$DESTDIR"/usr/lib/ "$DESTDIR"/usr/lib64/LLVMgold.so
 fi
# &&
# if   [[ $HOSTTYPE == x86_64 ]] && [[ $CFLAGS =~ -m32 ]]
# then mv -v "$DESTDIR"/usr/bin{,32}
# fi
}

current(){
 case $VERSION in
  3.3) [ -f /usr/lib/LLVMgold.so ] || [ -f /usr/lib64/LLVMgold.so ] ;;
 esac
}
