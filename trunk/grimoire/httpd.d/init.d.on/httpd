#!/bin/bash

### BEGIN INIT INFO
# Required-Start: $network run
# Should-Start: $remote_fs
# Required-Stop: kill
# Should-Stop: $remote_fs
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: httpd is a feature packed web server
### END INIT INFO

. /lib/lsb/init-functions

PIDF=/var/run/httpd.pid
SERV=/usr/sbin/apachectl
CONF=/etc/httpd/conf/httpd.conf
NAME=httpd
OPTS=start

start(){
 log_warning_msg  "$NAME starting"
 [     -d /var/log/httpd ] ||
 mkdir -p /var/log/httpd ]
 if   start_daemon $SERV $OPTS
 then log_success_msg "$NAME started"
 else log_failure_msg "$NAME not started"; status
 fi
}

stop(){
 log_warning_msg "$NAME stopping"; $SERV stop
 log_success_msg "$NAME stopped"
}

restart(){
 log_warning_msg "$NAME restarting"; $SERV restart
 log_success_msg "$NAME restarted"
}

status(){
# httpd REQUIRES a non-standard status function because
# the service is started by calling /usr/sbin/apachectl but 
# the running processes are /usr/sbin/httpd instead!

# This part can be disabled, it shows detailed information about httpd. 
# Unfortunately, it always returns code 0 (success), even when no httpd 
# server is running. The command can be 'status' or 'fullstatus':
  $SERV status

# Below is the actual test and its status tells us whether httpd is running
  PIDS="$( pidofproc -p "$PIDF" "/usr/sbin/httpd" )"
  if   [    "$PIDS" ]; then log_warning_msg "$NAME is running"; return 0
  elif [ -f "$PIDF" ]; then log_warning_msg "$NAME is dead and $PIDF exists"; return 1
  elif [    "$LOCK" ] &&
       [ -f "$LOCK" ]; then log_warning_msg "$NAME is dead and $LOCK exists"; return 2
                       else log_warning_msg "$NAME is not running"; return 3
  fi
}

parse "$@"
