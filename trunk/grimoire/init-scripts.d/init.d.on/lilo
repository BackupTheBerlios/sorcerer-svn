#!/bin/bash
### BEGIN INIT INFO
# Required-Stop: $local_fs proc udev
# Should-Stop: tmp
# Default-Stop: 0 6
# Short-Description: lilo regenerates /etc/lilo/conf when necessary
### END INIT INFO

# Copyright 2008-2011 by Kyle Sallee, all rights reserved.
# for use with Sorcerer only

. /lib/lsb/init-functions

LILO=/etc/lilo.conf
NAME=/etc/lilo/conf
CONF=/etc/lilo/conf
HEAD=/etc/lilo/head
TAIL=/etc/lilo/tail
DONE=false

lilo_conf_update(){
 reorder(){
  if [ -z "$LVER" ]; then cat -;
  else
   local CX=0
   while read; do
    case $CX in
     0) if [ "$REPLY" == "$LVER" ]; then        LVER=; fi ;;
     1) if [ -n          "$LVER" ]; then echo "$LVER"; fi ;;
    esac
    if ! [ "$REPLY" == "$LVER" ]; then echo "$REPLY"; fi
    (( CX++ ))
   done
  fi
 }

 img(){
  echo "image			=	/boot/$REPLY/linux"; $INRF &&
  echo "	initrd		=	/boot/$REPLY/initrf"
  echo "	label		=	$REPLY"
  echo "	read-only"
  echo "	$1"
  echo
 }

 local INRF ICX=0
 local LVER="$( uname -r )"
 [ -f /boot/$LVER/linux ] || LVER=

 if   [ -f /etc/init.d/initramfs ] &&
      [ -x /etc/init.d/initramfs ]
 then INRF=true
 else INRF=false
 fi

 if ! [ -f $HEAD ]; then exit 1; fi

 cp $HEAD $CONF.$$

 find /boot -mindepth 2 -maxdepth 2 -type f -name linux -printf '%T@\t%h\n' |
 sort -gr |
 sed '\,/boot/fast,d; \,/boot/rescue,d; s:.*/::' |
 reorder |
 while read REPLY; do
  if   (( 4 > ICX ))
  then img restricted
  else rm -fr /boot/$REPLY /lib{,.sav}/modules/$REPLY{,.old}
  fi
  (( ICX++ ))
 done >> $CONF.$$

# if   [ -f /boot/rescue/initrf ]
# then REPLY=rescue img mandatory >> $CONF.$$
# fi

 find /boot -mindepth 1 -maxdepth 1 -type d -printf '%f\n' |
 grep rescue |
 while read; do
  if   [ -f /boot/$REPLY/linux ]
  then img mandatory >> $CONF.$$
  fi
 done

 if   [ -f $TAIL ]
 then cat  $TAIL >> $CONF.$$
 fi

 mv $CONF.$$ $CONF

 if ! [ -h  $LILO ] ||
    ! [ -f  $LILO ]
 then rm -f $LILO; ln -s lilo/conf $LILO
 fi

 if   $INRF && ! $DONE
 then /etc/init.d/initramfs reload
 fi

 if   ! [ -f /etc/init.d/find_ir ]
 then /sbin/lilo -P ignore -C $CONF
 fi
}

both(){
 find /boot -mindepth 2 -maxdepth 2 -type f -name linux -printf '%P\n'
 sed 's:#.*::;s: ::g;s:\t::g;s:image=/boot/::p;d' $CONF
}

boot_labels(){ ! both | sort | uniq -u | grep -q .; }

previously_passed(){ ! [ -f /var/log/init/failed/lilo ]; }

current(){ 
 [       -h  $LILO ] &&
 [       -f  $LILO ] &&
 [       -f  $CONF ] &&
 [ $CONF -nt $HEAD ] &&
 [ $CONF -nt $TAIL ] &&
 previously_passed   &&
 boot_labels
}

stop(){
 if   log_warning_msg "$NAME updating"; lilo_conf_update
 then log_success_msg "$NAME updated"
 else log_failure_msg "$NAME failed"; false
 fi
}

status(){
 if   log_warning_msg "$NAME checking"; current
 then log_success_msg "$NAME checked; status:     current"
 else log_warning_msg "$NAME checked; status: not current"; return 1
 fi
}

export LC_ALL=C

if ! [ -d /boot ] ||
     [ -z "$( find /boot -mindepth 2 -maxdepth 2 -type f -name linux )" ]
then exit
fi

case $1 in
 reload) DONE=true
         status || stop   ;;
 status) status ;;
  force)           stop   ;;
   stop) status || stop s ;;
      *) status || stop   ;;
esac
