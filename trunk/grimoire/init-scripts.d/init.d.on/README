#!/bin/bash
less << EOF

Sorcerer System V Initialization and Shutdown Script Documentation

Sections:

1.0 Overview
2.0 Customization
3.0 Logs

Section 1.0 Overview

Section 1.1 POST

Following power on the Power On Self Test, or POST begins.
Following a successful POST the BIOS, basic input output,
attempts to load an operating system.
Depending on the capability and configuration
the BIOS will attempt to load an operating system from CDROM,
fixed disks, floppy disks, network, or removeable drives.
When loading an operating system from fixed disk BIOS
first loads and runs the content of the MBR, master boot record,
of the primary fixed disk.

Section 1.2 lilo

If the MBR contains a boot loader program such as lilo, the linux loader,
then lilo is run, otherwise the MBR will usually contain code
that causes it to load and run the content from
the boot block of the first partition marked as bootable
in the partition table.
Most Sorcerer boxes have lilo installed
to the boot block of the /boot partition.
However, if no /boot partition was defined
then the boot block of the / partition will contain lilo.
The bootloader load into memory
a kernel image and also an initramfs image.
Initramfs is the initialization random access memory file system.

Section 1.3 linux kernel

The linux kernel begins.
It initializes hardware devices
such as the screen and keyboard.
Then the kernel decompresses, if necessary, and
extracts the cpio initramfs image to the rootfs.
The rootfs is automatically mounted on /
Finally, the kernel begins execution of the file /init as process 1.

However, using the kernel paramter rdinit=/bin/bash
the kernel can be instructed to execute a shell instead of /init.
Executing a shell instead of the normal /init is useful
when the SA wants to debug problems that occur during sysinit.

Section 1.4 sysinit

Sysinit runs from entirely from the initramfs.
Sysinit is the third stage of the boot process.
During sysinit udev automatically loads
kernel drivers, modules, firmware for installed hardware.
Udev also creates device nodes in /dev with permission
and ownership as specified by udev rule files.
As sysinit progress
kernel modules are loaded for filesystems
and other commonly used protocols and methods such as FUSE,
file system in user space, and networking protocols.
The purpose of the sysinit is to complete required preparations
for being able to successfully mount filesystems provided
on disk, by network, or by memory storage devices.

Section 1.5 the end of sysinit

The end portion of sysinit
mounts the real root filesystem on /media/root/
Additional filesystems specified in /etc/fstab
are mounted under /media/root
Then, virtual file systems such as /dev and /proc
that mounted during sysinit
are bound to /media/root/dev and /media/root/proc, respectively.
Now that sysinit is complete
runlevel execution begins
within a chroot to /media/root/

Section 1.6 gettys

Following the completion of sysinit
agetty is started on virtual consoles.
Runlevels 1 2 3 provides agetty on virtual consoles 1 through 7.
Runlevels 4 5   provides agetty on virtual consoles 1 through 3 and 7.
agetty, except on virtual console #7, log in chrooted to /media/root/
Virtual console #7 logs into /
Virtual console #7 is provided for the SA
in order to diagnose and repair problems on a box
without having to reboot using an Install/Rescue disk
and without having to reboot using the rescue label.

Section 1.7 runlevel

/etc/inittab contains a description of runlevels.
And the default runlevel can be changed by editing /etc/inittab
Run levels 1 through 5 are valid for init default.
However, runlevels 3 through 5 are most popular.
The purpose of a runlevel is to start services
such as webservers, secure socket shell server,
system logger, cron, X server and other services
that make computers friendly and useful.



Section 2.0 Customization

Section 2.1 init-script

A POSIX, portable operating system for unix,
is a collection of software from various vendors
which is installed and run in a meaningful fashion.
Individual init-scripts ensure properly ordered
execution and shutdown of services and filesystems.
It is a modular, dynamic, and efficient system
where init-scripts are added, removed,
and sometimes customized as necessary
in order to adjust to installed software.

Section 2.2 init-scripts in detail

Sorcerer provides a system for running LSB compliant
system V init-scripts with capabilities defined at the following URL:
http://www.linux-foundation.org/spec/refspecs/LSB_3.1.0/LSB-Core-generic/LSB-Core-generic/iniscrptfunc.html
However, Sorcerer init-scripts are not themselves LSB compliant.
Sorcerer init-scripts have nearly all common code factorized out
and made available in /lib/lsb/init-functions.
This makes small, fast, uniform, easy to edit init-script.

init-scripts that run during sysinit
are frequently specialized and sometimes complex.
However, the more simple init-scripts
that are executed during runlevel are
often short and simple.
Each init-script tends to perform a single specific task such as:
mounting a virtual file system;
loading a kernel module;
unloading a kernel module;
or starting a server.

The best way to understand a Sorcerer init-script
is to first learn about LSB compliant init-scripts
and then view some of the already installed init-scripts.
Since the format of most init-scripts is similar
new init-scripts are usually created
by copying and modifying old init-scripts.

Section 2.3 init-script customization

/etc/init.d/ contains init-scripts.

init-scripts with mode 5?? are     run during boot and shutdown.
init-scripts with mode 4?? are not run during boot and shutdown.
init-scripts with mode 510 are     restarted by cast following updates.
init-scripts with mode 500 are not restarted by cast following updates.

Mode 500 init-scripts are useful for services such as
/etc/init.d/kdm-v4 /etc/init.d/gdm /etc/init.d/xdm.
Sometimes restarting those services will immediately force
the end of a X session for anyone logged in.

Modes         of init-scripts are     retained across updates.
Modifications to init-scripts are not retained across updates.

To modify an init-script please do the following:
Where $ORIGINAL is written please substitute the original file name.
# cp $ORIGNAL custom-$ORIGINAL
# chmod 700   custom-$ORIGINAL
# chmod 600          $ORIGINAL
# nano        custom-$ORIGINAL
Add the comment # Provides: $ORIGINAL
Make other desired modifications.
CTRL-X y to save.

Customization of init-scripts installed by spells such
as the init-scripts spell is strongly discouraged.
Customizing init-scripts can cause failure of services to start
or even failure of a box being able to mount the real root file system.


Section 3.0 Logs

Section 3.1 log names

Output from kernel ring buffer is written to /var/log/init/dmesg
Output from sysinit            is written to /var/log/init/sysinit
Output from runlevel           is written to /var/log/init/runlevel.$RL
Output from runlevel 0 and 6   is written to /var/log/runlevel.$RL

Section 3.2 /var/log/init/

Because the real only the initrf is mounted as the root filesystem
during startup the real /var/log/ is unavailable at the time that
init-script execution begins.
Consequently, a tmpfs, temporary filesystem, is mounted on /var/log/init/
The tmpfs on /var/log/init/ is initially mounted on the initrf.
Later as a box progress to runlevels the /var/log/init/ temporary file system
is moved onto the real root filesystem as /var/log/init/
Therefore, when information about what happened during boot is desired
then the place to look is always /var/log/init/
regardless of whether the boot stage is sysinit or runlevel execution.


Section 3.3 Boot scroll

Currently, there is no SA, system administrator, consensus
about whether reading boot scroll is useful or desirable.
Some SAs prefer that the sysinit and runlevel scroll is redirected
to virtual consoles rather than scrolling on the main console.
If this is selected then the default virtual console for sysinit scroll
is /dev/tty9 which can be accessed by pressing the keys ALT F9 or CTRL ALT F9.
The defautl virtual console for runlevel scroll is /dev/tty10
As expected it can be viwed with the key sequence ALT F10 or CTRL ALT F10.
The primary virtual console,
which is typically used for logging in,
can be returned to with the key sequence ALT F1 or CTRL ALT F1
Holding ALT and pressing right or left arrow keys
switches sequentially among available virtual consoles.

The default for most Sorcerer boxes is to simply send both scrolls to /dev/console .
/dev/console causes scroll to appear on any actively selected virtual console.
However, this can be changed by executing the following command at a root prompt:
augur forget sysvinit; cast sysinit
Then in the sysinit spell configuration menu
nearly any available character device can be selected.

Execution of some programs cause uncategorized messags to be printed.
However, messages printed by init-scripts fall into 3 categories:
white [ warning ]; green [ success ]; and red [ failure ].
If the logs in /var/log/init/ are cat
then holding SHIFT while pressing PAGE UP
can be used to scroll up while looking for red [ failure ] messages.
A failure message is not necessarily bad,
but it can indicate something that the SA should be
aware of and might want to do something about.

EOF
