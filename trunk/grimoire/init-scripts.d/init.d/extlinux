#!/bin/bash
### BEGIN INIT INFO
# Default-Mode: 500
# Required-Stop: $local_fs proc udev
# Should-Stop: tmp
# Default-Stop: 0 6
# Short-Description: generates configuration files and runs extlinux when necessary
### END INIT INFO

# Copyright 2008-2013 by Kyle Sallee, all rights reserved.
# for use with Modern Magic only

if ! [ -d /boot/ ] || ! [ -f /sbin/extlinux ]; then exit 0; fi

. /lib/lsb/init-functions

if rootfs; then trap - EXIT && exit 0; fi

only stop reload force-reload status
deny control
export LC_ALL=C

EXTL=/boot/extlinux/extlinux.conf
SLXC=/boot/syslinux/syslinux.conf
NAME=/boot/extlinux/extlinux.conf
CONF=/etc/extlinux/conf
HEAD=/etc/extlinux/head
TAIL=/etc/extlinux/tail
DONE=false

extlinux_conf_update(){
 img(){
  local i f
  if   [ -f /boot/linux/$REPLY/modules ]; then i="../linux/$REPLY/modules,"; fi
  if   [ -f /boot/linux/$REPLY/initrf  ]; then i="../linux/$REPLY/initrf,";
  elif [ -d /boot/linux/$REPLY/initrf  ]; then
   for f in /boot/linux/$REPLY/initrf/*
   do  i+="../linux/$REPLY/initrf/${f##*/},"
   done
  else
   for f in /boot/initrf/*
   do  i+="../initrf/${f##*/},"
   done
  fi
  echo "LABEL	$REPLY"
  echo "	KERNEL	../linux/$REPLY/kernel"; [ -n "$i" ] &&
  echo "	INITRD	${i%,}";                 [ -n "$APPEND" ] &&
  echo "	APPEND	$APPEND";                [ -n "$1" ] &&
  echo "$1"
  echo
 }

 img_xen(){
  echo "LABEL	xen-$REPLY"
  echo "	KERNEL	mboot.c32"
  echo "	APPEND ../xen.gz dom0_mem=1G,max:4G --- ../$REPLY/linux $APPEND --- ../xen/initrf"; [ -n "$1" ] &&
  echo "$1"
  echo
 }

 if   [ -f /etc/init.d/initramfs ] &&
      [ -x /etc/init.d/initramfs ] &&
      ! $DONE
 then /etc/init.d/initramfs reload
 fi

 local APPEND ICX=0

 if   [ -f /sbin/tomoyo-init    ]; then APPEND="security=tomoyo"; fi
 if   [ -f /etc/extlinux/append ]; then APPEND+=" $(< /etc/extlinux/append )"; fi

 if ! [ -f $HEAD ]; then exit 1; fi

 /bin/cp $HEAD $CONF.$$

 /bin/find /boot/linux/ -mindepth 2 -maxdepth 2 \
                        -type f -name kernel -printf '%T@\t%h\n' |
 /bin/sort -gr |
 /bin/cut  -f2 |
 /bin/sed  '\,/boot/linux/rescue,d; \,/boot/linux/xen,d; s:.*/::' |
 while read REPLY; do
  if   (( 0 == ICX )) && [ -f /usr/sbin/xl ]
  then img "	MENU PASSWD"
       img_xen "	MENU PASSWD"
  elif (( 5 > ICX ))
  then img "	MENU PASSWD"
  fi
  (( ICX++ ))
 done >> $CONF.$$

 if   [ -f /boot/linux/rescue/kernel ]
 then REPLY=rescue; img "	MENU PASSWD" >> $CONF.$$
 fi

 if   [ -f     $TAIL ]
 then /bin/cat $TAIL >> $CONF.$$
 fi

 /bin/mv        $CONF{.$$,}
 /bin/cp        $CONF $EXTL
 /bin/chmod 600 $CONF $EXTL

 if ! [ -d          /boot/syslinux/ ]; then
  rm    -f          /boot/syslinux
  ln    -s extlinux /boot/syslinux
 fi

 if ! [ -f               /boot/syslinux/syslinux.conf ]; then
  rm    -f               /boot/syslinux/syslinux.conf
  ln    -s extlinux.conf /boot/syslinux/syslinux.conf
 fi

 if ! [ -f   /boot/extlinux/version ]  ||
    ! [ "$(< /boot/extlinux/version )" == "$( /sbin/extlinux --version 2>&1 )" ]; then
  /sbin/extlinux --version 2> /boot/extlinux/version
  /sbin/extlinux -U /boot/extlinux ||
  /sbin/extlinux -i /boot/extlinux
  /bin/find  /usr/share/syslinux/ -mindepth 1 -maxdepth 1 \
                                  -type f -name \*.c32 |
  /bin/xargs -r -L64 /usr/bin/install -m 600 -t /boot/extlinux/
 fi
}

both(){
 /bin/find /boot/linux -mindepth 2 -maxdepth 2 \
                       -type f -name kernel -printf '%h\n'
 /bin/sed 's:#.*::;s: ::g;s:\t::g;s:LABEL:/boot/linux/:p;d' $CONF
}

boot_labels(){ ! both | /bin/sort | /bin/uniq -u | /bin/grep -q .; }

previously_passed(){ ! [ -d /var/log/init/failed/extlinux ]; }

tomoyo_enabled(){
 if   [ -f /sbin/tomoyo-init ]
 then /bin/grep -q security=tomoyo $CONF
 fi
}

current(){ 
 [       -f  $EXTL   ] &&
 [       -f  $SLXC   ] &&
 [       -f  $CONF   ] &&
 [ $CONF -nt $HEAD   ] &&
 [ $CONF -nt $TAIL   ] &&
 tomoyo_enabled        &&
 previously_passed     &&
 boot_labels
}

run(){
 if   log_warning_msg "update"; extlinux_conf_update
 then log_success_msg "update"
 else log_failure_msg "update"; return 1
 fi
}

status(){
 if   log_warning_msg "check"; current
 then log_success_msg "check status:     current"
 else log_warning_msg "check status: not current"; return 1
 fi
}

stop(){ status || run; }
reload(){ DONE=true; stop; }
force_reload(){ run; }
