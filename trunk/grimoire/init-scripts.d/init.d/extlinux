#!/bin/bash
### BEGIN INIT INFO
# Default-Mode: 500
# Required-Stop: $local_fs proc udev
# Should-Stop: tmp
# Default-Stop: 0 6
# Short-Description: generates configuration files and runs extlinux when necessary
### END INIT INFO

# Copyright 2008-2013 by Kyle Sallee, all rights reserved.
# for use with Modern Magic only

export LC_ALL=C

if   ! [ -f /sbin/extlinux ] || ! [ -d /boot/ ]
then exit 0
fi

. /lib/lsb/init-functions

if rootfs; then trap - EXIT && exit 0; fi

only stop reload force-reload status
deny control

EXTL=/boot/extlinux/extlinux.conf
SLXC=/boot/syslinux/syslinux.conf
NAME=/boot/extlinux/extlinux.conf
CONF=/etc/extlinux/conf
HEAD=/etc/extlinux/head
TAIL=/etc/extlinux/tail
DONE=false

extlinux_conf_update(){
 img(){
  local INITRF
  if   [ -f /boot/$REPLY/modules ]; then INITRF="../$REPLY/modules"; fi
  if   [ -f /boot/$REPLY/initrf  ]; then INITRF="../$REPLY/initrf";
  elif [ -h /boot/$REPLY/initrf  ]; then
   local FILE
   for   FILE in /boot/$REPLY/initrf/*
   do  INITRF+=",../$REPLY/initrf/${FILE##*/}"
   done
  fi
  echo "LABEL	$REPLY"
  echo "	KERNEL	../$REPLY/linux"; [ -n "$INITRF" ] &&
  echo "	INITRD	$INITRF";         [ -n "$APPEND" ] &&
  echo "	APPEND	$APPEND";         [ -n "$1" ] &&
  echo "$1"
  echo
 }

 img_xen(){
  local INITRF
  echo "LABEL	xen-$REPLY"
  echo "	KERNEL	mboot.c32"
  echo "	APPEND ../xen.gz dom0_mem=1G,max:4G --- ../$REPLY/linux $APPEND --- ../xen/initrf"; [ -n "$1" ] &&
  echo "$1"
  echo
 }

 if   [ -f /etc/init.d/initramfs ] &&
      [ -x /etc/init.d/initramfs ] &&
      ! $DONE
 then /etc/init.d/initramfs reload
 fi

 local APPEND ICX=0
 local LVER="$( uname -r )"
 [ -f /boot/$LVER/linux ] || LVER=

 if   [ -f /sbin/tomoyo-init    ]; then APPEND="security=tomoyo"; fi
 if   [ -f /etc/extlinux/append ]; then APPEND+=" $(< /etc/extlinux/append )"; fi

 if ! [ -f $HEAD ]; then exit 1; fi

 cp $HEAD $CONF.$$

 find /boot -mindepth 2 -maxdepth 2 -type f -name linux -printf '%T@\t%h\n' |
 sort -gr |
 cut -f2  |
 sed '\,/boot/rescue,d; \,/boot/xen,d; s:.*/::' |
 while read REPLY; do
  if   (( 0 == ICX )) && [ -f /usr/sbin/xl ]
  then img "	MENU PASSWD"
       img_xen "	MENU PASSWD"
  elif (( 4 > ICX ))
  then img "	MENU PASSWD"
  elif [ "$LVER" == "$REPLY" ]
  then continue
  else rm -fr /boot/$REPLY /lib{,.sav}/modules/$REPLY{,.old}
  fi
  (( ICX++ ))
 done >> $CONF.$$

 if   [ -f /boot/rescue/linux  ] &&
      [ -f /boot/rescue/initrf ]
 then REPLY=rescue; img "	MENU PASSWD" >> $CONF.$$
 fi

 if   [ -f $TAIL ]
 then cat  $TAIL >> $CONF.$$
 fi

 mv        $CONF{.$$,}
 cp        $CONF $EXTL
 chmod 600 $CONF $EXTL

 if ! [ -d                 /boot/syslinux/ ]; then
  rm    -f                 /boot/syslinux
  ln    -s /boot/extlinux/ /boot/syslinux
 fi

 if ! [ -f       $SLXC ]; then
  rm   -f        $SLXC
  ln   -s  $EXTL $SLXC
 fi

 if ! [ -f   /boot/extlinux/version ]  ||
    ! [ "$(< /boot/extlinux/version )" == "$( /sbin/extlinux --version 2>&1 )" ]; then
  /sbin/extlinux --version 2> /boot/extlinux/version
  /sbin/extlinux -U /boot/extlinux ||
  /sbin/extlinux -i /boot/extlinux
  find  /usr/share/syslinux/ -mindepth 1 -maxdepth 1 -type f -name \*.c32 |
  xargs -r -L64 install -m 600 -t /boot/extlinux/
 fi
}

both(){
 /bin/find /boot -mindepth 2 -maxdepth 2 -type f -name linux -printf '%h\n'
 /bin/sed 's:#.*::;s: ::g;s:\t::g;s:LABEL:/boot/:p;d' $CONF
}

boot_labels(){ ! both | /bin/sort | /bin/uniq -u | /bin/grep -q .; }

previously_passed(){ ! [ -d /var/log/init/failed/extlinux ]; }

tomoyo_enabled(){
 if   [    -f    /sbin/tomoyo-init ]
 then grep -q security=tomoyo $CONF
 fi
}

current(){ 
 [       -f  $EXTL   ] &&
 [       -f  $SLXC   ] &&
 [       -f  $CONF   ] &&
 [ $CONF -nt $HEAD   ] &&
 [ $CONF -nt $TAIL   ] &&
 [ -d /boot/syslinux ] &&
 tomoyo_enabled        &&
 previously_passed     &&
 boot_labels
}

run(){
 if   log_warning_msg "$NAME update"; extlinux_conf_update
 then log_success_msg "$NAME update"
 else log_failure_msg "$NAME update"; return 1
 fi
}

status(){
 if   log_warning_msg "$NAME check"; current
 then log_success_msg "$NAME check status:     current"
 else log_warning_msg "$NAME check status: not current"; return 1
 fi
}

stop(){ status || run; }
reload(){ DONE=true; stop; }
force_reload(){ run; }
