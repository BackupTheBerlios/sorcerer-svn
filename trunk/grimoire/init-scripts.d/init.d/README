#!/bin/bash
less << EOF

Modern Magic System V Initialization and Shutdown Script Documentation

Sections:

1.0 Overview
2.0 Customization
3.0 Logs

Section 1.0 Overview

Define booting related concepts,
their inter-relationship,
and order of execution.

Section 1.1 POST

During booting the POST, Power On Self Test, executes first.
Following a successful POST the BIOS, basic input output system,
attempts to load an operating system.
BIOS can load operating systems from various media.
When  loading  from a fixed disk
the first sector of a fixed disk into RAM.
The first sector of a fixed disk is called the MBR,
Master Boot Record.
Processor instructions stored in the MBR begin execution.


Section 1.2 MBR

The MBR must contain bootable code.
The syslinux project provides bootable MBR code.
The code installed into the MBR should be compatible
with the GUID, Global Unique Identifier, partition table.
The partition table specifies the start and size of partitions.
Partitions divide a fixed disk into regions
dedicated for use as file systems and swap systems.

At least one partition will receive
the attribute value of 2 for legacy BIOS bootable.
The MBR code loads the partition table.
The first partition with the
legacy BIOS bootable attribute is determined.
The first sector from that partition is loaded.
The first sector of a partition is called the boot block.
Code from the boot block begins execution.


Section 1.3 /boot

Each media storage device should
have one dedicated ext2 /boot partition.
ext2 stands for second extended file system.
It is a type of file system.
/boot refers to the mount point and also the role.
The /boot filesystem stores the linux kernel file
and compressed cpio archive files that contain
linux kernel modules, and essential portions
from a root file system.
The partition which contains the ext2 file system
mounted as /boot should be the partition which
receives the Legacy BIOS bootable attribute.


Section 1.4 extlinux from syslinux

extlinux is the name of the bootloader program
which is installed in the boot block of the /boot partition.
The syslinux software project provides extlinux.

The task of a bootloader is the load the linux kernel
and additional files called initramfs into memory.
initramfs means initial random access memory file system.


Section 1.5 rootfs

The content of the rootfs, a special memory based file system,
is constructed in memory from the content of the initramfs files.
The rootfs has various support purposes apart from the main
role assigned to a computer.
rootfs is used during booting, shutdown, and
by the SA to identify and fix problems.
It also acts as a firewall/router/gateway for
one or more root file systems.

Remember that rootfs is not the same as a root file system.
rootfs is constructed from a root file system,
but it does not have the complete content.
Any modifications to rootfs are lost during shutdown or reboot,
because rootfs exists in memory.
A root file system is backed by mass storage device
and can provide much more installed software.
Only the adminsitrator would want to log into the rootfs.
All user accounts log into root file systems instead.


Section 1.6 Linux kernel

extlinux does not construct the rootfs.
extlinux merely loads files into memory.
After completion extlinux executes Linux.
Linux initializes hardware devices
and constructs the rootfs by decompressing
and extracting content from the initramfs.
The rootfs is mounted on /
As such it is considered the root
of the file system hierarchy.
But it is not the same as a root file system.

When minimal device initialization and
rootfs construction completes
linux begins execution of /init as process one.


1.7 Booting to BASH

Booting to a BASH, bourne again shell, prompt
is useful only for debugging severe boot bugs.

extlinux can be instructed to pass additional kernel parameters.
Kernel parameter rdinit=/bin/bash
causes  Linux to execute /bin/bash
as process one.

However, input from a USB keyboard will not be received.
Therefore, if a BASH shell is desired for debugging
then append bash to the kernel parameters.
/init will provide a BASH shell
after loading device driver modules.
Then a USB keyboard can be used.


Section 1.8 Sysinit

Sysinit refers to a stage of booting.
Everyone calls it sysinit instead of system initialization.
Sysinit runs from entirely on the rootfs.

During sysinit firmware for hardware devices are loaded.
Also kernel driver modules are loaded.
And kernel modules for protocols and file systems are loaded.

During sysinit file systems are checked,
file systems are mounted, and some
programs execute and become resident
to continue performing their task.

Upon completion of sysinit runlevel execution begins.


Section 1.9 Runlevels

Each root file system has an initialization stage.
Instead of sysinit this stage is called the runlevel.
During runlevel execution file systems mount
and programs that provide services begin execution
and remain resident in memory.

The conclusion of runlevel execution provides the computer
in what should be a completely operational state.
If allowed to do so then users can log in.
And the software will be exeucting that performs
the roles designated for the computer.
This concludes the process of booting.

Section 1.A Root File Systems

Non root file systems can be mounted anywhere on the rootfs.
However, a root file systems must be mounted in a specific location.
+ is directory which holds mount points for root file systems.

/+/base/

The above is the mount point for the root file system called base.
The base root file system has only one role.
Base is used for constructing the initramfs used to populate the rootfs.
The base root file system will have the least amount of installed software.
However, base is a root file system capable of being updated and repaired.
If granting 10G to the partition backing base
then the file system fill will be approximately 33%
The name for the base root file system is arbitrarily selected.
It could be called the key root file system if preferred.

Every computer will have at least one base root file system.
Other root file systems should also exist.
Other root file systems should be role specific.

/+/work/

The above could be the mount point for the work file system
which provides a root file system suitable for the task
of providing a workstation.

/+/web/

The above could be the mount point for the web file system
which provides a root file system that runs a web server.

Delegating root file systems to roles
provides a method that mitigates the scope
of both bugs and intrusion.
It is also superior in both performance and resource management
as compared to both HVM and PVM virtual computers.

HVM stands for hardware virtual machine.
PVM stands for     para-virtual machine.
PVM or more often called PV are an implementation
that lacks BIOS and lacks hardware.
Instead the Linux kernel within the virtual machine
makes requests directly to the Linux kernel on the host computer.

Multiple root file systems provides
an eloquent alternative to virtual machines.
Only one Linux kernel is loaded.
Precise resource allocation is achieved by the use of control groups.
Control groups is the kernel provide method
for creating groups which limit access to resources
for the processes that a group contains.


Section 1.B Sharing File Systems

A non  root file system can be shared.
A dedicated file system can be mounted on /aux/can/
/aux/can/ can be bound to directories /+/*/aux/can/
/aux/can/ becomes accessbile from all root file systems.

Here is an example:

/dev/sda2 /+/base         ext4 defaults 0 0
/dev/sda1 /+/base/boot    ext4 defaults 0 0
/dev/sda4 /+/http         ext4 defaults 0 0
/dev/sda3 /+/work         ext4 defaults 0 0
/dev/sdb1 /aux/can/       ext4 defaults 0 0
/aux/can  /+/base/aux/can none bind     0 0
/aux/can  /+/http/aux/can none bind     0 0
/aux/can  /+/work/aux/can none bind     0 0

In the above example the content of /aux/can/
is visible also at: /+/base/aux/can/; /+/work/aux/can/; /+/http/aux/can/.

Each root runs in an unshared mnt namespace.
A file system that should be shared
must be mounted first on the rootfs.
Then it can be bound within root file systems.
The following example shares /home/ and /aux/can/

/dev/sda2 /+/base         ext4 defaults 0 0
/dev/sda1 /+/base/boot    ext4 defaults 0 0
/dev/sda4 /+/http         ext4 defaults 0 0
/dev/sda3 /+/work         ext4 defaults 0 0
/dev/sdb1 /aux/can/       ext4 defaults 0 0
/aux/can  /+/base/aux/can none bind     0 0
/aux/can  /+/http/aux/can none bind     0 0
/aux/can  /+/work/aux/can none bind     0 0
/dev/sdb2 /home           ext4 defaults 0 0
/home     /+/base/home    none bind     0 0
/home     /+/http/home    none bind     0 0
/home     /+/work/home    none bind     0 0

The fstab manual page explains the columns
found in /aux/set/rootfs/etc/fstab
The manual page is displayed by executing the command:
man fstab

A dedicated file system for /aux/run/
can also be shared.
However, each root file system must have it's own private view.

/dev/sda2     /+/base         ext4 defaults 0 0
/dev/sda1     /+/base/boot    ext4 defaults 0 0
/dev/sda4     /+/http         ext4 defaults 0 0
/dev/sda3     /+/work         ext4 defaults 0 0
/dev/sdb3     /aux/run/       ext4 defaults 0 0
/aux/run/base /+/base/aux/run none bind     0 0
/aux/run/http /+/http/aux/run none bind     0 0
/aux/run/work /+/work/aux/run none bind     0 0

In the above example the binds involving /aux/run/
only work after the relevant subdirectories are created on /aux/run/
The following command line would suffice:

mount /aux/run; mkdir /aux/run/{base,http,work}/


Section 1.C gettys

/etc/inittab is the traditional location
for specifying how gettys run.
It worked for single root file systems.
It is futile for multiple root file systems.
Consequently, gettys specified in /etc/inittab
only run on the rootfs.
Launching gettys from /etc/inittab is NOT recommended.

Each root file system has an init-script /etc/init.d/ttyd
ttyd dynamically allocates a virtual console
for providing a prompt for running a login program.
If the login program is activated
then gettyd allocates another virtual console
for providing an additional prompt
for starting a login program.
Therefore, multiple virtual console logins
to a root file system remain possible.

Linux provides a total of 64 virtual consoles.
As many as 63 root file systems
could run ttyd to provide login prompts.
However, the limit for root file systems is 256.
If running a massive amount of root file systems
then alternate login methods
for each root file system
must be provided/
sshd is a useful method for login into both
locally hosted and remotely hosted root file systems.

To prevent a root from offering a login on a virtual console
enter it's root file system and execute the following 2 commands:
bash      /etc/init.d/gettyd stop
chmod 400 /etc/init.d/gettyd

root file systems can be entered from the rootfs,
or by ttyd, or by ssh, or by a method that the SA creates.


Section 2.0 Customization

/etc/ and subdirectories of /etc/ are the traditional storage
locations for configuration files.
The exceptions are /etc/init.d/ /etc/rc.d/

/etc/init.d/ is the storage location for init-scripts.
/etc/rc.d/   is the storage location for symbolic links to init-scripts.
init-scripts are not configuration files.
Configuration files for init-scripts are stored in
/etc/init.d/conf.d/

Custom init-scripts can be created.
However, existing init-scripts can NOT be customized.
The Erudite Technic source management utilities
detect a modified init-script as a corrupt file.
Erudite Technic will re-install the software project
which provided the init-script.
The modified init-script will be overwritten
with a stock version of the init-script.

The rootfs is populated with files extracted from initramfs images
which are constructed from the base or key root file system.
However, the content of /etc/ for the rootfs can differ.
The content of /aux/set/rootfs/etc/ is copied to /etc/ during sysinit.
Therefore, the /etc/fstab on the rootfs should be provided
as /aux/set/rootfs/etc/fstab
And the /etc/{passwd,group,shadow} files for the rootfs
should be provided as /aux/set/rootfs/etc/{passwd,group,shadow}, respectively.
The use of {} indicates path name expansion.
/aux/set/rootfs/etc/{passwd,group,shadow} when expanded becomes
/aux/set/rootfs/etc/passwd
/aux/set/rootfs/etc/group
/aux/set/rootfs/etc/shadow


Section 2.1 init-script

A POSIX, portable operating system for unix,
is a collection of software from various vendors
which is installed and run in a meaningful fashion.
Individual init-scripts ensure properly ordered
execution and shutdown of services and filesystems.
It is a modular, dynamic, and efficient system
where init-scripts are added, removed,
and sometimes customized as necessary
in order to adjust to installed software.


Section 2.2 Init-scripts in Detail

Nearly LSB compliant init-scripts can be run.
They can be run with slight modification.
The following URL describes LSB compliant System V init-scripts:
http://www.linux-foundation.org/spec/refspecs/LSB_3.1.0/LSB-Core-generic/LSB-Core-generic/iniscrptfunc.html

The init-scripts in /etc/init.d/ are not LSB compliant.
Much of the code that an init-script executes
is provided in file /lib/lsb/init-functions.
Each init-script contains very little code.
This factorization makes init-scripts small,
fast, uniform, and easily edited.

Three categories of tasks exist for init-scripts:
Linux kernel module loading; file system mounting; service running.
Services can remain resident or execute and terminate.


Section 2.3 init-script customization

/etc/init.d/ contains init-scripts.

init-scripts will be mode 510 500 or 400.
To change the mode of an init-script run
the init-script with the parameter "control"

Some init-scripts should not be change
to a different mode than their default mode
otherwise a box might not properly run, boot, or shutdown.

Modes         of init-scripts are     retained across updates.
Modifications to init-scripts are not retained across updates.

To modify an init-script please do the following:
Where $ORIGINAL is written please substitute the original file name.
# cp $ORIGNAL custom-$ORIGINAL
# chmod 700   custom-$ORIGINAL
# chmod 600          $ORIGINAL
# nano        custom-$ORIGINAL
Add the comment # Provides: $ORIGINAL
Make other desired modifications.
CTRL-X y to save.

Customization of init-scripts installed by technics such
as the init-scripts technic is strongly discouraged.
Customizing init-scripts can cause failure of services to start
or even failure of a box being able to mount root file systems.


Section 2.4 Configuration

Some init-scripts support dialog menu driven configuration.
If running the init-script with parameter "help" reports
that an init-script supports accepts the parameter configure
then configure can be run to accept input for configuration variables.


Section 2.5 Init-script Menu

# /etc/init.d/Menu configure
can be run instead of selecting individual init-scripts.
The dialog menu driven interface is used to select
an init-script to execute and a parameter parameters to pass.


Section 3.0 Logs

Almost all logging is directed to files
within the /var/log/ directory hierarchy.
The exception are Erudite Technic logs.
Those exist within the /aux/log/ directory hierarchy


Section 3.1 /var/log/init/

/var/log/init/dmesg is a copy of the Linux kernel's ring buffer
made just before the completion of sysinit or completion of runlevel.

/var/log/init/{failed,passed,ran}/
are directories that store empty files
which indicate most recent execution status for init-scripts.

Time stamps of files within /var/log/init/ran/
indicate when an init-script was began execution.
Upon successfully exit of an init-script
empty file /var/log/init/passed/$INIT_SCRIPT is created,
where $INTIT_SCRIPT is the base name of the init-script.
Upon unsuccessful exit of an init-script
empty file /var/log/init/failed/$INIT_SCRIPT is created,

A quick scan of /var/log/init/failed/
will tell what failed during boot,
but not why it failed.
Reasons for failure may recorded in the system log
or the kernel ring buffer, or displayed on stderr
when the init-script ran.

Providing instruction for debugging init-scripts
is beyond the scope of this document.


Section 3.3 Boot scroll

Read   boot scroll?
Ignore boot scroll?
Consensus is lacking.
Some POSIX display a logo during boot
instead of displaying boot scroll.

If an error message prints then better to read than ignore?
If so then this init scroll method may be preferred.
Messages begin with a carriage return.
Carriage return moves the cursor to the line beginning.
Informational messages conclude without a line feed.
Error messages conclude with a line feed.

Hundreds of lines indicating success overwrite each other
while the lines that indicate problems stack on the console.
The result is that error messages that occur
during booting and shutdown are easily read.

The above convenience applies only to messages written by init-scripts.
Messages written by the kernel or by processes have line feeds.
Some scroll may occur which is not produced by an error condition.

EOF
