with info    edit 20131211
# also see
# http://www.nvidia.com/Download/index.aspx?lang=en-us
# It sometimes points to newer drivers.

with info    good 20131130
with info    last 20131106
with version stable 331.20 319.60 325.15
with version 331    331.20 331.13
with version 325    325.15 325.08
with version 319    319.60 319.49 319.32
with version 314    314.14 314.07
with version 313    313.96 313.18 313.09
with version 310    310.44 310.40 310.32
with version 304    304.108 304.88 304.64
with version 295    295.75
with version 290    290.10
with version 285    285.05.09 285.03
with version 280    280.13
with version 275    275.43 275.36 275.28
with version 270    270.41.19 270.41.06
if   [ -f "$INSTALL_INDEX"/MesaLib     ] ||
     [ -f "$INSTALL_INDEX"/xorg-server ]; then
with base    MesaLib gtk+ libXvMC linux-source xorg-server
fi
if   [ -f "$INSTALL_INDEX"/linux-modules ]; then
with base    linux-modules
fi
with role    kernel
with trait   library linux-module multilib-fail optimize solo x11 x86
with source  stable http://us.download.nvidia.com/XFree86/Linux-x86/$VERSION/NVIDIA-Linux-x86-$VERSION.run
with source  331    http://us.download.nvidia.com/XFree86/Linux-x86_64/$VERSION/NVIDIA-Linux-x86-$VERSION.run
with source  325    http://us.download.nvidia.com/XFree86/Linux-x86_64/$VERSION/NVIDIA-Linux-x86-$VERSION.run
with source  319    http://us.download.nvidia.com/XFree86/Linux-x86/$VERSION/NVIDIA-Linux-x86-$VERSION.run
with source  314    http://us.download.nvidia.com/XFree86/Linux-x86/$VERSION/NVIDIA-Linux-x86-$VERSION.run
with source  313    http://us.download.nvidia.com/XFree86/Linux-x86/$VERSION/NVIDIA-Linux-x86-$VERSION.run
with source  310    http://us.download.nvidia.com/XFree86/Linux-x86/$VERSION/NVIDIA-Linux-x86-$VERSION.run
with source  304    http://us.download.nvidia.com/XFree86/Linux-x86/$VERSION/NVIDIA-Linux-x86-$VERSION.run
with source  295    http://us.download.nvidia.com/XFree86/Linux-x86/$VERSION/NVIDIA-Linux-x86-$VERSION.run
with source  290    http://us.download.nvidia.com/XFree86/Linux-x86/$VERSION/NVIDIA-Linux-x86-$VERSION.run
with source  285    http://us.download.nvidia.com/XFree86/Linux-x86/$VERSION/NVIDIA-Linux-x86-$VERSION.run
with source  280    http://us.download.nvidia.com/XFree86/Linux-x86/$VERSION/NVIDIA-Linux-x86-$VERSION.run
with source  275    http://us.download.nvidia.com/XFree86/Linux-x86/$VERSION/NVIDIA-Linux-x86-$VERSION.run
with source  270    http://us.download.nvidia.com/XFree86/Linux-x86/$VERSION/NVIDIA-Linux-x86-$VERSION.run
with info    home http://www.nvidia.com
with info    vurl http://www.nvidia.com/object/unix.html
with info    freecode nvidiaxfree86_40drivers
with info    legacy http://www.nvidia.com/object/IO_32667.html
with clash   xf86-video-nouveau
with vary    /usr/lib/libvdpau.so
with vary    /usr/lib/libvdpau.so.1
with vary    /usr/lib/vdpau/libvdpau_trace.so
with vary    /usr/lib/vdpau/libvdpau_trace.so.1
with vary    /usr/lib/xorg/modules/extensions/libglx.so
with info    cite 'ELF 32-bit drivers and kernel module provided by NVIDIA for NVIDIA GPUs'

FEATURE[domain_log]=1

if   [[ $HOSTTYPE == x86_64 ]] &&
   ! [[ -f /lib/libc.so.6   ]]; then
with trait   broke
fi

build(){
 fix_install(){
  mv             "$DESTDIR"/usr/include/     "$DESTDIR"/usr/nvidia
  mkdir -pvm 755 "$DESTDIR"/usr/include/
  mv             "$DESTDIR"/usr/nvidia/vdpau "$DESTDIR"/usr/include/
  mv             "$DESTDIR"/usr/nvidia       "$DESTDIR"/usr/include/
  mkdir -pvm 755 "$DESTDIR"/etc/opengl/
  mkdir -vpm 755                             "$DESTDIR"/usr/lib/nvidia/
  mv    -v       "$DESTDIR"/usr/lib/libGL.*  "$DESTDIR"/usr/lib/nvidia/

  if   [[ $HOSTTYPE == x86_64 ]]
  then rm -fr "$DESTDIR"/{etc/init.d,usr/{bin,include,man,share}}
  else echo /usr/lib/nvidia  >>              "$DESTDIR"/etc/opengl/nvidia
  fi

# NVIDIA's wfb library can not be used by xorg and must not be installed
  rm -f "$DESTDIR"/usr/lib/xorg/modules/*wfb*

## libglx extension should be installed over xorg-server's libglx
# rm -f "$DESTDIR"/usr/lib/xorg/modules/extensions/libglx.*

  if   ! [ -f "${VERSION_LOGS:-/aux/log/version}/libX11" ] &&
       ! [ -f "${CURRENT_LOGS:-/aux/log/current}/libX11" ] &&
       ! [ -f       "${POST_LOGS:-/aux/log/post}/libX11" ]
  then rm -fr "${DESTDIR:-/tmp/empty}"/usr/{bin,include,lib,lib64}
  fi

  find "$DESTDIR" -type f -name nvidia.ko    | xargs -r xz -6
  find "$DESTDIR" -type f -name nvidia.ko.xz |             
  while read; do mv "$REPLY" "${REPLY%\.xz}"; done

  return 0
 }

 lversion(){
  local m=/usr/src/linux/Makefile

  if   ! [ -f $m ]
  then return
  fi

  local v="s:^VERSION=::p;d"
  local p="s:^PATCHLEVEL=::p;d"
  local s="s:^SUBLEVEL=::p;d"
  local e="s:^EXTRAVERSION=::p;d"
  local c="s: ::g;"

  v=$( sed "$c $v" $m )
  p=$( sed "$c $p" $m )
  s=$( sed "$c $s" $m )
  e=$( sed "$c $e" $m )

  [ -n "$p" ] && v+=".$p"
  [ -n "$s" ] && v+=".$s"
  [ -n "$e" ] && v+=".$e"

  LVER="$v"
 }

 lversion
 MOD_PATH=/usr/lib/xorg/modules

 local     BUILD_DIR="$SOURCE_DIR/$TECHNIC/$TECHNIC-$VERSION"
 rm   -fr "$BUILD_DIR"
 mkdir -p "$BUILD_DIR"
 cd       "$BUILD_DIR"
 echo -e "#!/bin/bash\n/sbin/lsmod | grep -v \"nvidia\|rivafb\|nvidiafb\"" > "$BUILD_DIR"/lsmod
 chmod a+x "$BUILD_DIR"/lsmod
 export PATH="$BUILD_DIR:$PATH"

 mkdir -pvm 755 "$DESTDIR"/lib/modules/"$LVER"/kernel/drivers/video/
 mkdir -pvm 755 "$DESTDIR"/usr/{include,lib64}/

 PARAMETERS="
--accept-license
--no-questions
--ui=none
--x-prefix=$DESTDIR/usr
--x-module-path=$DESTDIR/$MOD_PATH
--x-library-path=$DESTDIR/usr/lib
--opengl-prefix=$DESTDIR/usr
--installer-prefix=$DESTDIR/usr
--utility-prefix=$DESTDIR/usr
--documentation-prefix=$DESTDIR/usr
--kernel-name=$LVER
--kernel-source-path=$PWD/linux
--kernel-install-path=$DESTDIR/lib/modules/$LVER/kernel/drivers/video
--no-runlevel-check
--no-abi-note
--no-rpms
--no-backup 
--no-network
--no-recursion
--no-x-check
--no-cc-version-check
--no-distro-scripts"

 if     [[ $HOSTTYPE == x86_64 ]]; then
  PARAMETERS+=" --no-kernel-module"
  echo "kernel is x86_64 therefore"
  echo "NVIDIA-Linux-x86_64 provides the kernel module."
 elif ! [ -d /usr/src/linux     ]; then
  PARAMETERS+=" --no-kernel-module"
  echo      "/usr/src/linux/ is missing."
  echo "Therefore, required kernel module will not be installed."
 elif ! [ -d /lib/modules/      ]; then
  PARAMETERS+=" --no-kernel-module"
  echo      "/lib/modules/ is missing."
  echo "Therefore, required kernel module will not be installed."
 else
  local    d=/usr/src/linux
  local c=$d/.config.custom
  local s=$d/.config.stock

  cp -a /usr/src/linux .

    if [ -f $c ]; then cp $c linux/.config
  elif [ -f $s ]; then cp $s linux/.config
  else
   echo "$c does not exist"
   echo "$s does not exist"
   echo "$c or $s must exist"
   echo "try casting linux-config first"
   return 1
  fi
  cd linux
  yes '' |
  make oldconfig
# make silentoldconfig
  make prepare scripts
  cd ..
 fi

 if   [[ $HOSTTYPE == x86_64 ]]
 then yes Yes | setarch i686 sh "${SOURCE[0]}" $PARAMETERS --no-kernel-module
 else yes Yes |              sh "${SOURCE[0]}" $PARAMETERS
 fi &&
 fix_install
}

# When using the dual architecture binary
# then some files install without tracking.
# When using a multilib technic for NVIDIA-Linux-x86
# then some files like /usr/lib/libnvidia-tls mysterious vanish
# prior to installation.
# Probably NVIDIA's installer deletes them.
# Attempted with both multilib-dual and without.
# Only means for flawless installation is to use 2 technics.
