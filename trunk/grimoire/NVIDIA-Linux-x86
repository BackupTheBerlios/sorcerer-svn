# xorg-server requirement added purely for ordering.
# With NVIDIA-Linux-x86 version 173.14.12
# installed ontop of MesaLib version 7.2
# xorg-server version 1.5.1 will fail to compile
# Due to the NVIDIA-Linux-x86 header files not providing
# what xorg-server expects.

   version stable 260.19.44 260.19.29 260.19.21 260.19.12
   require MesaLib gtk+ libXvMC xorg-server
  optional linux-kernel '' '' for kernel module
 attribute multilib-fail
  category kernel
case $HOSTTYPE in
 x86_64) attribute library linux-26-module solo x11 x86_64
  if   [[ -f /lib/libc.so.6 ]]
  then source http://us.download.nvidia.com/XFree86/Linux-x86_64/$VERSION/NVIDIA-Linux-x86_64-$VERSION.run
  else source http://us.download.nvidia.com/XFree86/Linux-x86_64/$VERSION/NVIDIA-Linux-x86_64-$VERSION-no-compat32.run
  fi
 ;;
# http://us.download.nvidia.com/XFree86/Linux-x86_64/256.44/NVIDIA-Linux-x86_64-256.44.run
      *) attribute library linux-26-module solo x11 x86
            source http://us.download.nvidia.com/XFree86/Linux-x86/$VERSION/NVIDIA-Linux-x86-$VERSION.run ;;
#           source http://us.download.nvidia.com/XFree86/Linux-x86/$VERSION/NVIDIA-Linux-x86-$VERSION-pkg1.run ;;
# http://us.download.nvidia.com/XFree86/Linux-x86/256.44/NVIDIA-Linux-x86-256.44.run
esac
      vurl http://www.nvidia.com/object/unix.html
  homepage http://www.nvidia.com
 freshmeat nvidiaxfree86_40drivers
    CFLAGS='-O3'
   LDFLAGS='-Wl,-O1'
  estimate 200
      desc 'drivers provided by NVIDIA for NVIDIA GPUs
NVIDIA-Linux-x86 contains both
the nvidia provided binary xorg drivers
and the linux kernel module.

In order for this to work remember to edit Section "Files"
of /etc/X11/xorg.conf and add:

    ModulePath      "/usr/lib/modules"
    ModulePath      "/usr/lib/xorg/modules"

Included is a sample config file that works with 2 monitors.
/root/.sorcery/grimoire/NVIDIA-Linux-x86.d/xorg.conf'


build(){
 fix_install(){
  mv       $DESTDIR/usr/include        $DESTDIR/usr/nvidia
  mkdir -p $DESTDIR/usr/include
  mv       $DESTDIR/usr/nvidia/vdpau   $DESTDIR/usr/include
  mv       $DESTDIR/usr/nvidia         $DESTDIR/usr/include
  mkdir -p $DESTDIR/etc/opengl/

  if   [ -h $DESTDIR/usr/lib64/libGL.so.1 ]; then
   mkdir -vpm 755                        $DESTDIR/usr/lib64/nvidia
   mv    -v   $DESTDIR/usr/lib64/libGL.* $DESTDIR/usr/lib64/nvidia/
   echo        /usr/lib64/nvidia  >      $DESTDIR/etc/opengl/nvidia
   echo /opt/ia32/usr/lib/nvidia >>      $DESTDIR/etc/opengl/nvidia
  fi
  if [ -h $DESTDIR/usr/lib/libGL.so.1 ]; then
   mkdir -vpm 755                        $DESTDIR/usr/lib/nvidia
   mv    -v   $DESTDIR/usr/lib/libGL.*   $DESTDIR/usr/lib/nvidia/
   echo          /usr/lib/nvidia  >>     $DESTDIR/etc/opengl/nvidia
  fi

# NVIDIA's wfb library can not be used by xorg and must not be installed
  rm -f $DESTDIR/usr/lib{,64}/xorg/modules/*wfb*

## libglx extension should be installed over xorg-server's libglx
# rm -f $DESTDIR/usr/lib{,64}/xorg/modules/extensions/libglx.*

  return 0
 }

 case $HOSTTYPE in
  x86_64) MOD_PATH=/usr/lib64/xorg/modules ;;
       *) MOD_PATH=/usr/lib/xorg/modules   ;;
  esac

 PRO="$( get_provider linux-kernel )"
 if   spell_installed $PRO
 then LVER="$( installed_version $PRO  )"
 else LVER="$( available_version linux )"
 fi

 PARAMETERS="
--accept-license
--no-questions
--ui=none
--x-prefix=$DESTDIR/usr
--x-module-path=$DESTDIR/$MOD_PATH
--x-library-path=$DESTDIR/usr/lib
--opengl-prefix=$DESTDIR/usr
--installer-prefix=$DESTDIR/usr
--utility-prefix=$DESTDIR/usr
--documentation-prefix=$DESTDIR/usr
--kernel-source-path=/usr/src/linux
--kernel-install-path=$DESTDIR/lib/modules/$LVER/kernel/drivers/video
--kernel-name=$LVER
--no-runlevel-check
--no-abi-note
--no-rpms
--no-backup 
--no-network
--no-recursion
--no-x-check
--no-cc-version-check
--no-distro-scripts"

local     BUILD_DIR="$SOURCE_DIR/$SPELL/$SPELL-$VERSION"
mkdir -p $BUILD_DIR
cd       $BUILD_DIR
echo -e "#!/bin/bash\n/sbin/lsmod | grep -v \"nvidia\|rivafb\|nvidiafb\"" > $BUILD_DIR/lsmod
chmod a+x $BUILD_DIR/lsmod
export PATH=$BUILD_DIR:$PATH

if   ! [ "$( uname -m )" == "$HOSTTYPE" ]; then
 echo "Assuming compiling on x86_64 architecture while chrooted into"
 echo "/opt/ia32 onto a Sorcerer IA32 installation."
 echo    "Therefore, trying to compile and install without kernel module."
 PARAMETERS+=" --no-kernel-module"
elif ! [ -d /usr/src/linux ]; then
 echo    "/usr/src/linux is missing."
 echo    "Therefore, trying to compile and install without kernel module."
 PARAMETERS+=" --no-kernel-module"
fi

mkdir -p $DESTDIR/lib/modules/$LVER/kernel/drivers/video
mkdir -p $DESTDIR/usr/{include,lib}
bash $SOURCE $PARAMETERS &&
fix_install
}
