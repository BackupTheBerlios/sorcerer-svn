diff -r -U2 ppl-0.12.1/src/mp_std_bits.cc ppl-0.12.1/src/mp_std_bits.cc
--- ppl-0.12.1/src/mp_std_bits.cc	2012-04-16 05:12:06.000000000 -0700
+++ ppl-0.12.1/src/mp_std_bits.cc	2012-04-16 05:12:06.000000000 -0700
@@ -46,5 +46,4 @@
 const bool std::numeric_limits<mpz_class>::is_modulo;
 const bool std::numeric_limits<mpz_class>::traps;
-const bool std::numeric_limits<mpz_class>::tininess_before;
 const std::float_round_style std::numeric_limits<mpz_class>::round_style;
 
@@ -69,4 +68,3 @@
 const bool std::numeric_limits<mpq_class>::is_modulo;
 const bool std::numeric_limits<mpq_class>::traps;
-const bool std::numeric_limits<mpq_class>::tininess_before;
 const std::float_round_style std::numeric_limits<mpq_class>::round_style;
diff -r -U2 ppl-0.12.1/src/mp_std_bits.defs.hh ppl-0.12.1/src/mp_std_bits.defs.hh
--- ppl-0.12.1/src/mp_std_bits.defs.hh	2012-04-16 05:12:06.000000000 -0700
+++ ppl-0.12.1/src/mp_std_bits.defs.hh	2013-02-23 11:25:53.362276410 -0700
@@ -44,122 +44,8 @@
 //! Specialization of std::numeric_limits.
 #endif // defined(PPL_DOXYGEN_INCLUDE_IMPLEMENTATION_DETAILS)
-template <>
-class numeric_limits<mpz_class> {
-private:
-  typedef mpz_class Type;
-
-public:
-  static const bool is_specialized = true;
-  static const int digits = 0;
-  static const int digits10 = 0;
-  static const bool is_signed = true;
-  static const bool is_integer = true;
-  static const bool is_exact = true;
-  static const int radix = 2;
-  static const int min_exponent = 0;
-  static const int min_exponent10 = 0;
-  static const int max_exponent = 0;
-  static const int max_exponent10 = 0;
-  static const bool has_infinity = false;
-  static const bool has_quiet_NaN =  false;
-  static const bool has_signaling_NaN = false;
-  static const float_denorm_style has_denorm = denorm_absent;
-  static const bool has_denorm_loss = false;
-  static const bool is_iec559 = false;
-  static const bool is_bounded = false;
-  static const bool is_modulo = false;
-  static const bool traps = false;
-  static const bool tininess_before = false;
-  static const float_round_style round_style = round_toward_zero;
-
-  static Type min() {
-    return static_cast<Type>(0);
-  }
-
-  static Type max() {
-    return static_cast<Type>(0);
-  }
-
-  static Type epsilon() {
-    return static_cast<Type>(0);
-  }
-
-  static Type round_error() {
-    return static_cast<Type>(0);
-  }
-
-  static Type infinity() {
-    return static_cast<Type>(0);
-  }
-
-  static Type quiet_NaN() {
-    return static_cast<Type>(0);
-  }
-
-  static Type denorm_min() {
-    return static_cast<Type>(1);
-  }
-};
 
 #ifdef PPL_DOXYGEN_INCLUDE_IMPLEMENTATION_DETAILS
 //! Specialization of std::numeric_limits.
 #endif // defined(PPL_DOXYGEN_INCLUDE_IMPLEMENTATION_DETAILS)
-template <>
-class numeric_limits<mpq_class> {
-private:
-  typedef mpq_class Type;
-
-public:
-  static const bool is_specialized = true;
-  static const int digits = 0;
-  static const int digits10 = 0;
-  static const bool is_signed = true;
-  static const bool is_integer = false;
-  static const bool is_exact = true;
-  static const int radix = 2;
-  static const int min_exponent = 0;
-  static const int min_exponent10 = 0;
-  static const int max_exponent = 0;
-  static const int max_exponent10 = 0;
-  static const bool has_infinity = false;
-  static const bool has_quiet_NaN =  false;
-  static const bool has_signaling_NaN = false;
-  static const float_denorm_style has_denorm = denorm_absent;
-  static const bool has_denorm_loss = false;
-  static const bool is_iec559 = false;
-  static const bool is_bounded = false;
-  static const bool is_modulo = false;
-  static const bool traps = false;
-  static const bool tininess_before = false;
-  static const float_round_style round_style = round_toward_zero;
-
-  static Type min() {
-    return static_cast<Type>(0);
-  }
-
-  static Type max() {
-    return static_cast<Type>(0);
-  }
-
-  static Type epsilon() {
-    return static_cast<Type>(0);
-  }
-
-  static Type round_error() {
-    return static_cast<Type>(0);
-  }
-
-  static Type infinity() {
-    return static_cast<Type>(0);
-  }
-
-  static Type quiet_NaN() {
-    return static_cast<Type>(0);
-  }
-
-  static Type denorm_min() {
-    return static_cast<Type>(0);
-  }
-};
 
 } // namespace std
