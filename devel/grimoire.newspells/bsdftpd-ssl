#!/bin/bash

   VERSION=( "1.1.0" "1.0.2" )
  CATEGORY="ftp"
 ATTRIBUTE="server console"
   #SOURCE="bsdftpd-6.0-ssl-$VERSION.tar.gz"
    SOURCE="bsdftpd-ssl-$VERSION.tar.gz"
      URL="http://bsdftpd-ssl.sc.ru/files/bsdftpd-ssl/"
  HOMEPAGE="http://bsdftpd-ssl.sc.ru/"
  EPROVIDE="ftpd"
	 REQ=("openssl ncurses byacc tcp_wrappers"
				"Linux-PAM:::"
				"xinetd:::for running server")
 FRESHMEAT="BSDftpd-ssl"
  ESTIMATE=439
     DESC=("a secured ftp server"
"BSDftpd-ssl is a TLS/SSL-enhanced FTP server. It is based on FreeBSD's ftpd,
so it is supposed to be a stable and secure solution for authorized user access.
The TLS/SSL enhancement allows RFC2228 \"FTP Security Extensions\"-compliant
TLS/SSL support for both control and data connections. This feature requires
special clients that are also available. Both server and clients are fully 
compatible with standard FTP protocol (for example, FTP server can support
TLS/SSL-aware and standard clients simultaneously)." )


configure() { 	
	if ! test -f  $OPT_ON_LOGS/$BSPELL
	then
	
		if    query  "Invoke bsdftpd during boot? "  n
		then  echo   "FTPD_BOOT"   >>  $OPT_ON_LOGS/$BSPELL
		else  echo   "FTPD_BOOT"  >>  $OPT_OFF_LOGS/$BSPELL
		fi
	fi
	
	if ! test -f  $OPT_ON_LOGS/$BSPELL
	then
		if    query  "Invoke bsdftpd in secure mode only? "  n
		then  echo   "FTPD_SECURE"   >>  $OPT_ON_LOGS/$BSPELL
		echo ""
		echo ""
		echo "dummy certificate creation : use with care"
		echo "will cause queries on build step which will stop build process"
		echo "if you want to build a certificate after compile, untar the sources"
		echo "and go to cert directory, see doc too :) "
		if query "create dummy certificate?" n
		then echo "FTPD_DUMMY" >> $OPT_ON_LOGS/$BSPELL
		else echo "FTPD_DUMMY" >> $OPT_OFF_LOGS/$BSPELL
		fi
		else  echo   "FTPD_SECURE"  >> $OPT_OFF_LOGS/$BSPELL
		fi
	fi

}


build() {
	fix_sources() {
		case $VERSION in
			1.0.2)
				sed  -i  "s:/usr/local:/usr:"   Makefile &&
				patch -p1 < $SCRIPT_DIR/bsdftpd-ssl.patch
				;;
			*)
		esac
	}

	install_conf() {
		cp  $SCRIPT_DIR/bsdftpd-ssl.sh  /etc/init.d
		
		if grep -q "FTPD_SECURE" $OPT_ON_LOGS/$BSPELL; then
			cp $SCRIPT_DIR/ftpd-secure /etc/xinetd.d/ftp
		else 
			cp $SCRIPT_DIR/ftp /etc/xinetd.d/
		fi
		
		
		if ! grep -q "xinietd" $OPT_ON_LOGS/$BSPELL;  then
			ln  -sf  ../init.d/bsdftpd-ssl.sh  /etc/rc0.d/K10bsdftpd-ssl
			ln  -sf  ../init.d/bsdftpd-ssl.sh  /etc/rc1.d/K10bsdftpd-ssl
			ln  -sf  ../init.d/bsdftpd-ssl.sh  /etc/rc2.d/K10bsdftpd-ssl
			ln  -sf  ../init.d/bsdftpd-ssl.sh  /etc/rc6.d/K10bsdftpd-ssl
		
			ln  -sf  ../init.d/bsdftpd-ssl.sh  /etc/rc3.d/S90bsdftpd-ssl
			ln  -sf  ../init.d/bsdftpd-ssl.sh  /etc/rc4.d/S90bsdftpd-ssl
			ln  -sf  ../init.d/bsdftpd-ssl.sh  /etc/rc5.d/S90bsdftpd-ssl
		fi
			
	}
	
	
	export PATH="$CANTRIP/opt/byacc:$PATH"
	./config.sh `uname` &&
	fix_sources         &&
	make                   &&
	prepare_install        &&
	make    install        &&	
	install_conf           &&
	if grep -q "FTPD_DUMMY" $OPT_ON_LOGS/$BSPELL &&
			! grep -q postconfdone $OPT_ON_LOGS/$BSPELL
	then
		cd $SOURCE_DIR/$BSPELL*
		cert/cert-dummy.sh
		mv ./cert-dummy.pem /etc/ssl/certs/ftpd.pem
		cd -
		echo postconfdone >>$OPT_ON_LOGS/$BSPELL
	fi

}


pre_remove() {
	if  [  -x  /etc/init.d/bsdftpd-ssl.sh  ]; then
						 /etc/init.d/bsdftpd-ssl.sh stop
	fi
}
